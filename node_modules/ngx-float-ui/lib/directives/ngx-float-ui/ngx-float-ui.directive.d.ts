import { ChangeDetectorRef, ComponentRef, ElementRef, EventEmitter, OnDestroy, OnInit, ViewContainerRef } from "@angular/core";
import { Subject } from "rxjs";
import { NgxFloatUiContentComponent } from "../../components/ngx-float-ui-content/ngx-float-ui-content.component";
import { NgxFloatUiOptions } from "../../models/ngx-float-ui-options.model";
import { NgxFloatUiPlacements } from "../../models/ngx-float-ui-placements.model";
import { NgxFloatUiTriggers } from "../../models/ngx-float-ui-triggers.model";
import * as i0 from "@angular/core";
export declare class NgxFloatUiDirective implements OnInit, OnDestroy {
    protected _changeDetectorRef: ChangeDetectorRef;
    protected _elementRef: ElementRef;
    protected _vcr: ViewContainerRef;
    protected _popperDefaults: NgxFloatUiOptions;
    static baseOptions: NgxFloatUiOptions;
    set applyClass(newValue: string);
    get applyClass(): string;
    set arrowClass(newValue: string);
    get arrowClass(): string;
    set disabled(newValue: boolean);
    get disabled(): boolean;
    set floatUi(newValue: string | NgxFloatUiContentComponent);
    get floatUi(): string | NgxFloatUiContentComponent;
    set hideOnClickOutside(newValue: boolean | string);
    get hideOnClickOutside(): boolean;
    set placement(newValue: NgxFloatUiPlacements);
    get placement(): NgxFloatUiPlacements;
    set preventOverflow(newValue: boolean);
    get preventOverflow(): boolean;
    set showOnStart(newValue: boolean);
    get showOnStart(): boolean;
    appendTo: string;
    ariaDescribe: string | void;
    ariaRole: string | void;
    boundariesElement: string;
    disableAnimation: boolean;
    disableStyle: boolean;
    hideOnMouseLeave: boolean | void;
    hideOnScroll: boolean | void;
    hideTimeout: number;
    onHidden: EventEmitter<NgxFloatUiDirective>;
    onShown: EventEmitter<NgxFloatUiDirective>;
    onUpdate: EventEmitter<void>;
    positionFixed: boolean;
    showDelay: number | undefined;
    showTrigger: NgxFloatUiTriggers | undefined;
    styles: object;
    targetElement: HTMLElement;
    timeoutAfterShow: number;
    protected _applyClass: string;
    protected _arrowClass: string;
    protected _content: NgxFloatUiContentComponent;
    protected _contentClass: typeof NgxFloatUiContentComponent;
    protected _contentRef: ComponentRef<NgxFloatUiContentComponent>;
    protected _destroy$: Subject<void>;
    protected _disabled: boolean;
    protected _floatUi: string | NgxFloatUiContentComponent;
    protected _globalEventListenersCtrl$: Subject<void>;
    protected _hideOnClickOutside: boolean;
    protected _placement: NgxFloatUiPlacements;
    protected _preventOverflow: boolean;
    protected _scheduledHideTimeoutCtrl$: Subject<void>;
    protected _scheduledShowTimeoutCtrl$: Subject<void>;
    protected _shown: boolean;
    protected _showOnStart: boolean;
    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef, _vcr: ViewContainerRef, _popperDefaults?: NgxFloatUiOptions);
    static assignDefined(target: any, ...sources: any[]): any;
    applyTriggerListeners(): void;
    getRefElement(): any;
    hide(): void;
    hideOnClickOutsideHandler($event: MouseEvent): void;
    hideOnScrollHandler($event: MouseEvent): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    scheduledHide($event?: any, delay?: number): void;
    scheduledShow(delay?: number): void;
    show(): void;
    toggle(): void;
    protected _addListener(eventName: string, cb: () => void): void;
    protected _applyChanges(): void;
    protected _checkExisting(key: string, newValue: string | number | boolean | NgxFloatUiPlacements): void;
    protected _constructContent(): NgxFloatUiContentComponent;
    protected _getScrollParent(node: any): any;
    protected _onPopperUpdate(): void;
    protected _setContentProperties(popperRef: NgxFloatUiContentComponent): void;
    protected _setDefaults(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxFloatUiDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<NgxFloatUiDirective, "[floatUi]", ["floatUi"], { "applyClass": { "alias": "applyClass"; "required": false; }; "arrowClass": { "alias": "arrowClass"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "floatUi": { "alias": "floatUi"; "required": false; }; "hideOnClickOutside": { "alias": "hideOnClickOutside"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; "preventOverflow": { "alias": "preventOverflow"; "required": false; }; "showOnStart": { "alias": "showOnStart"; "required": false; }; "appendTo": { "alias": "appendTo"; "required": false; }; "ariaDescribe": { "alias": "ariaDescribe"; "required": false; }; "ariaRole": { "alias": "ariaRole"; "required": false; }; "boundariesElement": { "alias": "boundariesElement"; "required": false; }; "disableAnimation": { "alias": "disableAnimation"; "required": false; }; "disableStyle": { "alias": "disableStyle"; "required": false; }; "hideOnMouseLeave": { "alias": "hideOnMouseLeave"; "required": false; }; "hideOnScroll": { "alias": "hideOnScroll"; "required": false; }; "hideTimeout": { "alias": "hideTimeout"; "required": false; }; "positionFixed": { "alias": "positionFixed"; "required": false; }; "showDelay": { "alias": "showDelay"; "required": false; }; "showTrigger": { "alias": "showTrigger"; "required": false; }; "styles": { "alias": "styles"; "required": false; }; "targetElement": { "alias": "targetElement"; "required": false; }; "timeoutAfterShow": { "alias": "timeoutAfterShow"; "required": false; }; }, { "onHidden": "onHidden"; "onShown": "onShown"; "onUpdate": "onUpdate"; }, never, never, true, never>;
}
