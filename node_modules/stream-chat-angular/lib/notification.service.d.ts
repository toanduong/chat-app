import { TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { NotificationPayload, NotificationType } from './types';
import * as i0 from "@angular/core";
/**
 * The `NotificationService` can be used to add or remove notifications. By default the [`NotificationList`](/chat/docs/sdk/angular/components/NotificationListComponent/) component displays the currently active notifications.
 */
export declare class NotificationService {
    /**
     * Emits the currently active [notifications](https://github.com/GetStream/stream-chat-angular/blob/master/projects/stream-chat-angular/src/lib/notification.service.ts).
     */
    notifications$: Observable<NotificationPayload[]>;
    private notificationsSubject;
    constructor();
    /**
     * Displays a notification for the given amount of time.
     * @param content The text of the notification or the HTML template for the notification
     * @param type The type of the notification
     * @param timeout The number of milliseconds while the notification should be visible
     * @param translateParams Translation parameters for the `content` (for text notifications)
     * @param templateContext The input of the notification template (for HTML notifications)
     * @returns A method to clear the notification (before the timeout).
     */
    addTemporaryNotification<T>(content: string | TemplateRef<T>, type?: NotificationType, timeout?: number, translateParams?: object, templateContext?: T): () => void;
    /**
     * Displays a notification, that will be visible until it's removed.
     * @param content The text of the notification or the HTML template for the notification
     * @param type The type of the notification
     * @param translateParams Translation parameters for the `content` (for text notifications)
     * @param templateContext The input of the notification template (for HTML notifications)
     * @returns A method to clear the notification.
     */
    addPermanentNotification<T = object>(content: string | TemplateRef<T>, type?: NotificationType, translateParams?: object, templateContext?: T): () => void;
    private createNotification;
    private removeNotification;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NotificationService>;
}
