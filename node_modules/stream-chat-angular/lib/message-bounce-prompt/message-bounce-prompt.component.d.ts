import { OnDestroy } from '@angular/core';
import { ChannelService } from '../channel.service';
import { CustomTemplatesService } from '../custom-templates.service';
import { MessageActionsService } from '../message-actions.service';
import { StreamMessage } from '../types';
import * as i0 from "@angular/core";
/**
 * The component watches for the [`channelService.bouncedMessage$` stream](/chat/docs/sdk/angular/services/ChannelService/#bouncedmessage) and opens the bounce modal if a message is emitted.
 *
 * To bounce messages, you need to set up [semantic filters for moderation](https://getstream.io/automated-moderation/docs/automod_configuration/?q=semantic%20filters).
 */
export declare class MessageBouncePromptComponent implements OnDestroy {
    private channelService;
    readonly customTemplatesService: CustomTemplatesService;
    private messageActionsService;
    class: string;
    isModalOpen: boolean;
    message?: StreamMessage;
    private subscriptions;
    constructor(channelService: ChannelService, customTemplatesService: CustomTemplatesService, messageActionsService: MessageActionsService);
    messageBounceModalOpenChanged: (isOpen: boolean) => void;
    ngOnDestroy(): void;
    resendMessage(): Promise<void>;
    deleteMessage(): Promise<void>;
    editMessage(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessageBouncePromptComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessageBouncePromptComponent, "stream-message-bounce-prompt", never, {}, {}, never, never, false, never>;
}
