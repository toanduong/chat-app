import { AfterViewInit, ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { DefaultStreamChatGenerics, MessageReactionType } from '../types';
import { ReactionResponse } from 'stream-chat';
import { ChannelService } from '../channel.service';
import { MessageReactionsService } from '../message-reactions.service';
import * as i0 from "@angular/core";
/**
 * The `MessageReactionsSelectorComponent` makes it possible for users to react to a message, the reaction options can be set using the [`MessageReactionsService`](/chat/docs/sdk/angular/services/MessageReactionsService/). You can read more about [message reactions](/chat/docs/javascript/send_reaction/) in the platform documentation.
 */
export declare class MessageReactionsSelectorComponent implements OnInit, OnDestroy, AfterViewInit {
    private channelService;
    private messageReactionsService;
    private cdRef;
    /**
     * List of the user's own reactions of a [message](/chat/docs/sdk/angular/types/stream-message/), used to display the users of a reaction type.
     */
    ownReactions: ReactionResponse<DefaultStreamChatGenerics>[];
    /**
     * The id of the message the reactions belong to
     */
    messageId: string | undefined;
    reactionOptions: string[];
    private subscriptions;
    private isViewInited;
    constructor(channelService: ChannelService, messageReactionsService: MessageReactionsService, cdRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    trackByMessageReaction(_: number, item: MessageReactionType): string;
    isOwnReaction(reactionType: MessageReactionType): boolean;
    getEmojiByReaction(reactionType: MessageReactionType): string;
    react(type: MessageReactionType): Promise<void>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessageReactionsSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessageReactionsSelectorComponent, "stream-message-reactions-selector", never, { "ownReactions": "ownReactions"; "messageId": "messageId"; }, {}, never, never, false, never>;
}
