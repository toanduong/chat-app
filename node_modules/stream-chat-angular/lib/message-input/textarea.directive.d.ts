import { ComponentRef, EventEmitter, OnChanges, SimpleChanges, ViewContainerRef } from '@angular/core';
import { UserResponse } from 'stream-chat';
import { TextareaInterface } from './textarea.interface';
import * as i0 from "@angular/core";
export declare class TextareaDirective implements OnChanges {
    viewContainerRef: ViewContainerRef;
    componentRef: ComponentRef<TextareaInterface & Partial<OnChanges>> | undefined;
    areMentionsEnabled: boolean | undefined;
    mentionScope?: 'channel' | 'application';
    inputMode: 'mobile' | 'desktop';
    value: string;
    placeholder: string | undefined;
    autoFocus: boolean;
    readonly valueChange: EventEmitter<string>;
    readonly send: EventEmitter<void>;
    readonly userMentions: EventEmitter<UserResponse<import("stream-chat").DefaultGenerics>[]>;
    readonly pasteFromClipboard: EventEmitter<ClipboardEvent>;
    private subscriptions;
    private unpropagatedChanges;
    constructor(viewContainerRef: ViewContainerRef);
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TextareaDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TextareaDirective, "[streamTextarea]", never, { "componentRef": "componentRef"; "areMentionsEnabled": "areMentionsEnabled"; "mentionScope": "mentionScope"; "inputMode": "inputMode"; "value": "value"; "placeholder": "placeholder"; "autoFocus": "autoFocus"; }, { "valueChange": "valueChange"; "send": "send"; "userMentions": "userMentions"; "pasteFromClipboard": "pasteFromClipboard"; }, never, never, false, never>;
}
