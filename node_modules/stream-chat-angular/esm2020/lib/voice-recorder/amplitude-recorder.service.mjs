import { Injectable, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../chat-client.service";
const MAX_FREQUENCY_AMPLITUDE = 255;
const rootMeanSquare = (values) => Math.sqrt(values.reduce((acc, val) => acc + Math.pow(val, 2), 0) / values.length);
export const DEFAULT_AMPLITUDE_RECORDER_CONFIG = {
    analyserConfig: {
        fftSize: 32,
        maxDecibels: 0,
        minDecibels: -100,
    },
    sampleCount: 100,
    samplingFrequencyMs: 60,
};
/**
 * The `AmplitudeRecorderService` is a utility service used to create amplitude values for voice recordings, making it possible to display a wave bar
 */
export class AmplitudeRecorderService {
    constructor(chatService) {
        this.chatService = chatService;
        this.config = DEFAULT_AMPLITUDE_RECORDER_CONFIG;
        this.amplitudesSubject = new BehaviorSubject([]);
        this.errorSubject = new BehaviorSubject(undefined);
        /**
         * Start amplitude recording for the given media stream
         * @param stream
         */
        this.start = (stream) => {
            this.stop();
            this.stream = stream;
            this.init();
            this.resume();
        };
        this.amplitudes$ = this.amplitudesSubject.asObservable();
        this.error$ = this.errorSubject.asObservable();
    }
    /**
     * The recorded amplitudes
     */
    get amplitudes() {
        return this.amplitudesSubject.value;
    }
    /**
     * Temporarily pause amplitude recording, recording can be resumed with `resume`
     */
    pause() {
        clearInterval(this.amplitudeSamplingInterval);
        this.amplitudeSamplingInterval = undefined;
    }
    /**
     * Resume amplited recording after it was pasued
     */
    resume() {
        this.amplitudeSamplingInterval = setInterval(() => {
            if (!this.analyserNode) {
                return;
            }
            const frequencyBins = new Uint8Array(this.analyserNode.frequencyBinCount);
            try {
                this.analyserNode.getByteFrequencyData(frequencyBins);
            }
            catch (e) {
                this.logError(e);
                this.errorSubject.next(e);
                return;
            }
            const normalizedSignalStrength = rootMeanSquare(frequencyBins) / MAX_FREQUENCY_AMPLITUDE;
            this.amplitudesSubject.next([
                ...this.amplitudesSubject.value,
                normalizedSignalStrength,
            ]);
        }, this.config.samplingFrequencyMs);
    }
    /**
     * Stop the amplitude recording and frees up used resources
     */
    stop() {
        if (!this.stream) {
            return;
        }
        this.stream = undefined;
        clearInterval(this.amplitudeSamplingInterval);
        this.amplitudeSamplingInterval = undefined;
        this.amplitudesSubject.next([]);
        this.errorSubject.next(undefined);
        this.microphone?.disconnect();
        this.analyserNode?.disconnect();
        if (this.audioContext?.state !== 'closed') {
            void this.audioContext?.close();
        }
    }
    init() {
        if (!this.stream) {
            return;
        }
        this.audioContext = new AudioContext();
        this.analyserNode = this.audioContext.createAnalyser();
        const { analyserConfig } = this.config;
        this.analyserNode.fftSize = analyserConfig.fftSize;
        this.analyserNode.maxDecibels = analyserConfig.maxDecibels;
        this.analyserNode.minDecibels = analyserConfig.minDecibels;
        this.microphone = this.audioContext.createMediaStreamSource(this.stream);
        this.microphone.connect(this.analyserNode);
    }
    logError(error) {
        this.chatService.chatClient?.logger('error', error.message, {
            error: error,
            tag: ['AmplitudeRecorderService'],
        });
    }
}
AmplitudeRecorderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AmplitudeRecorderService, deps: [{ token: i1.ChatClientService }], target: i0.ɵɵFactoryTarget.Injectable });
AmplitudeRecorderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AmplitudeRecorderService, providedIn: NgModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AmplitudeRecorderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: NgModule }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }]; } });
//# sourceMappingURL=data:application/json;base64,