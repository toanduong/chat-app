import { Injectable, NgModule } from '@angular/core';
import { readBlobAsArrayBuffer } from '../file-utils';
import * as i0 from "@angular/core";
const WAV_HEADER_LENGTH_BYTES = 44;
const BYTES_PER_SAMPLE = 2;
const RIFF_FILE_MAX_BYTES = 4294967295;
const HEADER = {
    AUDIO_FORMAT: { offset: 20, value: 1 },
    BITS_PER_SAMPLE: { offset: 34, value: BYTES_PER_SAMPLE * 8 },
    BLOCK_ALIGN: { offset: 32 },
    BYTE_RATE: { offset: 28 },
    CHANNEL_COUNT: { offset: 22 },
    CHUNK_ID: { offset: 0, value: 0x52494646 },
    CHUNK_SIZE: { offset: 4 },
    FILE_FORMAT: { offset: 8, value: 0x57415645 },
    SAMPLE_RATE: { offset: 24 },
    SUBCHUNK1_ID: { offset: 12, value: 0x666d7420 },
    SUBCHUNK1_SIZE: { offset: 16, value: 16 },
    SUBCHUNK2_ID: { offset: 36, value: 0x64617461 },
    SUBCHUNK2_SIZE: { offset: 40 }, // actual audio data size
};
/**
 * The `TranscoderService` is used to transcibe audio recording to a format that's supported by all major browsers. The SDK uses this to create voice messages.
 *
 * If you want to use your own transcoder you can provide a `customTranscoder`.
 */
export class TranscoderService {
    constructor() {
        this.config = {
            sampleRate: 16000,
        };
        this.splitDataByChannel = (audioBuffer) => Array.from({ length: audioBuffer.numberOfChannels }, (_, i) => audioBuffer.getChannelData(i));
    }
    /**
     * The default transcoder will leave audio/mp4 files as is, and transcode webm files to wav. If you want to customize this, you can provide your own transcoder using the `customTranscoder` field
     * @param blob
     * @returns the transcoded file
     */
    async transcode(blob) {
        if (this.customTranscoder) {
            return this.customTranscoder(blob);
        }
        if (blob.type.includes('audio/mp4')) {
            return blob;
        }
        const audioBuffer = await this.renderAudio(await this.toAudioBuffer(blob), this.config.sampleRate);
        const numberOfSamples = audioBuffer.duration * this.config.sampleRate;
        const fileSizeBytes = numberOfSamples * audioBuffer.numberOfChannels * BYTES_PER_SAMPLE +
            WAV_HEADER_LENGTH_BYTES;
        const arrayBuffer = new ArrayBuffer(fileSizeBytes);
        this.writeWavHeader({
            arrayBuffer,
            channelCount: audioBuffer.numberOfChannels,
            sampleRate: this.config.sampleRate,
        });
        this.writeWavAudioData({
            arrayBuffer,
            dataByChannel: this.splitDataByChannel(audioBuffer),
        });
        return new Blob([arrayBuffer], { type: 'audio/wav' });
    }
    async renderAudio(audioBuffer, sampleRate) {
        const offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);
        const source = offlineAudioCtx.createBufferSource();
        source.buffer = audioBuffer;
        source.connect(offlineAudioCtx.destination);
        source.start();
        return await offlineAudioCtx.startRendering();
    }
    async toAudioBuffer(blob) {
        const audioCtx = new AudioContext();
        const arrayBuffer = await readBlobAsArrayBuffer(blob);
        const decodedData = await audioCtx.decodeAudioData(arrayBuffer);
        if (audioCtx.state !== 'closed')
            await audioCtx.close();
        return decodedData;
    }
    writeWavAudioData({ arrayBuffer, dataByChannel, }) {
        const dataView = new DataView(arrayBuffer);
        const channelCount = dataByChannel.length;
        dataByChannel.forEach((channelData, channelIndex) => {
            let writeOffset = WAV_HEADER_LENGTH_BYTES + channelCount * channelIndex;
            channelData.forEach((float32Value) => {
                dataView.setInt16(writeOffset, float32Value < 0
                    ? Math.max(-1, float32Value) * 32768
                    : Math.min(1, float32Value) * 32767, true);
                writeOffset += channelCount * BYTES_PER_SAMPLE;
            });
        });
    }
    writeWavHeader({ arrayBuffer, channelCount, sampleRate, }) {
        const byteRate = sampleRate * channelCount * BYTES_PER_SAMPLE; // bytes/sec
        const blockAlign = channelCount * BYTES_PER_SAMPLE;
        const dataView = new DataView(arrayBuffer);
        /*
         * The maximum size of a RIFF file is 4294967295 bytes and since the header takes up 44 bytes there are 4294967251 bytes left for the
         * data chunk.
         */
        const dataChunkSize = Math.min(dataView.byteLength - WAV_HEADER_LENGTH_BYTES, RIFF_FILE_MAX_BYTES - WAV_HEADER_LENGTH_BYTES);
        dataView.setUint32(HEADER.CHUNK_ID.offset, HEADER.CHUNK_ID.value); // "RIFF"
        dataView.setUint32(HEADER.CHUNK_SIZE.offset, arrayBuffer.byteLength - 8, true); // adjustment for the first two headers - chunk id + file size
        dataView.setUint32(HEADER.FILE_FORMAT.offset, HEADER.FILE_FORMAT.value); // "WAVE"
        dataView.setUint32(HEADER.SUBCHUNK1_ID.offset, HEADER.SUBCHUNK1_ID.value); // "fmt "
        dataView.setUint32(HEADER.SUBCHUNK1_SIZE.offset, HEADER.SUBCHUNK1_SIZE.value, true);
        dataView.setUint16(HEADER.AUDIO_FORMAT.offset, HEADER.AUDIO_FORMAT.value, true);
        dataView.setUint16(HEADER.CHANNEL_COUNT.offset, channelCount, true);
        dataView.setUint32(HEADER.SAMPLE_RATE.offset, sampleRate, true);
        dataView.setUint32(HEADER.BYTE_RATE.offset, byteRate, true);
        dataView.setUint16(HEADER.BLOCK_ALIGN.offset, blockAlign, true);
        dataView.setUint16(HEADER.BITS_PER_SAMPLE.offset, HEADER.BITS_PER_SAMPLE.value, true);
        dataView.setUint32(HEADER.SUBCHUNK2_ID.offset, HEADER.SUBCHUNK2_ID.value); // "data"
        dataView.setUint32(HEADER.SUBCHUNK2_SIZE.offset, dataChunkSize, true);
    }
}
TranscoderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: TranscoderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TranscoderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: TranscoderService, providedIn: NgModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: TranscoderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: NgModule }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNjb2Rlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RyZWFtLWNoYXQtYW5ndWxhci9zcmMvbGliL3ZvaWNlLXJlY29yZGVyL3RyYW5zY29kZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBVXRELE1BQU0sdUJBQXVCLEdBQUcsRUFBVyxDQUFDO0FBQzVDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBVSxDQUFDO0FBQ3BDLE1BQU0sbUJBQW1CLEdBQUcsVUFBbUIsQ0FBQztBQUVoRCxNQUFNLE1BQU0sR0FBRztJQUNiLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRTtJQUN0QyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsR0FBRyxDQUFDLEVBQUU7SUFDNUQsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtJQUMzQixTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO0lBQ3pCLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7SUFDN0IsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO0lBQzFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUU7SUFDekIsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO0lBQzdDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUU7SUFDM0IsWUFBWSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFB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QUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BFLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hFLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVELFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hFLFFBQVEsQ0FBQyxTQUFTLENBQ2hCLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUM3QixNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFDNUIsSUFBSSxDQUNMLENBQUM7UUFFRixRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQ3BGLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hFLENBQUM7OzhHQXhJVSxpQkFBaUI7a0hBQWpCLGlCQUFpQixjQURKLFFBQVE7MkZBQ3JCLGlCQUFpQjtrQkFEN0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgcmVhZEJsb2JBc0FycmF5QnVmZmVyIH0gZnJvbSAnLi4vZmlsZS11dGlscyc7XG5cbmV4cG9ydCB0eXBlIFRyYW5zY29kZXJDb25maWcgPSB7XG4gIHNhbXBsZVJhdGU6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIFRyYW5zY29kZVBhcmFtcyA9IFRyYW5zY29kZXJDb25maWcgJiB7XG4gIGJsb2I6IEJsb2I7XG59O1xuXG5jb25zdCBXQVZfSEVBREVSX0xFTkdUSF9CWVRFUyA9IDQ0IGFzIGNvbnN0O1xuY29uc3QgQllURVNfUEVSX1NBTVBMRSA9IDIgYXMgY29uc3Q7XG5jb25zdCBSSUZGX0ZJTEVfTUFYX0JZVEVTID0gNDI5NDk2NzI5NSBhcyBjb25zdDtcblxuY29uc3QgSEVBREVSID0ge1xuICBBVURJT19GT1JNQVQ6IHsgb2Zmc2V0OiAyMCwgdmFsdWU6IDEgfSwgLy8gUENNID0gMVxuICBCSVRTX1BFUl9TQU1QTEU6IHsgb2Zmc2V0OiAzNCwgdmFsdWU6IEJZVEVTX1BFUl9TQU1QTEUgKiA4IH0sIC8vIDE2IGJpdHMgZW5jb2RpbmdcbiAgQkxPQ0tfQUxJR046IHsgb2Zmc2V0OiAzMiB9LFxuICBCWVRFX1JBVEU6IHsgb2Zmc2V0OiAyOCB9LFxuICBDSEFOTkVMX0NPVU5UOiB7IG9mZnNldDogMjIgfSwgLy8gMSAtIG1vbm8sIDIgLSBzdGVyZW9cbiAgQ0hVTktfSUQ6IHsgb2Zmc2V0OiAwLCB2YWx1ZTogMHg1MjQ5NDY0NiB9LCAvLyBoZXggcmVwcmVzZW50YXRpb24gb2Ygc3RyaW5nIFwiUklGRlwiIChSZXNvdXJjZSBJbnRlcmNoYW5nZSBGaWxlIEZvcm1hdCkgLSBpZGVudGlmaWVzIHRoZSBmaWxlIHN0cnVjdHVyZSB0aGF0IGRlZmluZXMgYSBjbGFzcyBvZiBtb3JlIHNwZWNpZmljIGZpbGUgZm9ybWF0cywgZS5nLiBXQVZFXG4gIENIVU5LX1NJWkU6IHsgb2Zmc2V0OiA0IH0sXG4gIEZJTEVfRk9STUFUOiB7IG9mZnNldDogOCwgdmFsdWU6IDB4NTc0MTU2NDUgfSwgLy8gaGV4IHJlcHJlc2VudGF0aW9uIG9mIHN0cmluZyBcIldBVkVcIlxuICBTQU1QTEVfUkFURTogeyBvZmZzZXQ6IDI0IH0sXG4gIFNVQkNIVU5LMV9JRDogeyBvZmZzZXQ6IDEyLCB2YWx1ZTogMHg2NjZkNzQyMCB9LCAvLyBoZXggcmVwcmVzZW50YXRpb24gb2Ygc3RyaW5nIFwiZm10IFwiIC0gaWRlbnRpZmllcyB0aGUgc3RhcnQgb2YgXCJmb3JtYXRcIiBzZWN0aW9uIG9mIHRoZSBoZWFkZXJcbiAgU1VCQ0hVTksxX1NJWkU6IHsgb2Zmc2V0OiAxNiwgdmFsdWU6IDE2IH0sIC8vIFN1YmNodW5rMSBTaXplIHdpdGhvdXQgU1VCQ0hVTksxX0lEIGFuZCBTVUJDSFVOSzFfU0laRSBmaWVsZHNcbiAgU1VCQ0hVTksyX0lEOiB7IG9mZnNldDogMzYsIHZhbHVlOiAweDY0NjE3NDYxIH0sIC8vIGhleCByZXByZXNlbnRhdGlvbiBvZiBzdHJpbmcgXCJkYXRhXCIgLSBpZGVudGlmaWVzIHRoZSBzdGFydCBvZiBhY3R1YWwgYXVkaW8gZGF0YSBzZWN0aW9uXG4gIFNVQkNIVU5LMl9TSVpFOiB7IG9mZnNldDogNDAgfSwgLy8gYWN0dWFsIGF1ZGlvIGRhdGEgc2l6ZVxufSBhcyBjb25zdDtcblxudHlwZSBXcml0ZVdhdmVIZWFkZXJQYXJhbXMgPSB7XG4gIGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlcjtcbiAgLy8gMSAtIG1vbm8sIDIgLSBzdGVyZW9cbiAgY2hhbm5lbENvdW50OiBudW1iZXI7XG4gIC8vIE51bWJlciBvZiBzYW1wbGVzIHBlciBzZWNvbmQsIGUuZy4gNDQxMDBIelxuICBzYW1wbGVSYXRlOiBudW1iZXI7XG59O1xuXG50eXBlIFdyaXRlQXVkaW9EYXRhUGFyYW1zID0ge1xuICBhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXI7XG4gIGRhdGFCeUNoYW5uZWw6IEZsb2F0MzJBcnJheVtdO1xufTtcblxuLyoqXG4gKiBUaGUgYFRyYW5zY29kZXJTZXJ2aWNlYCBpcyB1c2VkIHRvIHRyYW5zY2liZSBhdWRpbyByZWNvcmRpbmcgdG8gYSBmb3JtYXQgdGhhdCdzIHN1cHBvcnRlZCBieSBhbGwgbWFqb3IgYnJvd3NlcnMuIFRoZSBTREsgdXNlcyB0aGlzIHRvIGNyZWF0ZSB2b2ljZSBtZXNzYWdlcy5cbiAqXG4gKiBJZiB5b3Ugd2FudCB0byB1c2UgeW91ciBvd24gdHJhbnNjb2RlciB5b3UgY2FuIHByb3ZpZGUgYSBgY3VzdG9tVHJhbnNjb2RlcmAuXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogTmdNb2R1bGUgfSlcbmV4cG9ydCBjbGFzcyBUcmFuc2NvZGVyU2VydmljZSB7XG4gIGNvbmZpZzogVHJhbnNjb2RlckNvbmZpZyA9IHtcbiAgICBzYW1wbGVSYXRlOiAxNjAwMCxcbiAgfTtcbiAgY3VzdG9tVHJhbnNjb2Rlcj86IChibG9iOiBCbG9iKSA9PiBCbG9iIHwgUHJvbWlzZTxCbG9iPjtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB0cmFuc2NvZGVyIHdpbGwgbGVhdmUgYXVkaW8vbXA0IGZpbGVzIGFzIGlzLCBhbmQgdHJhbnNjb2RlIHdlYm0gZmlsZXMgdG8gd2F2LiBJZiB5b3Ugd2FudCB0byBjdXN0b21pemUgdGhpcywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duIHRyYW5zY29kZXIgdXNpbmcgdGhlIGBjdXN0b21UcmFuc2NvZGVyYCBmaWVsZFxuICAgKiBAcGFyYW0gYmxvYlxuICAgKiBAcmV0dXJucyB0aGUgdHJhbnNjb2RlZCBmaWxlXG4gICAqL1xuICBhc3luYyB0cmFuc2NvZGUoYmxvYjogQmxvYikge1xuICAgIGlmICh0aGlzLmN1c3RvbVRyYW5zY29kZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1c3RvbVRyYW5zY29kZXIoYmxvYik7XG4gICAgfVxuICAgIGlmIChibG9iLnR5cGUuaW5jbHVkZXMoJ2F1ZGlvL21wNCcpKSB7XG4gICAgICByZXR1cm4gYmxvYjtcbiAgICB9XG4gICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLnJlbmRlckF1ZGlvKFxuICAgICAgYXdhaXQgdGhpcy50b0F1ZGlvQnVmZmVyKGJsb2IpLFxuICAgICAgdGhpcy5jb25maWcuc2FtcGxlUmF0ZVxuICAgICk7XG4gICAgY29uc3QgbnVtYmVyT2ZTYW1wbGVzID0gYXVkaW9CdWZmZXIuZHVyYXRpb24gKiB0aGlzLmNvbmZpZy5zYW1wbGVSYXRlO1xuICAgIGNvbnN0IGZpbGVTaXplQnl0ZXMgPVxuICAgICAgbnVtYmVyT2ZTYW1wbGVzICogYXVkaW9CdWZmZXIubnVtYmVyT2ZDaGFubmVscyAqIEJZVEVTX1BFUl9TQU1QTEUgK1xuICAgICAgV0FWX0hFQURFUl9MRU5HVEhfQllURVM7XG5cbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihmaWxlU2l6ZUJ5dGVzKTtcbiAgICB0aGlzLndyaXRlV2F2SGVhZGVyKHtcbiAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgY2hhbm5lbENvdW50OiBhdWRpb0J1ZmZlci5udW1iZXJPZkNoYW5uZWxzLFxuICAgICAgc2FtcGxlUmF0ZTogdGhpcy5jb25maWcuc2FtcGxlUmF0ZSxcbiAgICB9KTtcbiAgICB0aGlzLndyaXRlV2F2QXVkaW9EYXRhKHtcbiAgICAgIGFycmF5QnVmZmVyLFxuICAgICAgZGF0YUJ5Q2hhbm5lbDogdGhpcy5zcGxpdERhdGFCeUNoYW5uZWwoYXVkaW9CdWZmZXIpLFxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgQmxvYihbYXJyYXlCdWZmZXJdLCB7IHR5cGU6ICdhdWRpby93YXYnIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIHJlbmRlckF1ZGlvKGF1ZGlvQnVmZmVyOiBBdWRpb0J1ZmZlciwgc2FtcGxlUmF0ZTogbnVtYmVyKSB7XG4gICAgY29uc3Qgb2ZmbGluZUF1ZGlvQ3R4ID0gbmV3IE9mZmxpbmVBdWRpb0NvbnRleHQoXG4gICAgICBhdWRpb0J1ZmZlci5udW1iZXJPZkNoYW5uZWxzLFxuICAgICAgYXVkaW9CdWZmZXIuZHVyYXRpb24gKiBzYW1wbGVSYXRlLFxuICAgICAgc2FtcGxlUmF0ZVxuICAgICk7XG4gICAgY29uc3Qgc291cmNlID0gb2ZmbGluZUF1ZGlvQ3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgIHNvdXJjZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcbiAgICBzb3VyY2UuY29ubmVjdChvZmZsaW5lQXVkaW9DdHguZGVzdGluYXRpb24pO1xuICAgIHNvdXJjZS5zdGFydCgpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG9mZmxpbmVBdWRpb0N0eC5zdGFydFJlbmRlcmluZygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIHRvQXVkaW9CdWZmZXIoYmxvYjogQmxvYikge1xuICAgIGNvbnN0IGF1ZGlvQ3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuXG4gICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYik7XG4gICAgY29uc3QgZGVjb2RlZERhdGEgPSBhd2FpdCBhdWRpb0N0eC5kZWNvZGVBdWRpb0RhdGEoYXJyYXlCdWZmZXIpO1xuICAgIGlmIChhdWRpb0N0eC5zdGF0ZSAhPT0gJ2Nsb3NlZCcpIGF3YWl0IGF1ZGlvQ3R4LmNsb3NlKCk7XG4gICAgcmV0dXJuIGRlY29kZWREYXRhO1xuICB9XG5cbiAgcHJvdGVjdGVkIHdyaXRlV2F2QXVkaW9EYXRhKHtcbiAgICBhcnJheUJ1ZmZlcixcbiAgICBkYXRhQnlDaGFubmVsLFxuICB9OiBXcml0ZUF1ZGlvRGF0YVBhcmFtcykge1xuICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGFycmF5QnVmZmVyKTtcbiAgICBjb25zdCBjaGFubmVsQ291bnQgPSBkYXRhQnlDaGFubmVsLmxlbmd0aDtcblxuICAgIGRhdGFCeUNoYW5uZWwuZm9yRWFjaCgoY2hhbm5lbERhdGEsIGNoYW5uZWxJbmRleCkgPT4ge1xuICAgICAgbGV0IHdyaXRlT2Zmc2V0ID0gV0FWX0hFQURFUl9MRU5HVEhfQllURVMgKyBjaGFubmVsQ291bnQgKiBjaGFubmVsSW5kZXg7XG5cbiAgICAgIGNoYW5uZWxEYXRhLmZvckVhY2goKGZsb2F0MzJWYWx1ZSkgPT4ge1xuICAgICAgICBkYXRhVmlldy5zZXRJbnQxNihcbiAgICAgICAgICB3cml0ZU9mZnNldCxcbiAgICAgICAgICBmbG9hdDMyVmFsdWUgPCAwXG4gICAgICAgICAgICA/IE1hdGgubWF4KC0xLCBmbG9hdDMyVmFsdWUpICogMzI3NjhcbiAgICAgICAgICAgIDogTWF0aC5taW4oMSwgZmxvYXQzMlZhbHVlKSAqIDMyNzY3LFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgICAgd3JpdGVPZmZzZXQgKz0gY2hhbm5lbENvdW50ICogQllURVNfUEVSX1NBTVBMRTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIHdyaXRlV2F2SGVhZGVyKHtcbiAgICBhcnJheUJ1ZmZlcixcbiAgICBjaGFubmVsQ291bnQsXG4gICAgc2FtcGxlUmF0ZSxcbiAgfTogV3JpdGVXYXZlSGVhZGVyUGFyYW1zKSB7XG4gICAgY29uc3QgYnl0ZVJhdGUgPSBzYW1wbGVSYXRlICogY2hhbm5lbENvdW50ICogQllURVNfUEVSX1NBTVBMRTsgLy8gYnl0ZXMvc2VjXG4gICAgY29uc3QgYmxvY2tBbGlnbiA9IGNoYW5uZWxDb3VudCAqIEJZVEVTX1BFUl9TQU1QTEU7XG5cbiAgICBjb25zdCBkYXRhVmlldyA9IG5ldyBEYXRhVmlldyhhcnJheUJ1ZmZlcik7XG4gICAgLypcbiAgICAgKiBUaGUgbWF4aW11bSBzaXplIG9mIGEgUklGRiBmaWxlIGlzIDQyOTQ5NjcyOTUgYnl0ZXMgYW5kIHNpbmNlIHRoZSBoZWFkZXIgdGFrZXMgdXAgNDQgYnl0ZXMgdGhlcmUgYXJlIDQyOTQ5NjcyNTEgYnl0ZXMgbGVmdCBmb3IgdGhlXG4gICAgICogZGF0YSBjaHVuay5cbiAgICAgKi9cbiAgICBjb25zdCBkYXRhQ2h1bmtTaXplID0gTWF0aC5taW4oXG4gICAgICBkYXRhVmlldy5ieXRlTGVuZ3RoIC0gV0FWX0hFQURFUl9MRU5HVEhfQllURVMsXG4gICAgICBSSUZGX0ZJTEVfTUFYX0JZVEVTIC0gV0FWX0hFQURFUl9MRU5HVEhfQllURVNcbiAgICApO1xuXG4gICAgZGF0YVZpZXcuc2V0VWludDMyKEhFQURFUi5DSFVOS19JRC5vZmZzZXQsIEhFQURFUi5DSFVOS19JRC52YWx1ZSk7IC8vIFwiUklGRlwiXG4gICAgZGF0YVZpZXcuc2V0VWludDMyKFxuICAgICAgSEVBREVSLkNIVU5LX1NJWkUub2Zmc2V0LFxuICAgICAgYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCAtIDgsXG4gICAgICB0cnVlXG4gICAgKTsgLy8gYWRqdXN0bWVudCBmb3IgdGhlIGZpcnN0IHR3byBoZWFkZXJzIC0gY2h1bmsgaWQgKyBmaWxlIHNpemVcbiAgICBkYXRhVmlldy5zZXRVaW50MzIoSEVBREVSLkZJTEVfRk9STUFULm9mZnNldCwgSEVBREVSLkZJTEVfRk9STUFULnZhbHVlKTsgLy8gXCJXQVZFXCJcblxuICAgIGRhdGFWaWV3LnNldFVpbnQzMihIRUFERVIuU1VCQ0hVTksxX0lELm9mZnNldCwgSEVBREVSLlNVQkNIVU5LMV9JRC52YWx1ZSk7IC8vIFwiZm10IFwiXG4gICAgZGF0YVZpZXcuc2V0VWludDMyKFxuICAgICAgSEVBREVSLlNVQkNIVU5LMV9TSVpFLm9mZnNldCxcbiAgICAgIEhFQURFUi5TVUJDSFVOSzFfU0laRS52YWx1ZSxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIGRhdGFWaWV3LnNldFVpbnQxNihcbiAgICAgIEhFQURFUi5BVURJT19GT1JNQVQub2Zmc2V0LFxuICAgICAgSEVBREVSLkFVRElPX0ZPUk1BVC52YWx1ZSxcbiAgICAgIHRydWVcbiAgICApO1xuICAgIGRhdGFWaWV3LnNldFVpbnQxNihIRUFERVIuQ0hBTk5FTF9DT1VOVC5vZmZzZXQsIGNoYW5uZWxDb3VudCwgdHJ1ZSk7XG4gICAgZGF0YVZpZXcuc2V0VWludDMyKEhFQURFUi5TQU1QTEVfUkFURS5vZmZzZXQsIHNhbXBsZVJhdGUsIHRydWUpO1xuICAgIGRhdGFWaWV3LnNldFVpbnQzMihIRUFERVIuQllURV9SQVRFLm9mZnNldCwgYnl0ZVJhdGUsIHRydWUpO1xuICAgIGRhdGFWaWV3LnNldFVpbnQxNihIRUFERVIuQkxPQ0tfQUxJR04ub2Zmc2V0LCBibG9ja0FsaWduLCB0cnVlKTtcbiAgICBkYXRhVmlldy5zZXRVaW50MTYoXG4gICAgICBIRUFERVIuQklUU19QRVJfU0FNUExFLm9mZnNldCxcbiAgICAgIEhFQURFUi5CSVRTX1BFUl9TQU1QTEUudmFsdWUsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGRhdGFWaWV3LnNldFVpbnQzMihIRUFERVIuU1VCQ0hVTksyX0lELm9mZnNldCwgSEVBREVSLlNVQkNIVU5LMl9JRC52YWx1ZSk7IC8vIFwiZGF0YVwiXG4gICAgZGF0YVZpZXcuc2V0VWludDMyKEhFQURFUi5TVUJDSFVOSzJfU0laRS5vZmZzZXQsIGRhdGFDaHVua1NpemUsIHRydWUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNwbGl0RGF0YUJ5Q2hhbm5lbCA9IChhdWRpb0J1ZmZlcjogQXVkaW9CdWZmZXIpID0+XG4gICAgQXJyYXkuZnJvbSh7IGxlbmd0aDogYXVkaW9CdWZmZXIubnVtYmVyT2ZDaGFubmVscyB9LCAoXywgaSkgPT5cbiAgICAgIGF1ZGlvQnVmZmVyLmdldENoYW5uZWxEYXRhKGkpXG4gICAgKTtcbn1cbiJdfQ==