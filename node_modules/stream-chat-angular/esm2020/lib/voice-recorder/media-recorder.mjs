import { BehaviorSubject } from 'rxjs';
import { createFileFromBlobs, createUriFromBlob, getExtensionFromMimeType, } from '../file-utils';
import fixWebmDuration from 'fix-webm-duration';
export var MediaRecordingState;
(function (MediaRecordingState) {
    MediaRecordingState["PAUSED"] = "paused";
    MediaRecordingState["RECORDING"] = "recording";
    MediaRecordingState["STOPPED"] = "stopped";
    MediaRecordingState["ERROR"] = "error";
})(MediaRecordingState || (MediaRecordingState = {}));
export class MultimediaRecorder {
    constructor(notificationService, chatService, transcoder) {
        this.notificationService = notificationService;
        this.chatService = chatService;
        this.transcoder = transcoder;
        this.recordingSubject = new BehaviorSubject(undefined);
        this.recordedChunkDurations = [];
        this.recordingStateSubject = new BehaviorSubject(MediaRecordingState.STOPPED);
        this.generateRecordingTitle = (mimeType) => {
            if (this.customGenerateRecordingTitle) {
                return this.customGenerateRecordingTitle({ mimeType });
            }
            else {
                return `${this.mediaType}_recording_${new Date().toISOString()}.${getExtensionFromMimeType(mimeType)}`; // extension needed so that desktop Safari can play the asset
            }
        };
        this.handleErrorEvent = (e) => {
            /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */
            this.logError(e.error);
            this.recordingStateSubject.next(MediaRecordingState.ERROR);
            this.notificationService.addTemporaryNotification('streamChat.An error has occurred during recording');
            void this.stop({ cancel: true });
        };
        this.handleDataavailableEvent = (e) => {
            if (!e.data.size)
                return;
            void this.makeRecording(e.data);
        };
        this.recording$ = this.recordingSubject.asObservable();
        this.recordingState$ = this.recordingStateSubject.asObservable();
    }
    get durationMs() {
        return (this.recordedChunkDurations.reduce((acc, val) => acc + val, 0) +
            (this.startTime ? Date.now() - this.startTime : 0));
    }
    get mediaType() {
        return this.config.mimeType.split('/')?.[0] || 'unknown';
    }
    get isRecording() {
        return (this.recordingStateSubject.value === MediaRecordingState.RECORDING ||
            this.recordingStateSubject.value === MediaRecordingState.PAUSED);
    }
    async makeRecording(blob) {
        const { mimeType } = this.config;
        try {
            if (mimeType.includes('webm')) {
                // The browser does not include duration metadata with the recorded blob
                blob = await fixWebmDuration(blob, this.durationMs, {
                    logger: () => null, // prevents polluting the browser console
                });
            }
            blob = await this.transcoder.transcode(blob);
            if (!blob)
                return;
            const file = createFileFromBlobs({
                blobsArray: [blob],
                fileName: this.generateRecordingTitle(blob.type),
                mimeType: blob.type,
            });
            const previewUrl = await createUriFromBlob(file);
            const extraData = this.enrichWithExtraData();
            this.recordingSubject.next({
                recording: file,
                duration: this.durationMs / 1000,
                asset_url: previewUrl,
                mime_type: mimeType,
                ...extraData,
            });
            return file;
        }
        catch (error) {
            this.logError(error);
            this.recordingStateSubject.next(MediaRecordingState.ERROR);
            return undefined;
        }
    }
    get recordingState() {
        return this.recordingStateSubject.value;
    }
    async start() {
        if ([MediaRecordingState.RECORDING, MediaRecordingState.PAUSED].includes(this.recordingStateSubject.value)) {
            return;
        }
        this.recordingSubject.next(undefined);
        // account for requirement on iOS as per this bug report: https://bugs.webkit.org/show_bug.cgi?id=252303
        if (!navigator.mediaDevices) {
            console.warn(`[Stream Chat] Media devices API missing, it's possible your app is not served from a secure context (https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts)`);
            const error = new Error('Media recording is not supported');
            this.logError(error);
            this.recordingStateSubject.next(MediaRecordingState.ERROR);
            this.notificationService.addTemporaryNotification(`streamChat.Media recording not supported`);
            return;
        }
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            this.mediaRecorder = new MediaRecorder(stream, this.config);
            this.mediaRecorder.addEventListener('dataavailable', this.handleDataavailableEvent);
            this.mediaRecorder.addEventListener('error', this.handleErrorEvent);
            this.startTime = new Date().getTime();
            this.mediaRecorder.start();
            this.recordingStateSubject.next(MediaRecordingState.RECORDING);
        }
        catch (error) {
            this.logError(error);
            void this.stop({ cancel: true });
            this.recordingStateSubject.next(MediaRecordingState.ERROR);
            const isNotAllowed = error.name?.includes('NotAllowedError');
            this.notificationService.addTemporaryNotification(isNotAllowed
                ? `streamChat.Please grant permission to use microhpone`
                : `streamChat.Error starting recording`);
        }
    }
    pause() {
        if (this.recordingStateSubject.value !== MediaRecordingState.RECORDING)
            return;
        if (this.startTime) {
            this.recordedChunkDurations.push(new Date().getTime() - this.startTime);
            this.startTime = undefined;
        }
        this.mediaRecorder?.pause();
        this.recordingStateSubject.next(MediaRecordingState.PAUSED);
    }
    resume() {
        if (this.recordingStateSubject.value !== MediaRecordingState.PAUSED)
            return;
        this.startTime = new Date().getTime();
        this.mediaRecorder?.resume();
        this.recordingStateSubject.next(MediaRecordingState.RECORDING);
    }
    async stop(options = { cancel: false }) {
        if (this.startTime) {
            this.recordedChunkDurations.push(new Date().getTime() - this.startTime);
            this.startTime = undefined;
        }
        let recording;
        this.mediaRecorder?.stop();
        try {
            if (!options.cancel &&
                this.recordingStateSubject.value !== MediaRecordingState.ERROR) {
                recording = await new Promise((resolve, reject) => {
                    this.recording$.subscribe((r) => {
                        if (r) {
                            resolve(r);
                        }
                    });
                    this.recordingState$.subscribe((s) => {
                        if (s === MediaRecordingState.ERROR) {
                            reject(new Error(`Recording couldn't be created`));
                        }
                    });
                });
            }
        }
        catch {
            this.notificationService.addTemporaryNotification('streamChat.An error has occurred during recording');
        }
        finally {
            this.recordedChunkDurations = [];
            this.startTime = undefined;
            this.mediaRecorder?.removeEventListener('dataavailable', this.handleDataavailableEvent);
            this.mediaRecorder?.removeEventListener('error', this.handleErrorEvent);
            if (this.mediaRecorder?.stream?.active) {
                this.mediaRecorder?.stream?.getTracks().forEach((track) => {
                    track.stop();
                    this.mediaRecorder?.stream?.removeTrack(track);
                });
                this.mediaRecorder = undefined;
            }
            this.recordingStateSubject.next(MediaRecordingState.STOPPED);
        }
        return recording;
    }
    logError(error) {
        this.chatService.chatClient?.logger('error', error.message, {
            error: error,
            tag: ['MediaRecorder'],
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEtcmVjb3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdHJlYW0tY2hhdC1hbmd1bGFyL3NyYy9saWIvdm9pY2UtcmVjb3JkZXIvbWVkaWEtcmVjb3JkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLGlCQUFpQixFQUNqQix3QkFBd0IsR0FDekIsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxlQUFlLE1BQU0sbUJBQW1CLENBQUM7QUFPaEQsTUFBTSxDQUFOLElBQVksbUJBS1g7QUFMRCxXQUFZLG1CQUFtQjtJQUM3Qix3Q0FBaUIsQ0FBQTtJQUNqQiw4Q0FBdUIsQ0FBQTtJQUN2QiwwQ0FBbUIsQ0FBQTtJQUNuQixzQ0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFMVyxtQkFBbUIsS0FBbkIsbUJBQW1CLFFBSzlCO0FBTUQsTUFBTSxPQUFnQixrQkFBa0I7SUFtQnRDLFlBQ1ksbUJBQXdDLEVBQ3hDLFdBQThCLEVBQ2hDLFVBQTZCO1FBRjNCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsZ0JBQVcsR0FBWCxXQUFXLENBQW1CO1FBQ2hDLGVBQVUsR0FBVixVQUFVLENBQW1CO1FBZDdCLHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUU5QyxTQUFTLENBQUMsQ0FBQztRQUlILDJCQUFzQixHQUFhLEVBQUUsQ0FBQztRQUN4QywwQkFBcUIsR0FBRyxJQUFJLGVBQWUsQ0FDakQsbUJBQW1CLENBQUMsT0FBTyxDQUM1QixDQUFDO1FBNkJGLDJCQUFzQixHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1lBQzVDLElBQUksSUFBSSxDQUFDLDRCQUE0QixFQUFFO2dCQUNyQyxPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7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LEVBQ2YsSUFBSSxDQUFDLHdCQUF3QixDQUM5QixDQUFDO1lBQ0YsSUFBSSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDeEUsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7Z0JBQ3RDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUN4RCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2IsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNqRCxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQzthQUNoQztZQUVELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUQ7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBSVMsUUFBUSxDQUFDLEtBQVk7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQzFELEtBQUssRUFBRSxLQUFLO1lBQ1osR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDO1NBQ3ZCLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgY3JlYXRlRmlsZUZyb21CbG9icyxcbiAgY3JlYXRlVXJpRnJvbUJsb2IsXG4gIGdldEV4dGVuc2lvbkZyb21NaW1lVHlwZSxcbn0gZnJvbSAnLi4vZmlsZS11dGlscyc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2hhdENsaWVudFNlcnZpY2UgfSBmcm9tICcuLi9jaGF0LWNsaWVudC5zZXJ2aWNlJztcbmltcG9ydCBmaXhXZWJtRHVyYXRpb24gZnJvbSAnZml4LXdlYm0tZHVyYXRpb24nO1xuaW1wb3J0IHsgVHJhbnNjb2RlclNlcnZpY2UgfSBmcm9tICcuL3RyYW5zY29kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBNZWRpYVJlY29yZGluZyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgTWVkaWFSZWNvcmRlckNvbmZpZyA9IE9taXQ8TWVkaWFSZWNvcmRlck9wdGlvbnMsICdtaW1lVHlwZSc+ICZcbiAgUmVxdWlyZWQ8UGljazxNZWRpYVJlY29yZGVyT3B0aW9ucywgJ21pbWVUeXBlJz4+O1xuXG5leHBvcnQgZW51bSBNZWRpYVJlY29yZGluZ1N0YXRlIHtcbiAgUEFVU0VEID0gJ3BhdXNlZCcsXG4gIFJFQ09SRElORyA9ICdyZWNvcmRpbmcnLFxuICBTVE9QUEVEID0gJ3N0b3BwZWQnLFxuICBFUlJPUiA9ICdlcnJvcicsXG59XG5cbmV4cG9ydCB0eXBlIE1lZGlhUmVjb3JkaW5nVGl0bGVPcHRpb25zID0ge1xuICBtaW1lVHlwZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE11bHRpbWVkaWFSZWNvcmRlcjxUID0gbnVsbD4ge1xuICBhYnN0cmFjdCBjb25maWc6IE1lZGlhUmVjb3JkZXJDb25maWc7XG4gIGN1c3RvbUdlbmVyYXRlUmVjb3JkaW5nVGl0bGU6XG4gICAgfCAoKG9wdGlvbnM6IE1lZGlhUmVjb3JkaW5nVGl0bGVPcHRpb25zKSA9PiBzdHJpbmcpXG4gICAgfCB1bmRlZmluZWQ7XG4gIHJlY29yZGluZ1N0YXRlJDogT2JzZXJ2YWJsZTxNZWRpYVJlY29yZGluZ1N0YXRlPjtcbiAgcmVjb3JkaW5nJDogT2JzZXJ2YWJsZTwoTWVkaWFSZWNvcmRpbmcgJiBUKSB8IHVuZGVmaW5lZD47XG5cbiAgcHJvdGVjdGVkIHJlY29yZGluZ1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFxuICAgIChNZWRpYVJlY29yZGluZyAmIFQpIHwgdW5kZWZpbmVkXG4gID4odW5kZWZpbmVkKTtcblxuICBwcm90ZWN0ZWQgbWVkaWFSZWNvcmRlcjogTWVkaWFSZWNvcmRlciB8IHVuZGVmaW5lZDtcbiAgcHJvdGVjdGVkIHN0YXJ0VGltZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBwcm90ZWN0ZWQgcmVjb3JkZWRDaHVua0R1cmF0aW9uczogbnVtYmVyW10gPSBbXTtcbiAgcHJpdmF0ZSByZWNvcmRpbmdTdGF0ZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE1lZGlhUmVjb3JkaW5nU3RhdGU+KFxuICAgIE1lZGlhUmVjb3JkaW5nU3RhdGUuU1RPUFBFRFxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBub3RpZmljYXRpb25TZXJ2aWNlOiBOb3RpZmljYXRpb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjaGF0U2VydmljZTogQ2hhdENsaWVudFNlcnZpY2UsXG4gICAgcHJpdmF0ZSB0cmFuc2NvZGVyOiBUcmFuc2NvZGVyU2VydmljZVxuICApIHtcbiAgICB0aGlzLnJlY29yZGluZyQgPSB0aGlzLnJlY29yZGluZ1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgdGhpcy5yZWNvcmRpbmdTdGF0ZSQgPSB0aGlzLnJlY29yZGluZ1N0YXRlU3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGdldCBkdXJhdGlvbk1zKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnJlY29yZGVkQ2h1bmtEdXJhdGlvbnMucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjICsgdmFsLCAwKSArXG4gICAgICAodGhpcy5zdGFydFRpbWUgPyBEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUgOiAwKVxuICAgICk7XG4gIH1cblxuICBnZXQgbWVkaWFUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5taW1lVHlwZS5zcGxpdCgnLycpPy5bMF0gfHwgJ3Vua25vd24nO1xuICB9XG5cbiAgZ2V0IGlzUmVjb3JkaW5nKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnJlY29yZGluZ1N0YXRlU3ViamVjdC52YWx1ZSA9PT0gTWVkaWFSZWNvcmRpbmdTdGF0ZS5SRUNPUkRJTkcgfHxcbiAgICAgIHRoaXMucmVjb3JkaW5nU3RhdGVTdWJqZWN0LnZhbHVlID09PSBNZWRpYVJlY29yZGluZ1N0YXRlLlBBVVNFRFxuICAgICk7XG4gIH1cblxuICBnZW5lcmF0ZVJlY29yZGluZ1RpdGxlID0gKG1pbWVUeXBlOiBzdHJpbmcpID0+IHtcbiAgICBpZiAodGhpcy5jdXN0b21HZW5lcmF0ZVJlY29yZGluZ1RpdGxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXN0b21HZW5lcmF0ZVJlY29yZGluZ1RpdGxlKHsgbWltZVR5cGUgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgJHtcbiAgICAgICAgdGhpcy5tZWRpYVR5cGVcbiAgICAgIH1fcmVjb3JkaW5nXyR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfS4ke2dldEV4dGVuc2lvbkZyb21NaW1lVHlwZShcbiAgICAgICAgbWltZVR5cGVcbiAgICAgICl9YDsgLy8gZXh0ZW5zaW9uIG5lZWRlZCBzbyB0aGF0IGRlc2t0b3AgU2FmYXJpIGNhbiBwbGF5IHRoZSBhc3NldFxuICAgIH1cbiAgfTtcblxuICBhc3luYyBtYWtlUmVjb3JkaW5nKGJsb2I6IEJsb2IpIHtcbiAgICBjb25zdCB7IG1pbWVUeXBlIH0gPSB0aGlzLmNvbmZpZztcbiAgICB0cnkge1xuICAgICAgaWYgKG1pbWVUeXBlLmluY2x1ZGVzKCd3ZWJtJykpIHtcbiAgICAgICAgLy8gVGhlIGJyb3dzZXIgZG9lcyBub3QgaW5jbHVkZSBkdXJhdGlvbiBtZXRhZGF0YSB3aXRoIHRoZSByZWNvcmRlZCBibG9iXG4gICAgICAgIGJsb2IgPSBhd2FpdCBmaXhXZWJtRHVyYXRpb24oYmxvYiwgdGhpcy5kdXJhdGlvbk1zLCB7XG4gICAgICAgICAgbG9nZ2VyOiAoKSA9PiBudWxsLCAvLyBwcmV2ZW50cyBwb2xsdXRpbmcgdGhlIGJyb3dzZXIgY29uc29sZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGJsb2IgPSBhd2FpdCB0aGlzLnRyYW5zY29kZXIudHJhbnNjb2RlKGJsb2IpO1xuXG4gICAgICBpZiAoIWJsb2IpIHJldHVybjtcblxuICAgICAgY29uc3QgZmlsZSA9IGNyZWF0ZUZpbGVGcm9tQmxvYnMoe1xuICAgICAgICBibG9ic0FycmF5OiBbYmxvYl0sXG4gICAgICAgIGZpbGVOYW1lOiB0aGlzLmdlbmVyYXRlUmVjb3JkaW5nVGl0bGUoYmxvYi50eXBlKSxcbiAgICAgICAgbWltZVR5cGU6IGJsb2IudHlwZSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcHJldmlld1VybCA9IGF3YWl0IGNyZWF0ZVVyaUZyb21CbG9iKGZpbGUpO1xuXG4gICAgICBjb25zdCBleHRyYURhdGEgPSB0aGlzLmVucmljaFdpdGhFeHRyYURhdGEoKTtcbiAgICAgIHRoaXMucmVjb3JkaW5nU3ViamVjdC5uZXh0KHtcbiAgICAgICAgcmVjb3JkaW5nOiBmaWxlLFxuICAgICAgICBkdXJhdGlvbjogdGhpcy5kdXJhdGlvbk1zIC8gMTAwMCxcbiAgICAgICAgYXNzZXRfdXJsOiBwcmV2aWV3VXJsLFxuICAgICAgICBtaW1lX3R5cGU6IG1pbWVUeXBlLFxuICAgICAgICAuLi5leHRyYURhdGEsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWxlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ0Vycm9yKGVycm9yIGFzIEVycm9yKTtcbiAgICAgIHRoaXMucmVjb3JkaW5nU3RhdGVTdWJqZWN0Lm5leHQoTWVkaWFSZWNvcmRpbmdTdGF0ZS5FUlJPUik7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUVycm9yRXZlbnQgPSAoZTogRXZlbnQpID0+IHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudCAqL1xuICAgIHRoaXMubG9nRXJyb3IoKGUgYXMgRXJyb3JFdmVudCkuZXJyb3IpO1xuICAgIHRoaXMucmVjb3JkaW5nU3RhdGVTdWJqZWN0Lm5leHQoTWVkaWFSZWNvcmRpbmdTdGF0ZS5FUlJPUik7XG4gICAgdGhpcy5ub3RpZmljYXRpb25TZXJ2aWNlLmFkZFRlbXBvcmFyeU5vdGlmaWNhdGlvbihcbiAgICAgICdzdHJlYW1DaGF0LkFuIGVycm9yIGhhcyBvY2N1cnJlZCBkdXJpbmcgcmVjb3JkaW5nJ1xuICAgICk7XG4gICAgdm9pZCB0aGlzLnN0b3AoeyBjYW5jZWw6IHRydWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlRGF0YWF2YWlsYWJsZUV2ZW50ID0gKGU6IEJsb2JFdmVudCkgPT4ge1xuICAgIGlmICghZS5kYXRhLnNpemUpIHJldHVybjtcbiAgICB2b2lkIHRoaXMubWFrZVJlY29yZGluZyhlLmRhdGEpO1xuICB9O1xuXG4gIGdldCByZWNvcmRpbmdTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QudmFsdWU7XG4gIH1cblxuICBhc3luYyBzdGFydCgpIHtcbiAgICBpZiAoXG4gICAgICBbTWVkaWFSZWNvcmRpbmdTdGF0ZS5SRUNPUkRJTkcsIE1lZGlhUmVjb3JkaW5nU3RhdGUuUEFVU0VEXS5pbmNsdWRlcyhcbiAgICAgICAgdGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QudmFsdWVcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlY29yZGluZ1N1YmplY3QubmV4dCh1bmRlZmluZWQpO1xuXG4gICAgLy8gYWNjb3VudCBmb3IgcmVxdWlyZW1lbnQgb24gaU9TIGFzIHBlciB0aGlzIGJ1ZyByZXBvcnQ6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yNTIzMDNcbiAgICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtTdHJlYW0gQ2hhdF0gTWVkaWEgZGV2aWNlcyBBUEkgbWlzc2luZywgaXQncyBwb3NzaWJsZSB5b3VyIGFwcCBpcyBub3Qgc2VydmVkIGZyb20gYSBzZWN1cmUgY29udGV4dCAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU2VjdXJpdHkvU2VjdXJlX0NvbnRleHRzKWBcbiAgICAgICk7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignTWVkaWEgcmVjb3JkaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgIHRoaXMubG9nRXJyb3IoZXJyb3IpO1xuICAgICAgdGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QubmV4dChNZWRpYVJlY29yZGluZ1N0YXRlLkVSUk9SKTtcbiAgICAgIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5hZGRUZW1wb3JhcnlOb3RpZmljYXRpb24oXG4gICAgICAgIGBzdHJlYW1DaGF0Lk1lZGlhIHJlY29yZGluZyBub3Qgc3VwcG9ydGVkYFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoeyBhdWRpbzogdHJ1ZSB9KTtcbiAgICAgIHRoaXMubWVkaWFSZWNvcmRlciA9IG5ldyBNZWRpYVJlY29yZGVyKHN0cmVhbSwgdGhpcy5jb25maWcpO1xuXG4gICAgICB0aGlzLm1lZGlhUmVjb3JkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgJ2RhdGFhdmFpbGFibGUnLFxuICAgICAgICB0aGlzLmhhbmRsZURhdGFhdmFpbGFibGVFdmVudFxuICAgICAgKTtcbiAgICAgIHRoaXMubWVkaWFSZWNvcmRlci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuaGFuZGxlRXJyb3JFdmVudCk7XG5cbiAgICAgIHRoaXMuc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB0aGlzLm1lZGlhUmVjb3JkZXIuc3RhcnQoKTtcblxuICAgICAgdGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QubmV4dChNZWRpYVJlY29yZGluZ1N0YXRlLlJFQ09SRElORyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nRXJyb3IoZXJyb3IgYXMgRXJyb3IpO1xuICAgICAgdm9pZCB0aGlzLnN0b3AoeyBjYW5jZWw6IHRydWUgfSk7XG4gICAgICB0aGlzLnJlY29yZGluZ1N0YXRlU3ViamVjdC5uZXh0KE1lZGlhUmVjb3JkaW5nU3RhdGUuRVJST1IpO1xuICAgICAgY29uc3QgaXNOb3RBbGxvd2VkID0gKGVycm9yIGFzIEVycm9yKS5uYW1lPy5pbmNsdWRlcygnTm90QWxsb3dlZEVycm9yJyk7XG4gICAgICB0aGlzLm5vdGlmaWNhdGlvblNlcnZpY2UuYWRkVGVtcG9yYXJ5Tm90aWZpY2F0aW9uKFxuICAgICAgICBpc05vdEFsbG93ZWRcbiAgICAgICAgICA/IGBzdHJlYW1DaGF0LlBsZWFzZSBncmFudCBwZXJtaXNzaW9uIHRvIHVzZSBtaWNyb2hwb25lYFxuICAgICAgICAgIDogYHN0cmVhbUNoYXQuRXJyb3Igc3RhcnRpbmcgcmVjb3JkaW5nYFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QudmFsdWUgIT09IE1lZGlhUmVjb3JkaW5nU3RhdGUuUkVDT1JESU5HKVxuICAgICAgcmV0dXJuO1xuICAgIGlmICh0aGlzLnN0YXJ0VGltZSkge1xuICAgICAgdGhpcy5yZWNvcmRlZENodW5rRHVyYXRpb25zLnB1c2gobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLnN0YXJ0VGltZSk7XG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5tZWRpYVJlY29yZGVyPy5wYXVzZSgpO1xuICAgIHRoaXMucmVjb3JkaW5nU3RhdGVTdWJqZWN0Lm5leHQoTWVkaWFSZWNvcmRpbmdTdGF0ZS5QQVVTRUQpO1xuICB9XG5cbiAgcmVzdW1lKCkge1xuICAgIGlmICh0aGlzLnJlY29yZGluZ1N0YXRlU3ViamVjdC52YWx1ZSAhPT0gTWVkaWFSZWNvcmRpbmdTdGF0ZS5QQVVTRUQpIHJldHVybjtcbiAgICB0aGlzLnN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHRoaXMubWVkaWFSZWNvcmRlcj8ucmVzdW1lKCk7XG4gICAgdGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QubmV4dChNZWRpYVJlY29yZGluZ1N0YXRlLlJFQ09SRElORyk7XG4gIH1cblxuICBhc3luYyBzdG9wKG9wdGlvbnM6IHsgY2FuY2VsOiBib29sZWFuIH0gPSB7IGNhbmNlbDogZmFsc2UgfSkge1xuICAgIGlmICh0aGlzLnN0YXJ0VGltZSkge1xuICAgICAgdGhpcy5yZWNvcmRlZENodW5rRHVyYXRpb25zLnB1c2gobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLnN0YXJ0VGltZSk7XG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGV0IHJlY29yZGluZyE6IE1lZGlhUmVjb3JkaW5nICYgVDtcbiAgICB0aGlzLm1lZGlhUmVjb3JkZXI/LnN0b3AoKTtcbiAgICB0cnkge1xuICAgICAgaWYgKFxuICAgICAgICAhb3B0aW9ucy5jYW5jZWwgJiZcbiAgICAgICAgdGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QudmFsdWUgIT09IE1lZGlhUmVjb3JkaW5nU3RhdGUuRVJST1JcbiAgICAgICkge1xuICAgICAgICByZWNvcmRpbmcgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgdGhpcy5yZWNvcmRpbmckLnN1YnNjcmliZSgocikgPT4ge1xuICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLnJlY29yZGluZ1N0YXRlJC5zdWJzY3JpYmUoKHMpID0+IHtcbiAgICAgICAgICAgIGlmIChzID09PSBNZWRpYVJlY29yZGluZ1N0YXRlLkVSUk9SKSB7XG4gICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFJlY29yZGluZyBjb3VsZG4ndCBiZSBjcmVhdGVkYCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIHRoaXMubm90aWZpY2F0aW9uU2VydmljZS5hZGRUZW1wb3JhcnlOb3RpZmljYXRpb24oXG4gICAgICAgICdzdHJlYW1DaGF0LkFuIGVycm9yIGhhcyBvY2N1cnJlZCBkdXJpbmcgcmVjb3JkaW5nJ1xuICAgICAgKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5yZWNvcmRlZENodW5rRHVyYXRpb25zID0gW107XG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy5tZWRpYVJlY29yZGVyPy5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAnZGF0YWF2YWlsYWJsZScsXG4gICAgICAgIHRoaXMuaGFuZGxlRGF0YWF2YWlsYWJsZUV2ZW50XG4gICAgICApO1xuICAgICAgdGhpcy5tZWRpYVJlY29yZGVyPy5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuaGFuZGxlRXJyb3JFdmVudCk7XG4gICAgICBpZiAodGhpcy5tZWRpYVJlY29yZGVyPy5zdHJlYW0/LmFjdGl2ZSkge1xuICAgICAgICB0aGlzLm1lZGlhUmVjb3JkZXI/LnN0cmVhbT8uZ2V0VHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcbiAgICAgICAgICB0cmFjay5zdG9wKCk7XG4gICAgICAgICAgdGhpcy5tZWRpYVJlY29yZGVyPy5zdHJlYW0/LnJlbW92ZVRyYWNrKHRyYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWVkaWFSZWNvcmRlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZWNvcmRpbmdTdGF0ZVN1YmplY3QubmV4dChNZWRpYVJlY29yZGluZ1N0YXRlLlNUT1BQRUQpO1xuICAgIH1cblxuICAgIHJldHVybiByZWNvcmRpbmc7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZW5yaWNoV2l0aEV4dHJhRGF0YSgpOiBUO1xuXG4gIHByb3RlY3RlZCBsb2dFcnJvcihlcnJvcjogRXJyb3IpIHtcbiAgICB0aGlzLmNoYXRTZXJ2aWNlLmNoYXRDbGllbnQ/LmxvZ2dlcignZXJyb3InLCBlcnJvci5tZXNzYWdlLCB7XG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICB0YWc6IFsnTWVkaWFSZWNvcmRlciddLFxuICAgIH0pO1xuICB9XG59XG4iXX0=