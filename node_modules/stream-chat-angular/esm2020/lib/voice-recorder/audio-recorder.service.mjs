import { Injectable, NgModule } from '@angular/core';
import { MultimediaRecorder } from './media-recorder';
import { resampleWaveForm } from '../wave-form-sampler';
import * as i0 from "@angular/core";
import * as i1 from "../notification.service";
import * as i2 from "../chat-client.service";
import * as i3 from "./transcoder.service";
import * as i4 from "./amplitude-recorder.service";
/**
 * The `AudioRecorderService` can record an audio file, the SDK uses this to record a voice message
 */
export class AudioRecorderService extends MultimediaRecorder {
    constructor(notificationService, chatService, transcoder, amplitudeRecorder) {
        super(notificationService, chatService, transcoder);
        this.amplitudeRecorder = amplitudeRecorder;
        /**
         * Due to browser restrictions the following config is used:
         * - In Safari we record in audio/mp4
         * - For all other browsers we use audio/webm (which is then transcoded to wav)
         */
        this.config = {
            mimeType: MediaRecorder.isTypeSupported('audio/webm')
                ? 'audio/webm'
                : 'audio/mp4;codecs=mp4a.40.2', // fallback for Safari
        };
    }
    enrichWithExtraData() {
        const waveformData = resampleWaveForm(this.amplitudeRecorder.amplitudes, this.amplitudeRecorder.config.sampleCount);
        return { waveform_data: waveformData };
    }
    /**
     * Start audio recording
     */
    async start() {
        const result = await super.start();
        if (this.mediaRecorder?.stream) {
            this.amplitudeRecorder.start(this.mediaRecorder?.stream);
        }
        return result;
    }
    /**
     * Pause audio recording, it can be restarted using `resume`
     */
    pause() {
        const result = super.pause();
        this.amplitudeRecorder.pause();
        return result;
    }
    /**
     * Resume a previously paused recording
     */
    resume() {
        const result = super.resume();
        this.amplitudeRecorder.resume();
        return result;
    }
    /**
     * Stop the recording and free up used resources
     * @param options
     * @param options.cancel if this is `true` no recording will be created, but resources will be freed
     * @returns the recording
     */
    async stop(options) {
        try {
            const result = await super.stop(options);
            return result;
        }
        finally {
            this.amplitudeRecorder.stop();
        }
    }
}
AudioRecorderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AudioRecorderService, deps: [{ token: i1.NotificationService }, { token: i2.ChatClientService }, { token: i3.TranscoderService }, { token: i4.AmplitudeRecorderService }], target: i0.ɵɵFactoryTarget.Injectable });
AudioRecorderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AudioRecorderService, providedIn: NgModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AudioRecorderService, decorators: [{
            type: Injectable,
            args: [{ providedIn: NgModule }]
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: i2.ChatClientService }, { type: i3.TranscoderService }, { type: i4.AmplitudeRecorderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXVkaW8tcmVjb3JkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi92b2ljZS1yZWNvcmRlci9hdWRpby1yZWNvcmRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJELE9BQU8sRUFBdUIsa0JBQWtCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUkzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7Ozs7O0FBR3hEOztHQUVHO0FBRUgsTUFBTSxPQUFPLG9CQUFxQixTQUFRLGtCQUV6QztJQVlDLFlBQ0UsbUJBQXdDLEVBQ3hDLFdBQThCLEVBQzlCLFVBQTZCLEVBQ3JCLGlCQUEyQztRQUVuRCxLQUFLLENBQUMsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRjVDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFmckQ7Ozs7V0FJRztRQUNILFdBQU0sR0FBd0I7WUFDNUIsUUFBUSxFQUFFLGFBQWEsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDO2dCQUNuRCxDQUFDLENBQUMsWUFBWTtnQkFDZCxDQUFDLENBQUMsNEJBQTRCLEVBQUUsc0JBQXNCO1NBQ3pELENBQUM7SUFTRixDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUNuQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUNqQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDMUMsQ0FBQztRQUVGLE9BQU8sRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLEtBQUs7UUFDVCxNQUFNLE1BQU0sR0FBRyxNQUFNLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVuQyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFO1lBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUMxRDtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFN0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBRS9CLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFOUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWhDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBNkI7UUFDdEMsSUFBSTtZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUV6QyxPQUFPLE1BQU0sQ0FBQztTQUNmO2dCQUFTO1lBQ1IsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1NBQy9CO0lBQ0gsQ0FBQzs7aUhBakZVLG9CQUFvQjtxSEFBcEIsb0JBQW9CLGNBRFAsUUFBUTsyRkFDckIsb0JBQW9CO2tCQURoQyxVQUFVO21CQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbXBsaXR1ZGVSZWNvcmRlclNlcnZpY2UgfSBmcm9tICcuL2FtcGxpdHVkZS1yZWNvcmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IE1lZGlhUmVjb3JkZXJDb25maWcsIE11bHRpbWVkaWFSZWNvcmRlciB9IGZyb20gJy4vbWVkaWEtcmVjb3JkZXInO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uL25vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IENoYXRDbGllbnRTZXJ2aWNlIH0gZnJvbSAnLi4vY2hhdC1jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBUcmFuc2NvZGVyU2VydmljZSB9IGZyb20gJy4vdHJhbnNjb2Rlci5zZXJ2aWNlJztcbmltcG9ydCB7IHJlc2FtcGxlV2F2ZUZvcm0gfSBmcm9tICcuLi93YXZlLWZvcm0tc2FtcGxlcic7XG5pbXBvcnQgeyBBdWRpb1JlY29yZGluZywgTWVkaWFSZWNvcmRpbmcgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogVGhlIGBBdWRpb1JlY29yZGVyU2VydmljZWAgY2FuIHJlY29yZCBhbiBhdWRpbyBmaWxlLCB0aGUgU0RLIHVzZXMgdGhpcyB0byByZWNvcmQgYSB2b2ljZSBtZXNzYWdlXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogTmdNb2R1bGUgfSlcbmV4cG9ydCBjbGFzcyBBdWRpb1JlY29yZGVyU2VydmljZSBleHRlbmRzIE11bHRpbWVkaWFSZWNvcmRlcjxcbiAgT21pdDxBdWRpb1JlY29yZGluZywga2V5b2YgTWVkaWFSZWNvcmRpbmc+XG4+IHtcbiAgLyoqXG4gICAqIER1ZSB0byBicm93c2VyIHJlc3RyaWN0aW9ucyB0aGUgZm9sbG93aW5nIGNvbmZpZyBpcyB1c2VkOlxuICAgKiAtIEluIFNhZmFyaSB3ZSByZWNvcmQgaW4gYXVkaW8vbXA0XG4gICAqIC0gRm9yIGFsbCBvdGhlciBicm93c2VycyB3ZSB1c2UgYXVkaW8vd2VibSAod2hpY2ggaXMgdGhlbiB0cmFuc2NvZGVkIHRvIHdhdilcbiAgICovXG4gIGNvbmZpZzogTWVkaWFSZWNvcmRlckNvbmZpZyA9IHtcbiAgICBtaW1lVHlwZTogTWVkaWFSZWNvcmRlci5pc1R5cGVTdXBwb3J0ZWQoJ2F1ZGlvL3dlYm0nKVxuICAgICAgPyAnYXVkaW8vd2VibSdcbiAgICAgIDogJ2F1ZGlvL21wNDtjb2RlY3M9bXA0YS40MC4yJywgLy8gZmFsbGJhY2sgZm9yIFNhZmFyaVxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5vdGlmaWNhdGlvblNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2UsXG4gICAgY2hhdFNlcnZpY2U6IENoYXRDbGllbnRTZXJ2aWNlLFxuICAgIHRyYW5zY29kZXI6IFRyYW5zY29kZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgYW1wbGl0dWRlUmVjb3JkZXI6IEFtcGxpdHVkZVJlY29yZGVyU2VydmljZVxuICApIHtcbiAgICBzdXBlcihub3RpZmljYXRpb25TZXJ2aWNlLCBjaGF0U2VydmljZSwgdHJhbnNjb2Rlcik7XG4gIH1cblxuICBwcm90ZWN0ZWQgZW5yaWNoV2l0aEV4dHJhRGF0YSgpIHtcbiAgICBjb25zdCB3YXZlZm9ybURhdGEgPSByZXNhbXBsZVdhdmVGb3JtKFxuICAgICAgdGhpcy5hbXBsaXR1ZGVSZWNvcmRlci5hbXBsaXR1ZGVzLFxuICAgICAgdGhpcy5hbXBsaXR1ZGVSZWNvcmRlci5jb25maWcuc2FtcGxlQ291bnRcbiAgICApO1xuXG4gICAgcmV0dXJuIHsgd2F2ZWZvcm1fZGF0YTogd2F2ZWZvcm1EYXRhIH07XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgYXVkaW8gcmVjb3JkaW5nXG4gICAqL1xuICBhc3luYyBzdGFydCgpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5zdGFydCgpO1xuXG4gICAgaWYgKHRoaXMubWVkaWFSZWNvcmRlcj8uc3RyZWFtKSB7XG4gICAgICB0aGlzLmFtcGxpdHVkZVJlY29yZGVyLnN0YXJ0KHRoaXMubWVkaWFSZWNvcmRlcj8uc3RyZWFtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdXNlIGF1ZGlvIHJlY29yZGluZywgaXQgY2FuIGJlIHJlc3RhcnRlZCB1c2luZyBgcmVzdW1lYFxuICAgKi9cbiAgcGF1c2UoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc3VwZXIucGF1c2UoKTtcblxuICAgIHRoaXMuYW1wbGl0dWRlUmVjb3JkZXIucGF1c2UoKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVzdW1lIGEgcHJldmlvdXNseSBwYXVzZWQgcmVjb3JkaW5nXG4gICAqL1xuICByZXN1bWUoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc3VwZXIucmVzdW1lKCk7XG5cbiAgICB0aGlzLmFtcGxpdHVkZVJlY29yZGVyLnJlc3VtZSgpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSByZWNvcmRpbmcgYW5kIGZyZWUgdXAgdXNlZCByZXNvdXJjZXNcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHBhcmFtIG9wdGlvbnMuY2FuY2VsIGlmIHRoaXMgaXMgYHRydWVgIG5vIHJlY29yZGluZyB3aWxsIGJlIGNyZWF0ZWQsIGJ1dCByZXNvdXJjZXMgd2lsbCBiZSBmcmVlZFxuICAgKiBAcmV0dXJucyB0aGUgcmVjb3JkaW5nXG4gICAqL1xuICBhc3luYyBzdG9wKG9wdGlvbnM/OiB7IGNhbmNlbDogYm9vbGVhbiB9KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLnN0b3Aob3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuYW1wbGl0dWRlUmVjb3JkZXIuc3RvcCgpO1xuICAgIH1cbiAgfVxufVxuIl19