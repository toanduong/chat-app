import { Component, Input } from '@angular/core';
import emojiRegex from 'emoji-regex';
import * as i0 from "@angular/core";
import * as i1 from "../message.service";
import * as i2 from "../custom-templates.service";
import * as i3 from "@angular/common";
/**
 * The `MessageTextComponent` displays the text content of a message.
 */
export class MessageTextComponent {
    constructor(messageService, customTemplatesService) {
        this.messageService = messageService;
        this.customTemplatesService = customTemplatesService;
        /**
         * `true` if the component displayes a message quote
         */
        this.isQuoted = false;
        /**
         * `true` if the
         */
        this.shouldTranslate = false;
        this.messageTextParts = [];
        this.emojiRegexp = new RegExp(emojiRegex(), 'g');
        this.displayAs = this.messageService.displayAs;
        try {
            this.urlRegexp = new RegExp('(?:(?:https?|ftp|file):\\/\\/|www\\.|ftp\\.|(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,})(?![^\\s]*@[^\\s]*)(?:[^\\s()<>]+|\\([\\w\\d]+\\))*(?<!@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})', 'gim');
        }
        catch {
            this.urlRegexp =
                /(?:(?:https?|ftp|file):\/\/|www\.|ftp\.)(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[-A-Z0-9+&@#/%=~_|$?!:,.])*(?:\([-A-Z0-9+&@#/%=~_|$?!:,.]*\)|[A-Z0-9+&@#/%=~_|$])/gim;
        }
    }
    ngOnChanges(changes) {
        if (changes.message || changes.shouldTranslate) {
            this.createMessageParts();
        }
    }
    getMentionContext(messagePart) {
        return {
            content: messagePart.content,
            user: messagePart.user,
        };
    }
    createMessageParts() {
        this.messageTextParts = undefined;
        this.messageText = undefined;
        let content = this.getMessageContent();
        if ((!this.message.mentioned_users ||
            this.message.mentioned_users.length === 0) &&
            !content?.match(this.emojiRegexp) &&
            !content?.match(this.urlRegexp)) {
            this.messageTextParts = undefined;
            this.messageText = content;
            return;
        }
        if (!content) {
            return;
        }
        if (!this.message.mentioned_users ||
            this.message.mentioned_users.length === 0) {
            content = this.fixEmojiDisplay(content);
            content = this.wrapLinksWithAnchorTag(content);
            this.messageTextParts = [{ content, type: 'text' }];
        }
        else {
            this.messageTextParts = [];
            let text = content;
            this.message.mentioned_users.forEach((user) => {
                const mention = `@${user.name || user.id}`;
                const precedingText = text.substring(0, text.indexOf(mention));
                let formattedPrecedingText = this.fixEmojiDisplay(precedingText);
                formattedPrecedingText = this.wrapLinksWithAnchorTag(formattedPrecedingText);
                this.messageTextParts.push({
                    content: formattedPrecedingText,
                    type: 'text',
                });
                this.messageTextParts.push({
                    content: mention,
                    type: 'mention',
                    user,
                });
                text = text.replace(precedingText + mention, '');
            });
            if (text) {
                text = this.fixEmojiDisplay(text);
                text = this.wrapLinksWithAnchorTag(text);
                this.messageTextParts.push({ content: text, type: 'text' });
            }
        }
    }
    getMessageContent() {
        const originalContent = this.message?.text;
        if (this.shouldTranslate) {
            const translation = this.message?.translation;
            return translation || originalContent;
        }
        else {
            return originalContent;
        }
    }
    fixEmojiDisplay(content) {
        // Wrap emojis in span to display emojis correctly in Chrome https://bugs.chromium.org/p/chromium/issues/detail?id=596223
        // Based on this: https://stackoverflow.com/questions/4565112/javascript-how-to-find-out-if-the-user-browser-is-chrome
        /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any */
        const isChrome = !!window.chrome && typeof window.opr === 'undefined';
        /* eslint-enable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any */
        content = content.replace(this.emojiRegexp, (match) => `<span ${isChrome ? 'class="str-chat__emoji-display-fix"' : ''}>${match}</span>`);
        return content;
    }
    wrapLinksWithAnchorTag(content) {
        if (this.displayAs === 'html') {
            return content;
        }
        content = content.replace(this.urlRegexp, (match) => {
            if (this.messageService.customLinkRenderer) {
                return this.messageService.customLinkRenderer(match);
            }
            else {
                let href = match;
                if (!href.startsWith('http') &&
                    !href.startsWith('ftp') &&
                    !href.startsWith('file')) {
                    href = `https://${match}`;
                }
                return `<a href="${href}" target="_blank" rel="nofollow">${match}</a>`;
            }
        });
        return content;
    }
}
MessageTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageTextComponent, deps: [{ token: i1.MessageService }, { token: i2.CustomTemplatesService }], target: i0.ɵɵFactoryTarget.Component });
MessageTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MessageTextComponent, selector: "stream-message-text", inputs: { message: "message", isQuoted: "isQuoted", shouldTranslate: "shouldTranslate" }, usesOnChanges: true, ngImport: i0, template: "<p\n  [class.str-chat__quoted-message-text-value]=\"isQuoted\"\n  [class.str-chat__message-text-value]=\"!isQuoted\"\n  *ngIf=\"message?.text\"\n  data-testid=\"text\"\n>\n  <ng-container *ngIf=\"messageTextParts; else defaultContent\">\n    <!-- eslint-disable-next-line @angular-eslint/template/use-track-by-function -->\n    <ng-container *ngFor=\"let part of messageTextParts\">\n      <span\n        *ngIf=\"part.type === 'text'; else mention\"\n        [innerHTML]=\"part.content\"\n      ></span>\n      <ng-template #mention>\n        <ng-template #defaultMention let-content=\"content\">\n          <span class=\"str-chat__message-mention\">{{ content }}</span>\n        </ng-template>\n        <ng-container\n          *ngTemplateOutlet=\"\n            (customTemplatesService.mentionTemplate$ | async) || defaultMention;\n            context: getMentionContext(part)\n          \"\n        ></ng-container>\n      </ng-template>\n    </ng-container>\n  </ng-container>\n  <ng-template #defaultContent>\n    <ng-container *ngIf=\"displayAs === 'text'; else asHTML\">\n      {{ messageText || \"\" }}\n    </ng-container>\n    <ng-template #asHTML\n      ><span data-testid=\"html-content\" [innerHTML]=\"messageText\"></span\n    ></ng-template>\n  </ng-template>\n</p>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-message-text', template: "<p\n  [class.str-chat__quoted-message-text-value]=\"isQuoted\"\n  [class.str-chat__message-text-value]=\"!isQuoted\"\n  *ngIf=\"message?.text\"\n  data-testid=\"text\"\n>\n  <ng-container *ngIf=\"messageTextParts; else defaultContent\">\n    <!-- eslint-disable-next-line @angular-eslint/template/use-track-by-function -->\n    <ng-container *ngFor=\"let part of messageTextParts\">\n      <span\n        *ngIf=\"part.type === 'text'; else mention\"\n        [innerHTML]=\"part.content\"\n      ></span>\n      <ng-template #mention>\n        <ng-template #defaultMention let-content=\"content\">\n          <span class=\"str-chat__message-mention\">{{ content }}</span>\n        </ng-template>\n        <ng-container\n          *ngTemplateOutlet=\"\n            (customTemplatesService.mentionTemplate$ | async) || defaultMention;\n            context: getMentionContext(part)\n          \"\n        ></ng-container>\n      </ng-template>\n    </ng-container>\n  </ng-container>\n  <ng-template #defaultContent>\n    <ng-container *ngIf=\"displayAs === 'text'; else asHTML\">\n      {{ messageText || \"\" }}\n    </ng-container>\n    <ng-template #asHTML\n      ><span data-testid=\"html-content\" [innerHTML]=\"messageText\"></span\n    ></ng-template>\n  </ng-template>\n</p>\n" }]
        }], ctorParameters: function () { return [{ type: i1.MessageService }, { type: i2.CustomTemplatesService }]; }, propDecorators: { message: [{
                type: Input
            }], isQuoted: [{
                type: Input
            }], shouldTranslate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS10ZXh0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9tZXNzYWdlLXRleHQvbWVzc2FnZS10ZXh0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9tZXNzYWdlLXRleHQvbWVzc2FnZS10ZXh0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQU8zRSxPQUFPLFVBQVUsTUFBTSxhQUFhLENBQUM7Ozs7O0FBVXJDOztHQUVHO0FBTUgsTUFBTSxPQUFPLG9CQUFvQjtJQXNCL0IsWUFDVSxjQUE4QixFQUM3QixzQkFBOEM7UUFEL0MsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzdCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFoQnpEOztXQUVHO1FBQ00sYUFBUSxHQUFZLEtBQUssQ0FBQztRQUNuQzs7V0FFRztRQUNNLG9CQUFlLEdBQVksS0FBSyxDQUFDO1FBQzFDLHFCQUFnQixHQUE4QixFQUFFLENBQUM7UUFJekMsZ0JBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQU1sRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO1FBQy9DLElBQUk7WUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksTUFBTSxDQUN6QixzS0FBc0ssRUFDdEssS0FBSyxDQUNOLENBQUM7U0FDSDtRQUFDLE1BQU07WUFDTixJQUFJLENBQUMsU0FBUztnQkFDWixnS0FBZ0ssQ0FBQztTQUNwSztJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFB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QWtCLEVBQUU7Z0JBQzFDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0RDtpQkFBTTtnQkFDTCxJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7Z0JBQ2pCLElBQ0UsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztvQkFDeEIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztvQkFDdkIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUN4QjtvQkFDQSxJQUFJLEdBQUcsV0FBVyxLQUFLLEVBQUUsQ0FBQztpQkFDM0I7Z0JBQ0QsT0FBTyxZQUFZLElBQUksb0NBQW9DLEtBQUssTUFBTSxDQUFDO2FBQ3hFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOztpSEF6SlUsb0JBQW9CO3FHQUFwQixvQkFBb0IsMEtDekJqQyxtd0NBbUNBOzJGRFZhLG9CQUFvQjtrQkFMaEMsU0FBUzsrQkFDRSxxQkFBcUI7MElBUXRCLE9BQU87c0JBQWYsS0FBSztnQkFPRyxRQUFRO3NCQUFoQixLQUFLO2dCQUlHLGVBQWU7c0JBQXZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIERlZmF1bHRTdHJlYW1DaGF0R2VuZXJpY3MsXG4gIE1lbnRpb25UZW1wbGF0ZUNvbnRleHQsXG4gIFN0cmVhbU1lc3NhZ2UsXG59IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IE1lc3NhZ2VSZXNwb25zZUJhc2UsIFVzZXJSZXNwb25zZSB9IGZyb20gJ3N0cmVhbS1jaGF0JztcbmltcG9ydCBlbW9qaVJlZ2V4IGZyb20gJ2Vtb2ppLXJlZ2V4JztcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vbWVzc2FnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEN1c3RvbVRlbXBsYXRlc1NlcnZpY2UgfSBmcm9tICcuLi9jdXN0b20tdGVtcGxhdGVzLnNlcnZpY2UnO1xuXG50eXBlIE1lc3NhZ2VQYXJ0ID0ge1xuICBjb250ZW50OiBzdHJpbmc7XG4gIHR5cGU6ICd0ZXh0JyB8ICdtZW50aW9uJztcbiAgdXNlcj86IFVzZXJSZXNwb25zZTtcbn07XG5cbi8qKlxuICogVGhlIGBNZXNzYWdlVGV4dENvbXBvbmVudGAgZGlzcGxheXMgdGhlIHRleHQgY29udGVudCBvZiBhIG1lc3NhZ2UuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3N0cmVhbS1tZXNzYWdlLXRleHQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWVzc2FnZS10ZXh0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZVRleHRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAvKipcbiAgICogVGhlIG1lc3NhZ2Ugd2hpY2ggdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAqL1xuICBASW5wdXQoKSBtZXNzYWdlOlxuICAgIHwgU3RyZWFtTWVzc2FnZTxEZWZhdWx0U3RyZWFtQ2hhdEdlbmVyaWNzPlxuICAgIHwgdW5kZWZpbmVkXG4gICAgfCBNZXNzYWdlUmVzcG9uc2VCYXNlPERlZmF1bHRTdHJlYW1DaGF0R2VuZXJpY3M+O1xuICAvKipcbiAgICogYHRydWVgIGlmIHRoZSBjb21wb25lbnQgZGlzcGxheWVzIGEgbWVzc2FnZSBxdW90ZVxuICAgKi9cbiAgQElucHV0KCkgaXNRdW90ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgLyoqXG4gICAqIGB0cnVlYCBpZiB0aGVcbiAgICovXG4gIEBJbnB1dCgpIHNob3VsZFRyYW5zbGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBtZXNzYWdlVGV4dFBhcnRzOiBNZXNzYWdlUGFydFtdIHwgdW5kZWZpbmVkID0gW107XG4gIG1lc3NhZ2VUZXh0Pzogc3RyaW5nO1xuICBkaXNwbGF5QXM6ICd0ZXh0JyB8ICdodG1sJztcbiAgcHJpdmF0ZSByZWFkb25seSB1cmxSZWdleHA6IFJlZ0V4cDtcbiAgcHJpdmF0ZSBlbW9qaVJlZ2V4cCA9IG5ldyBSZWdFeHAoZW1vamlSZWdleCgpLCAnZycpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VTZXJ2aWNlLFxuICAgIHJlYWRvbmx5IGN1c3RvbVRlbXBsYXRlc1NlcnZpY2U6IEN1c3RvbVRlbXBsYXRlc1NlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5kaXNwbGF5QXMgPSB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmRpc3BsYXlBcztcbiAgICB0cnkge1xuICAgICAgdGhpcy51cmxSZWdleHAgPSBuZXcgUmVnRXhwKFxuICAgICAgICAnKD86KD86aHR0cHM/fGZ0cHxmaWxlKTpcXFxcL1xcXFwvfHd3d1xcXFwufGZ0cFxcXFwufCg/OlthLXpBLVowLTktXStcXFxcLikrW2EtekEtWl17Mix9KSg/IVteXFxcXHNdKkBbXlxcXFxzXSopKD86W15cXFxccygpPD5dK3xcXFxcKFtcXFxcd1xcXFxkXStcXFxcKSkqKD88IUBbYS16QS1aMC05Li1dK1xcXFwuW2EtekEtWl17Mix9KScsXG4gICAgICAgICdnaW0nXG4gICAgICApO1xuICAgIH0gY2F0Y2gge1xuICAgICAgdGhpcy51cmxSZWdleHAgPVxuICAgICAgICAvKD86KD86aHR0cHM/fGZ0cHxmaWxlKTpcXC9cXC98d3d3XFwufGZ0cFxcLikoPzpcXChbLUEtWjAtOSsmQCMvJT1+X3wkPyE6LC5dKlxcKXxbLUEtWjAtOSsmQCMvJT1+X3wkPyE6LC5dKSooPzpcXChbLUEtWjAtOSsmQCMvJT1+X3wkPyE6LC5dKlxcKXxbQS1aMC05KyZAIy8lPX5ffCRdKS9naW07XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLm1lc3NhZ2UgfHwgY2hhbmdlcy5zaG91bGRUcmFuc2xhdGUpIHtcbiAgICAgIHRoaXMuY3JlYXRlTWVzc2FnZVBhcnRzKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0TWVudGlvbkNvbnRleHQobWVzc2FnZVBhcnQ6IE1lc3NhZ2VQYXJ0KTogTWVudGlvblRlbXBsYXRlQ29udGV4dCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IG1lc3NhZ2VQYXJ0LmNvbnRlbnQsXG4gICAgICB1c2VyOiBtZXNzYWdlUGFydC51c2VyISxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVNZXNzYWdlUGFydHMoKSB7XG4gICAgdGhpcy5tZXNzYWdlVGV4dFBhcnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWVzc2FnZVRleHQgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLmdldE1lc3NhZ2VDb250ZW50KCk7XG4gICAgaWYgKFxuICAgICAgKCF0aGlzLm1lc3NhZ2UhLm1lbnRpb25lZF91c2VycyB8fFxuICAgICAgICB0aGlzLm1lc3NhZ2UhLm1lbnRpb25lZF91c2Vycy5sZW5ndGggPT09IDApICYmXG4gICAgICAhY29udGVudD8ubWF0Y2godGhpcy5lbW9qaVJlZ2V4cCkgJiZcbiAgICAgICFjb250ZW50Py5tYXRjaCh0aGlzLnVybFJlZ2V4cClcbiAgICApIHtcbiAgICAgIHRoaXMubWVzc2FnZVRleHRQYXJ0cyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMubWVzc2FnZVRleHQgPSBjb250ZW50O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIXRoaXMubWVzc2FnZSEubWVudGlvbmVkX3VzZXJzIHx8XG4gICAgICB0aGlzLm1lc3NhZ2UhLm1lbnRpb25lZF91c2Vycy5sZW5ndGggPT09IDBcbiAgICApIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLmZpeEVtb2ppRGlzcGxheShjb250ZW50KTtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLndyYXBMaW5rc1dpdGhBbmNob3JUYWcoY29udGVudCk7XG4gICAgICB0aGlzLm1lc3NhZ2VUZXh0UGFydHMgPSBbeyBjb250ZW50LCB0eXBlOiAndGV4dCcgfV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWVzc2FnZVRleHRQYXJ0cyA9IFtdO1xuICAgICAgbGV0IHRleHQgPSBjb250ZW50O1xuICAgICAgdGhpcy5tZXNzYWdlIS5tZW50aW9uZWRfdXNlcnMuZm9yRWFjaCgodXNlcikgPT4ge1xuICAgICAgICBjb25zdCBtZW50aW9uID0gYEAke3VzZXIubmFtZSB8fCB1c2VyLmlkfWA7XG4gICAgICAgIGNvbnN0IHByZWNlZGluZ1RleHQgPSB0ZXh0LnN1YnN0cmluZygwLCB0ZXh0LmluZGV4T2YobWVudGlvbikpO1xuICAgICAgICBsZXQgZm9ybWF0dGVkUHJlY2VkaW5nVGV4dCA9IHRoaXMuZml4RW1vamlEaXNwbGF5KHByZWNlZGluZ1RleHQpO1xuICAgICAgICBmb3JtYXR0ZWRQcmVjZWRpbmdUZXh0ID0gdGhpcy53cmFwTGlua3NXaXRoQW5jaG9yVGFnKFxuICAgICAgICAgIGZvcm1hdHRlZFByZWNlZGluZ1RleHRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlVGV4dFBhcnRzIS5wdXNoKHtcbiAgICAgICAgICBjb250ZW50OiBmb3JtYXR0ZWRQcmVjZWRpbmdUZXh0LFxuICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWVzc2FnZVRleHRQYXJ0cyEucHVzaCh7XG4gICAgICAgICAgY29udGVudDogbWVudGlvbixcbiAgICAgICAgICB0eXBlOiAnbWVudGlvbicsXG4gICAgICAgICAgdXNlcixcbiAgICAgICAgfSk7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocHJlY2VkaW5nVGV4dCArIG1lbnRpb24sICcnKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdGV4dCA9IHRoaXMuZml4RW1vamlEaXNwbGF5KHRleHQpO1xuICAgICAgICB0ZXh0ID0gdGhpcy53cmFwTGlua3NXaXRoQW5jaG9yVGFnKHRleHQpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VUZXh0UGFydHMucHVzaCh7IGNvbnRlbnQ6IHRleHQsIHR5cGU6ICd0ZXh0JyB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldE1lc3NhZ2VDb250ZW50KCkge1xuICAgIGNvbnN0IG9yaWdpbmFsQ29udGVudCA9IHRoaXMubWVzc2FnZT8udGV4dDtcbiAgICBpZiAodGhpcy5zaG91bGRUcmFuc2xhdGUpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0aW9uID0gdGhpcy5tZXNzYWdlPy50cmFuc2xhdGlvbjtcbiAgICAgIHJldHVybiB0cmFuc2xhdGlvbiB8fCBvcmlnaW5hbENvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcmlnaW5hbENvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaXhFbW9qaURpc3BsYXkoY29udGVudDogc3RyaW5nKSB7XG4gICAgLy8gV3JhcCBlbW9qaXMgaW4gc3BhbiB0byBkaXNwbGF5IGVtb2ppcyBjb3JyZWN0bHkgaW4gQ2hyb21lIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU5NjIyM1xuICAgIC8vIEJhc2VkIG9uIHRoaXM6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ1NjUxMTIvamF2YXNjcmlwdC1ob3ctdG8tZmluZC1vdXQtaWYtdGhlLXVzZXItYnJvd3Nlci1pcy1jaHJvbWVcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICBjb25zdCBpc0Nocm9tZSA9XG4gICAgICAhISh3aW5kb3cgYXMgYW55KS5jaHJvbWUgJiYgdHlwZW9mICh3aW5kb3cgYXMgYW55KS5vcHIgPT09ICd1bmRlZmluZWQnO1xuICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShcbiAgICAgIHRoaXMuZW1vamlSZWdleHAsXG4gICAgICAobWF0Y2gpID0+XG4gICAgICAgIGA8c3BhbiAke1xuICAgICAgICAgIGlzQ2hyb21lID8gJ2NsYXNzPVwic3RyLWNoYXRfX2Vtb2ppLWRpc3BsYXktZml4XCInIDogJydcbiAgICAgICAgfT4ke21hdGNofTwvc3Bhbj5gXG4gICAgKTtcblxuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgcHJpdmF0ZSB3cmFwTGlua3NXaXRoQW5jaG9yVGFnKGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGlmICh0aGlzLmRpc3BsYXlBcyA9PT0gJ2h0bWwnKSB7XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG4gICAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSh0aGlzLnVybFJlZ2V4cCwgKG1hdGNoKSA9PiB7XG4gICAgICBpZiAodGhpcy5tZXNzYWdlU2VydmljZS5jdXN0b21MaW5rUmVuZGVyZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZVNlcnZpY2UuY3VzdG9tTGlua1JlbmRlcmVyKG1hdGNoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBocmVmID0gbWF0Y2g7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaHJlZi5zdGFydHNXaXRoKCdodHRwJykgJiZcbiAgICAgICAgICAhaHJlZi5zdGFydHNXaXRoKCdmdHAnKSAmJlxuICAgICAgICAgICFocmVmLnN0YXJ0c1dpdGgoJ2ZpbGUnKVxuICAgICAgICApIHtcbiAgICAgICAgICBocmVmID0gYGh0dHBzOi8vJHttYXRjaH1gO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHJlZn1cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub2ZvbGxvd1wiPiR7bWF0Y2h9PC9hPmA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxufVxuIiwiPHBcbiAgW2NsYXNzLnN0ci1jaGF0X19xdW90ZWQtbWVzc2FnZS10ZXh0LXZhbHVlXT1cImlzUXVvdGVkXCJcbiAgW2NsYXNzLnN0ci1jaGF0X19tZXNzYWdlLXRleHQtdmFsdWVdPVwiIWlzUXVvdGVkXCJcbiAgKm5nSWY9XCJtZXNzYWdlPy50ZXh0XCJcbiAgZGF0YS10ZXN0aWQ9XCJ0ZXh0XCJcbj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIm1lc3NhZ2VUZXh0UGFydHM7IGVsc2UgZGVmYXVsdENvbnRlbnRcIj5cbiAgICA8IS0tIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvdGVtcGxhdGUvdXNlLXRyYWNrLWJ5LWZ1bmN0aW9uIC0tPlxuICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IHBhcnQgb2YgbWVzc2FnZVRleHRQYXJ0c1wiPlxuICAgICAgPHNwYW5cbiAgICAgICAgKm5nSWY9XCJwYXJ0LnR5cGUgPT09ICd0ZXh0JzsgZWxzZSBtZW50aW9uXCJcbiAgICAgICAgW2lubmVySFRNTF09XCJwYXJ0LmNvbnRlbnRcIlxuICAgICAgPjwvc3Bhbj5cbiAgICAgIDxuZy10ZW1wbGF0ZSAjbWVudGlvbj5cbiAgICAgICAgPG5nLXRlbXBsYXRlICNkZWZhdWx0TWVudGlvbiBsZXQtY29udGVudD1cImNvbnRlbnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0ci1jaGF0X19tZXNzYWdlLW1lbnRpb25cIj57eyBjb250ZW50IH19PC9zcGFuPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJcbiAgICAgICAgICAgIChjdXN0b21UZW1wbGF0ZXNTZXJ2aWNlLm1lbnRpb25UZW1wbGF0ZSQgfCBhc3luYykgfHwgZGVmYXVsdE1lbnRpb247XG4gICAgICAgICAgICBjb250ZXh0OiBnZXRNZW50aW9uQ29udGV4dChwYXJ0KVxuICAgICAgICAgIFwiXG4gICAgICAgID48L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvbmctY29udGFpbmVyPlxuICA8bmctdGVtcGxhdGUgI2RlZmF1bHRDb250ZW50PlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJkaXNwbGF5QXMgPT09ICd0ZXh0JzsgZWxzZSBhc0hUTUxcIj5cbiAgICAgIHt7IG1lc3NhZ2VUZXh0IHx8IFwiXCIgfX1cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctdGVtcGxhdGUgI2FzSFRNTFxuICAgICAgPjxzcGFuIGRhdGEtdGVzdGlkPVwiaHRtbC1jb250ZW50XCIgW2lubmVySFRNTF09XCJtZXNzYWdlVGV4dFwiPjwvc3BhblxuICAgID48L25nLXRlbXBsYXRlPlxuICA8L25nLXRlbXBsYXRlPlxuPC9wPlxuIl19