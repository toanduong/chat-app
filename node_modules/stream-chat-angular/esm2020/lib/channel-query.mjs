/**
 * This class allows you to make paginated channel query requests.
 */
export class ChannelQuery {
    constructor(chatService, channelService, filters, sort = { last_message_at: -1 }, options = {
        limit: 25,
        state: true,
        presence: true,
        watch: true,
    }) {
        this.chatService = chatService;
        this.channelService = channelService;
        this.filters = filters;
        this.sort = sort;
        this.options = options;
    }
    async query(queryType) {
        if (queryType === 'first-page' || queryType === 'recover-state') {
            this.nextPageConfiguration = undefined;
        }
        const prevChannels = queryType === 'recover-state' ? [] : this.channelService.channels;
        let filters;
        let options;
        if (this.nextPageConfiguration) {
            if (this.nextPageConfiguration.type === 'filter') {
                filters = {
                    ...this.filters,
                    ...this.nextPageConfiguration.paginationFilter,
                };
                options = this.options;
            }
            else {
                options = {
                    ...this.options,
                    offset: this.nextPageConfiguration.offset,
                };
                filters = this.filters;
            }
        }
        else {
            filters = this.filters;
            options = this.options;
        }
        const channels = await this.chatService.chatClient.queryChannels(filters, this.sort || {}, options);
        this.setNextPageConfiguration(channels);
        const currentActiveChannel = this.channelService.activeChannel;
        if (queryType === 'recover-state' &&
            currentActiveChannel &&
            !channels.find((c) => c.cid === currentActiveChannel?.cid)) {
            try {
                await currentActiveChannel.watch();
                channels.unshift(currentActiveChannel);
            }
            catch (error) {
                this.chatService.chatClient.logger('warn', 'Unable to refetch active channel after state recover', error);
            }
        }
        return {
            channels: [...prevChannels, ...channels],
            hasMorePage: channels.length >= this.options.limit,
        };
    }
    setNextPageConfiguration(channelQueryResult) {
        if (this.customPaginator) {
            this.nextPageConfiguration = this.customPaginator(channelQueryResult);
        }
        else {
            this.nextPageConfiguration = {
                type: 'offset',
                offset: (this.nextPageConfiguration?.type === 'offset'
                    ? this.nextPageConfiguration.offset
                    : 0) + channelQueryResult.length,
            };
        }
    }
}
//# sourceMappingURL=data:application/json;base64,