import { Injectable } from '@angular/core';
import { en } from '../assets/i18n/en';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
/**
 * The `StreamI18nService` can be used to customize the labels of the chat UI. Our [translation guide](/chat/docs/sdk/angular/concepts/translation/) covers this topic in detail.
 */
export class StreamI18nService {
    constructor(translteService) {
        this.translteService = translteService;
    }
    /**
     * Registers the translation to the [ngx-translate](https://github.com/ngx-translate/core) TranslateService.
     * @param lang The language key to register the translation to
     * @param overrides An object which keys are translation keys, and the values are custom translations
     */
    setTranslation(lang = 'en', overrides) {
        if (!this.translteService.defaultLang) {
            this.translteService.defaultLang = lang;
        }
        this.translteService.setTranslation(lang, { streamChat: { ...en.streamChat, ...overrides } }, true);
    }
}
StreamI18nService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: StreamI18nService, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });
StreamI18nService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: StreamI18nService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: StreamI18nService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLWkxOG4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9zdHJlYW0taTE4bi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7QUFFdkM7O0dBRUc7QUFJSCxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQW9CLGVBQWlDO1FBQWpDLG9CQUFlLEdBQWYsZUFBZSxDQUFrQjtJQUFHLENBQUM7SUFFekQ7Ozs7T0FJRztJQUNILGNBQWMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFFLFNBQXFDO1FBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRTtZQUNyQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FDakMsSUFBSSxFQUNKLEVBQUUsVUFBVSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsU0FBUyxFQUFFLEVBQUUsRUFDbEQsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDOzs4R0FqQlUsaUJBQWlCO2tIQUFqQixpQkFBaUIsY0FGaEIsTUFBTTsyRkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xuaW1wb3J0IHsgZW4gfSBmcm9tICcuLi9hc3NldHMvaTE4bi9lbic7XG5cbi8qKlxuICogVGhlIGBTdHJlYW1JMThuU2VydmljZWAgY2FuIGJlIHVzZWQgdG8gY3VzdG9taXplIHRoZSBsYWJlbHMgb2YgdGhlIGNoYXQgVUkuIE91ciBbdHJhbnNsYXRpb24gZ3VpZGVdKC9jaGF0L2RvY3Mvc2RrL2FuZ3VsYXIvY29uY2VwdHMvdHJhbnNsYXRpb24vKSBjb3ZlcnMgdGhpcyB0b3BpYyBpbiBkZXRhaWwuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBTdHJlYW1JMThuU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsdGVTZXJ2aWNlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgdGhlIHRyYW5zbGF0aW9uIHRvIHRoZSBbbmd4LXRyYW5zbGF0ZV0oaHR0cHM6Ly9naXRodWIuY29tL25neC10cmFuc2xhdGUvY29yZSkgVHJhbnNsYXRlU2VydmljZS5cbiAgICogQHBhcmFtIGxhbmcgVGhlIGxhbmd1YWdlIGtleSB0byByZWdpc3RlciB0aGUgdHJhbnNsYXRpb24gdG9cbiAgICogQHBhcmFtIG92ZXJyaWRlcyBBbiBvYmplY3Qgd2hpY2gga2V5cyBhcmUgdHJhbnNsYXRpb24ga2V5cywgYW5kIHRoZSB2YWx1ZXMgYXJlIGN1c3RvbSB0cmFuc2xhdGlvbnNcbiAgICovXG4gIHNldFRyYW5zbGF0aW9uKGxhbmcgPSAnZW4nLCBvdmVycmlkZXM/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9KSB7XG4gICAgaWYgKCF0aGlzLnRyYW5zbHRlU2VydmljZS5kZWZhdWx0TGFuZykge1xuICAgICAgdGhpcy50cmFuc2x0ZVNlcnZpY2UuZGVmYXVsdExhbmcgPSBsYW5nO1xuICAgIH1cbiAgICB0aGlzLnRyYW5zbHRlU2VydmljZS5zZXRUcmFuc2xhdGlvbihcbiAgICAgIGxhbmcsXG4gICAgICB7IHN0cmVhbUNoYXQ6IHsgLi4uZW4uc3RyZWFtQ2hhdCwgLi4ub3ZlcnJpZGVzIH0gfSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG59XG4iXX0=