import { Component, Input, } from '@angular/core';
import { filter } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../chat-client.service";
import * as i2 from "@angular/common";
/**
 * The `Avatar` component displays the provided image, with fallback to the first letter of the optional name input.
 */
export class AvatarComponent {
    constructor(chatClientService, ngZone, cdRef) {
        this.chatClientService = chatClientService;
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        /**
         * If a channel avatar is displayed, and if the channel has exactly two members a green dot is displayed if the other member is online. Set this flag to `false` to turn off this behavior.
         */
        this.showOnlineIndicator = true;
        /**
         * If channel/user image isn't provided the initials of the name of the channel/user is shown instead, you can choose how the initals should be computed
         */
        this.initialsType = 'first-letter-of-first-word';
        this.isError = false;
        this.isOnline = false;
        this.initials = '';
        this.isViewInited = false;
        this.subscriptions = [];
    }
    ngOnInit() {
        this.subscriptions.push(this.chatClientService.user$.subscribe((u) => {
            if (u?.id !== this.userId) {
                this.userId = u?.id;
                if (this.type || this.channel || this.name) {
                    this.setInitials();
                    this.setFallbackChannelImage();
                    this.updateIsOnlineSubscription();
                }
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
        }));
    }
    ngOnChanges(changes) {
        if (changes['channel']) {
            this.updateIsOnlineSubscription();
        }
        if (changes.type || changes.name || changes.channel) {
            this.setInitials();
        }
        if (changes.type || changes.channel) {
            this.setFallbackChannelImage();
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    setFallbackChannelImage() {
        if (this.type !== 'channel') {
            this.fallbackChannelImage = undefined;
        }
        else {
            const otherMember = this.getOtherMemberIfOneToOneChannel();
            if (otherMember) {
                this.fallbackChannelImage = otherMember.image;
            }
            else {
                this.fallbackChannelImage = undefined;
            }
        }
    }
    setInitials() {
        let result = '';
        if (this.type === 'user') {
            result = this.name?.toString() || '';
        }
        else if (this.type === 'channel') {
            if (this.channel?.data?.name) {
                result = this.channel?.data?.name;
            }
            else {
                const otherMember = this.getOtherMemberIfOneToOneChannel();
                if (otherMember) {
                    result = otherMember.name || otherMember.id || '';
                }
                else {
                    result = '#';
                }
            }
        }
        const words = result.split(' ');
        let initials;
        if (this.initialsType === 'first-letter-of-each-word') {
            initials = words.map((w) => w.charAt(0) || '').join('');
        }
        else {
            initials = words[0].charAt(0) || '';
        }
        this.initials = initials;
    }
    updateIsOnlineSubscription() {
        if (this.channel) {
            const otherMember = this.getOtherMemberIfOneToOneChannel();
            if (otherMember) {
                this.isOnline = otherMember.online || false;
                this.isOnlineSubscription = this.chatClientService.events$
                    .pipe(filter((e) => e.eventType === 'user.presence.changed'))
                    .subscribe((event) => {
                    if (event.event.user?.id === otherMember.id) {
                        this.ngZone.run(() => {
                            this.isOnline = event.event.user?.online || false;
                        });
                    }
                });
            }
            else {
                this.isOnline = false;
                this.isOnlineSubscription?.unsubscribe();
            }
        }
        else {
            this.isOnline = false;
            this.isOnlineSubscription?.unsubscribe();
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    getOtherMemberIfOneToOneChannel() {
        const otherMembers = Object.values(this.channel?.state?.members || {}).filter((m) => m.user_id !== this.userId);
        if (otherMembers.length === 1) {
            return otherMembers[0].user;
        }
        else {
            return undefined;
        }
    }
}
AvatarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AvatarComponent, deps: [{ token: i1.ChatClientService }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AvatarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: AvatarComponent, selector: "stream-avatar", inputs: { name: "name", imageUrl: "imageUrl", location: "location", channel: "channel", user: "user", type: "type", showOnlineIndicator: "showOnlineIndicator", initialsType: "initialsType" }, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"str-chat__avatar str-chat-angular__avatar str-chat__avatar--circle stream-chat__avatar--{{\n    location\n  }} stream-chat__avatar--{{\n    initialsType === 'first-letter-of-first-word'\n      ? 'one-letter'\n      : 'multiple-letters'\n  }}\"\n  title=\"{{ name }}\"\n>\n  <img\n    *ngIf=\"(imageUrl || fallbackChannelImage) && !isError; else fallback\"\n    class=\"str-chat__avatar-image\"\n    data-testid=\"avatar-img\"\n    fetchpriority=\"high\"\n    src=\"{{ imageUrl || fallbackChannelImage }}\"\n    alt=\"{{ initials }}\"\n    (error)=\"isError = true\"\n  />\n  <ng-template #fallback>\n    <div data-testid=\"fallback-img\" class=\"str-chat__avatar-fallback\">\n      {{ initials }}\n    </div>\n  </ng-template>\n  <div\n    *ngIf=\"isOnline && showOnlineIndicator\"\n    data-testid=\"online-indicator\"\n    class=\"str-chat__avatar--online-indicator\"\n  ></div>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AvatarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-avatar', template: "<div\n  class=\"str-chat__avatar str-chat-angular__avatar str-chat__avatar--circle stream-chat__avatar--{{\n    location\n  }} stream-chat__avatar--{{\n    initialsType === 'first-letter-of-first-word'\n      ? 'one-letter'\n      : 'multiple-letters'\n  }}\"\n  title=\"{{ name }}\"\n>\n  <img\n    *ngIf=\"(imageUrl || fallbackChannelImage) && !isError; else fallback\"\n    class=\"str-chat__avatar-image\"\n    data-testid=\"avatar-img\"\n    fetchpriority=\"high\"\n    src=\"{{ imageUrl || fallbackChannelImage }}\"\n    alt=\"{{ initials }}\"\n    (error)=\"isError = true\"\n  />\n  <ng-template #fallback>\n    <div data-testid=\"fallback-img\" class=\"str-chat__avatar-fallback\">\n      {{ initials }}\n    </div>\n  </ng-template>\n  <div\n    *ngIf=\"isOnline && showOnlineIndicator\"\n    data-testid=\"online-indicator\"\n    class=\"str-chat__avatar--online-indicator\"\n  ></div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], imageUrl: [{
                type: Input
            }], location: [{
                type: Input
            }], channel: [{
                type: Input
            }], user: [{
                type: Input
            }], type: [{
                type: Input
            }], showOnlineIndicator: [{
                type: Input
            }], initialsType: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,