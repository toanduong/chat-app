import { Component, Input } from '@angular/core';
import { filter } from 'rxjs/operators';
import { getChannelDisplayText } from '../get-channel-display-text';
import { getMessageTranslation } from '../get-message-translation';
import { getReadBy } from '../read-by';
import { isOnSeparateDate } from '../is-on-separate-date';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../chat-client.service";
import * as i3 from "../message.service";
import * as i4 from "../custom-templates.service";
import * as i5 from "../date-parser.service";
import * as i6 from "@angular/common";
import * as i7 from "../avatar-placeholder/avatar-placeholder.component";
import * as i8 from "../icon/icon-placeholder/icon-placeholder.component";
import * as i9 from "@ngx-translate/core";
/**
 * The `ChannelPreview` component displays a channel preview in the channel list, it consists of the image, name and latest message of the channel.
 */
export class ChannelPreviewComponent {
    constructor(channelService, ngZone, chatClientService, messageService, customTemplatesService, dateParser) {
        this.channelService = channelService;
        this.ngZone = ngZone;
        this.chatClientService = chatClientService;
        this.customTemplatesService = customTemplatesService;
        this.dateParser = dateParser;
        this.isActive = false;
        this.isUnreadMessageWasCalled = false;
        this.isUnread = false;
        this.latestMessageText = 'streamChat.Nothing yet...';
        this.subscriptions = [];
        this.canSendReadEvents = true;
        this.displayAs = messageService.displayAs;
    }
    ngOnInit() {
        this.subscriptions.push(this.chatClientService.user$.subscribe((user) => {
            if (user?.id !== this.userId) {
                this.userId = user?.id;
            }
        }));
        this.subscriptions.push(this.channelService.activeChannel$.subscribe((activeChannel) => (this.isActive = activeChannel?.id === this.channel?.id)));
        const messages = this.channel?.state?.latestMessages;
        if (messages && messages.length > 0) {
            this.setLatestMessage(messages[messages.length - 1]);
        }
        this.updateUnreadState();
        const capabilities = this.channel?.data?.own_capabilities || [];
        this.canSendReadEvents = capabilities.indexOf('read-events') !== -1;
        this.subscriptions.push(this.channel.on('message.new', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('message.updated', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('message.deleted', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('channel.truncated', this.handleMessageEvent.bind(this)));
        this.subscriptions.push(this.channel.on('message.read', () => this.ngZone.run(() => {
            this.isUnreadMessageWasCalled = false;
            this.updateUnreadState();
        })));
        this.subscriptions.push(this.chatClientService.events$
            .pipe(filter((e) => e.eventType === 'notification.mark_unread' &&
            this.channel.id === e.event?.channel_id))
            .subscribe(() => {
            this.ngZone.run(() => {
                this.isUnreadMessageWasCalled = true;
                this.updateUnreadState();
            });
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    get avatarImage() {
        return this.channel?.data?.image;
    }
    get avatarName() {
        return this.channel?.data?.name;
    }
    get title() {
        if (!this.channel) {
            return '';
        }
        return getChannelDisplayText(this.channel, this.chatClientService.chatClient.user);
    }
    setAsActiveChannel() {
        void this.channelService.setAsActiveChannel(this.channel);
    }
    handleMessageEvent(event) {
        this.ngZone.run(() => {
            if (this.channel?.state.latestMessages.length === 0) {
                this.latestMessage = undefined;
                this.latestMessageStatus = undefined;
                this.latestMessageText = 'streamChat.Nothing yet...';
                this.latestMessageTime = undefined;
                return;
            }
            const latestMessage = this.channel?.state.latestMessages[this.channel?.state.latestMessages.length - 1];
            if (!event.message || latestMessage?.id !== event.message.id) {
                return;
            }
            this.setLatestMessage(latestMessage);
            this.updateUnreadState();
        });
    }
    setLatestMessage(message) {
        this.latestMessage = message;
        if (message?.deleted_at) {
            this.latestMessageText = 'streamChat.Message deleted';
        }
        else if (message?.text) {
            this.latestMessageText =
                getMessageTranslation(message, this.channel, this.chatClientService.chatClient.user) || message.text;
        }
        else if (message?.attachments && message.attachments.length) {
            this.latestMessageText = 'streamChat.🏙 Attachment...';
        }
        if (this.latestMessage && this.latestMessage.type === 'regular') {
            this.latestMessageTime = isOnSeparateDate(new Date(), this.latestMessage.created_at)
                ? this.dateParser.parseDate(this.latestMessage.created_at)
                : this.dateParser.parseTime(this.latestMessage.created_at);
        }
        else {
            this.latestMessageTime = undefined;
        }
    }
    updateUnreadState() {
        if (this.channel &&
            this.latestMessage &&
            this.latestMessage.user?.id === this.userId &&
            this.latestMessage.status === 'received' &&
            this.latestMessage.type === 'regular') {
            this.latestMessageStatus =
                getReadBy(this.latestMessage, this.channel).length > 0
                    ? 'read'
                    : 'delivered';
        }
        else {
            this.latestMessageStatus = undefined;
        }
        if ((this.isActive && !this.isUnreadMessageWasCalled) ||
            !this.canSendReadEvents) {
            this.unreadCount = 0;
            this.isUnread = false;
            return;
        }
        this.unreadCount = this.channel.countUnread();
        this.isUnread = !!this.unreadCount;
    }
}
ChannelPreviewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChannelPreviewComponent, deps: [{ token: i1.ChannelService }, { token: i0.NgZone }, { token: i2.ChatClientService }, { token: i3.MessageService }, { token: i4.CustomTemplatesService }, { token: i5.DateParserService }], target: i0.ɵɵFactoryTarget.Component });
ChannelPreviewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: ChannelPreviewComponent, selector: "stream-channel-preview", inputs: { channel: "channel" }, ngImport: i0, template: "<button\n  class=\"str-chat__channel-preview-messenger str-chat__channel-preview\"\n  data-testid=\"channel-preview-container\"\n  [class.str-chat__channel-preview-messenger--active]=\"isActive\"\n  [class.str-chat__channel-preview--active]=\"isActive\"\n  [class.str-chat__channel-preview-messenger--unread]=\"isUnread\"\n  (click)=\"setAsActiveChannel()\"\n>\n  <div class=\"str-chat__channel-preview-messenger--left\">\n    <stream-avatar-placeholder\n      type=\"channel\"\n      location=\"channel-preview\"\n      name=\"{{ avatarName }}\"\n      imageUrl=\"{{ avatarImage }}\"\n      [channel]=\"channel\"\n    ></stream-avatar-placeholder>\n  </div>\n  <div\n    class=\"str-chat__channel-preview-messenger--right str-chat__channel-preview-end\"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"\n        (customTemplatesService.channelPreviewInfoTemplate$ | async) ||\n          defaultChannelInfo;\n        context: {\n          channelDisplayTitle: title,\n          channel: channel,\n          unreadCount: unreadCount,\n          latestMessageText: latestMessageText,\n          latestMessageStatus: latestMessageStatus,\n          latestMessageTime: latestMessageTime,\n          latestMessage: latestMessage\n        }\n      \"\n    ></ng-container>\n    <ng-template\n      #defaultChannelInfo\n      let-channelDisplayTitle=\"channelDisplayTitle\"\n      let-unreadCount=\"unreadCount\"\n      let-latestMessageText=\"latestMessageText\"\n      let-latestMessageStatus=\"latestMessageStatus\"\n      let-latestMessageTime=\"latestMessageTime\"\n    >\n      <div class=\"str-chat__channel-preview-end-first-row\">\n        <div class=\"str-chat__channel-preview-messenger--name\">\n          <span data-testid=\"channel-preview-title\">{{\n            channelDisplayTitle\n          }}</span>\n        </div>\n        <div\n          *ngIf=\"unreadCount\"\n          data-testid=\"unread-badge\"\n          class=\"str-chat__channel-preview-unread-badge\"\n        >\n          {{ unreadCount }}\n        </div>\n      </div>\n      <div class=\"str-chat__channel-preview-end-second-row\">\n        <div\n          data-testid=\"latest-message\"\n          class=\"str-chat__channel-preview-messenger--last-message\"\n        >\n          <ng-container *ngIf=\"displayAs === 'text'; else asHTML\">\n            {{ latestMessageText | translate }}\n          </ng-container>\n          <ng-template #asHTML>\n            <span\n              data-testid=\"html-content\"\n              [innerHTML]=\"latestMessageText | translate\"\n            ></span>\n          </ng-template>\n        </div>\n        <div\n          *ngIf=\"latestMessageStatus\"\n          data-testid=\"latest-message-status\"\n          class=\"str-chat__channel-preview-messenger--status str-chat__channel-preview-messenger--status-{{\n            latestMessageStatus\n          }}\"\n        >\n          <stream-icon-placeholder\n            [icon]=\"latestMessageStatus === 'delivered' ? 'delivered' : 'read'\"\n          ></stream-icon-placeholder>\n        </div>\n        <div\n          *ngIf=\"latestMessageTime\"\n          data-testid=\"latest-message-time\"\n          class=\"str-chat__channel-preview-messenger--time\"\n        >\n          {{ latestMessageTime }}\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</button>\n", dependencies: [{ kind: "directive", type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i7.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { kind: "component", type: i8.IconPlaceholderComponent, selector: "stream-icon-placeholder", inputs: ["icon"] }, { kind: "pipe", type: i6.AsyncPipe, name: "async" }, { kind: "pipe", type: i9.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChannelPreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-channel-preview', template: "<button\n  class=\"str-chat__channel-preview-messenger str-chat__channel-preview\"\n  data-testid=\"channel-preview-container\"\n  [class.str-chat__channel-preview-messenger--active]=\"isActive\"\n  [class.str-chat__channel-preview--active]=\"isActive\"\n  [class.str-chat__channel-preview-messenger--unread]=\"isUnread\"\n  (click)=\"setAsActiveChannel()\"\n>\n  <div class=\"str-chat__channel-preview-messenger--left\">\n    <stream-avatar-placeholder\n      type=\"channel\"\n      location=\"channel-preview\"\n      name=\"{{ avatarName }}\"\n      imageUrl=\"{{ avatarImage }}\"\n      [channel]=\"channel\"\n    ></stream-avatar-placeholder>\n  </div>\n  <div\n    class=\"str-chat__channel-preview-messenger--right str-chat__channel-preview-end\"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"\n        (customTemplatesService.channelPreviewInfoTemplate$ | async) ||\n          defaultChannelInfo;\n        context: {\n          channelDisplayTitle: title,\n          channel: channel,\n          unreadCount: unreadCount,\n          latestMessageText: latestMessageText,\n          latestMessageStatus: latestMessageStatus,\n          latestMessageTime: latestMessageTime,\n          latestMessage: latestMessage\n        }\n      \"\n    ></ng-container>\n    <ng-template\n      #defaultChannelInfo\n      let-channelDisplayTitle=\"channelDisplayTitle\"\n      let-unreadCount=\"unreadCount\"\n      let-latestMessageText=\"latestMessageText\"\n      let-latestMessageStatus=\"latestMessageStatus\"\n      let-latestMessageTime=\"latestMessageTime\"\n    >\n      <div class=\"str-chat__channel-preview-end-first-row\">\n        <div class=\"str-chat__channel-preview-messenger--name\">\n          <span data-testid=\"channel-preview-title\">{{\n            channelDisplayTitle\n          }}</span>\n        </div>\n        <div\n          *ngIf=\"unreadCount\"\n          data-testid=\"unread-badge\"\n          class=\"str-chat__channel-preview-unread-badge\"\n        >\n          {{ unreadCount }}\n        </div>\n      </div>\n      <div class=\"str-chat__channel-preview-end-second-row\">\n        <div\n          data-testid=\"latest-message\"\n          class=\"str-chat__channel-preview-messenger--last-message\"\n        >\n          <ng-container *ngIf=\"displayAs === 'text'; else asHTML\">\n            {{ latestMessageText | translate }}\n          </ng-container>\n          <ng-template #asHTML>\n            <span\n              data-testid=\"html-content\"\n              [innerHTML]=\"latestMessageText | translate\"\n            ></span>\n          </ng-template>\n        </div>\n        <div\n          *ngIf=\"latestMessageStatus\"\n          data-testid=\"latest-message-status\"\n          class=\"str-chat__channel-preview-messenger--status str-chat__channel-preview-messenger--status-{{\n            latestMessageStatus\n          }}\"\n        >\n          <stream-icon-placeholder\n            [icon]=\"latestMessageStatus === 'delivered' ? 'delivered' : 'read'\"\n          ></stream-icon-placeholder>\n        </div>\n        <div\n          *ngIf=\"latestMessageTime\"\n          data-testid=\"latest-message-time\"\n          class=\"str-chat__channel-preview-messenger--time\"\n        >\n          {{ latestMessageTime }}\n        </div>\n      </div>\n    </ng-template>\n  </div>\n</button>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i0.NgZone }, { type: i2.ChatClientService }, { type: i3.MessageService }, { type: i4.CustomTemplatesService }, { type: i5.DateParserService }]; }, propDecorators: { channel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,