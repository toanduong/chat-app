export {};
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../projects/stream-chat-angular/src/lib/types.ts"],"names":[],"mappings":"","sourcesContent":["import { TemplateRef } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport type {\n  Attachment,\n  Channel,\n  ChannelFilters,\n  ChannelMemberResponse,\n  CommandResponse,\n  Event,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  LiteralStringForUnion,\n  MessageResponseBase,\n  Mute,\n  ReactionGroupResponse,\n  ReactionResponse,\n  User,\n  UserResponse,\n} from 'stream-chat';\nimport { AttachmentService } from './attachment.service';\nimport { Icon } from './icon/icon.component';\n\nexport type UnknownType = Record<string, unknown>;\n\nexport type CustomTrigger = {\n  [key: string]: {\n    componentProps: UnknownType;\n    data: UnknownType;\n  };\n};\n\nexport type DefaultStreamChatGenerics = ExtendableGenerics & {\n  attachmentType: DefaultAttachmentType;\n  channelType: DefaultChannelType;\n  commandType: LiteralStringForUnion;\n  eventType: UnknownType;\n  messageType: DefaultMessageType;\n  reactionType: UnknownType;\n  userType: DefaultUserType;\n};\n\nexport type DefaultAttachmentType = UnknownType & {\n  asset_url?: string;\n  id?: string;\n  images?: Array<Attachment<DefaultStreamChatGenerics>>;\n  mime_type?: string;\n  isCustomAttachment?: boolean;\n};\n\nexport type DefaultChannelType = UnknownType & {\n  image?: string;\n  member_count?: number;\n  subtitle?: string;\n};\n\nexport type DefaultCommandType = LiteralStringForUnion;\n\nexport type DefaultMessageType = UnknownType & {\n  customType?: 'channel.intro' | 'message.date';\n  date?: string | Date;\n  errorStatusCode?: number;\n  event?: Event<DefaultStreamChatGenerics>;\n  unread?: boolean;\n  readBy: UserResponse<DefaultStreamChatGenerics>[];\n  translation?: string;\n  quoted_message?: MessageResponseBase<DefaultStreamChatGenerics>;\n};\n\nexport type DefaultUserTypeInternal = {\n  image?: string;\n  status?: string;\n};\n\nexport type DefaultUserType = UnknownType &\n  DefaultUserTypeInternal & {\n    mutes?: Array<Mute<DefaultStreamChatGenerics>>;\n  };\n\nexport type StreamMessage<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = FormatMessageResponse<T>;\n\nexport type AttachmentUploadErrorReason =\n  | 'file-size'\n  | 'file-extension'\n  | 'unknown';\n\nexport type AttachmentUpload<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  file: File;\n  state: 'error' | 'success' | 'uploading';\n  errorReason?: AttachmentUploadErrorReason;\n  errorExtraInfo?: { param: string }[];\n  url?: string;\n  type: 'image' | 'file' | 'video' | 'voiceRecording';\n  previewUri?: string | ArrayBuffer;\n  thumb_url?: string;\n  extraData?: Partial<Attachment<T>>;\n  fromAttachment?: Attachment<T>;\n};\n\nexport type MentionAutcompleteListItemContext = {\n  item: MentionAutcompleteListItem;\n};\n\nexport type CommandAutocompleteListItemContext = {\n  item: ComandAutocompleteListItem;\n};\n\nexport type MentionAutcompleteListItem = (\n  | ChannelMemberResponse\n  | UserResponse\n) & {\n  autocompleteLabel: string;\n};\n\nexport type ComandAutocompleteListItem = CommandResponse & {\n  autocompleteLabel: string;\n};\n\nexport type NotificationType = 'success' | 'error' | 'info';\n\nexport type NotificationPayload<T = object> = {\n  id: string;\n  type: NotificationType;\n  text?: string;\n  translateParams?: object;\n  template?: TemplateRef<T>;\n  templateContext?: T;\n  dismissFn: () => void;\n};\n\nexport type ChannelPreviewContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  channel: Channel<T>;\n};\n\nexport type ChannelPreviewInfoContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = ChannelPreviewContext & {\n  latestMessage?: StreamMessage<T>;\n  /**\n   * The text of the latest message, or some meta information (for example: \"Nothing yet\")\n   */\n  latestMessageText: string;\n  /**\n   * The title of the channel, or the name of the channel members\n   */\n  channelDisplayTitle: string;\n  /**\n   * The status of the last message (only available if the last message was sent by the current user)\n   */\n  latestMessageStatus?: 'delivered' | 'read';\n  /**\n   * The time of the last message (formatted to a user-friendly string)\n   */\n  latestMessageTime?: string;\n  unreadCount: number;\n};\n\nexport type MentionTemplateContext = {\n  content: string;\n  user: UserResponse;\n};\n\nexport type EmojiPickerContext = {\n  emojiInput$: Subject<string>;\n};\n\nexport type TypingIndicatorContext = {\n  usersTyping$: Observable<UserResponse<DefaultStreamChatGenerics>[]>;\n};\n\nexport type MessageContext = {\n  message: StreamMessage | undefined;\n  enabledMessageActions: string[];\n  isLastSentMessage: boolean | undefined;\n  mode: 'thread' | 'main';\n  isHighlighted: boolean;\n  customActions: CustomMessageActionItem[];\n  scroll$?: Observable<void>;\n};\n\nexport type ChannelActionsContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = { channel: Channel<T> };\n\nexport type CustomAttachmentListContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  messageId: string;\n  attachments: Attachment<T>[];\n  parentMessageId?: string;\n};\n\nexport type AttachmentListContext = CustomAttachmentListContext & {\n  imageModalStateChangeHandler?: (state: 'opened' | 'closed') => void;\n};\n\nexport type AvatarType = 'channel' | 'user';\n\nexport type AvatarLocation =\n  | 'channel-preview'\n  | 'channel-header'\n  | 'message-sender'\n  | 'message-reader'\n  | 'quoted-message-sender'\n  | 'autocomplete-item'\n  | 'typing-indicator'\n  /**\n   * @deprecated this will be renamed to user-list in the next major release\n   */\n  | 'reaction';\n\nexport type AvatarContext = {\n  name: string | undefined;\n  imageUrl: string | undefined;\n  type: AvatarType | undefined;\n  location: AvatarLocation | undefined;\n  channel?: Channel<DefaultStreamChatGenerics>;\n  user?: User<DefaultStreamChatGenerics>;\n  initialsType?: 'first-letter-of-first-word' | 'first-letter-of-each-word';\n  showOnlineIndicator?: boolean;\n};\n\nexport type AttachmentPreviewListContext = {\n  attachmentUploads$: Observable<AttachmentUpload[]> | undefined;\n  retryUploadHandler: (f: File) => void;\n  deleteUploadHandler: (u: AttachmentUpload) => void;\n  service: AttachmentService;\n};\n\nexport type IconContext = {\n  icon: Icon | undefined;\n};\n\nexport type MessageActionsBoxContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  isMine: boolean;\n  message: StreamMessage<T> | undefined;\n  enabledActions: string[];\n  messageTextHtmlElement: HTMLElement | undefined;\n};\n\nexport type MessageActionHandlerExtraParams = {\n  isMine: boolean;\n  messageTextHtmlElement?: HTMLElement;\n};\n\nexport type MessageActionHandler<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = (\n  message: StreamMessage<T>,\n  params: MessageActionHandlerExtraParams\n) => void;\n\nexport type MessageActionBoxItemContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  actionName: string;\n  actionLabelOrTranslationKey: ((message: StreamMessage<T>) => string) | string;\n  message: StreamMessage<T>;\n  actionHandlerExtraParams: MessageActionHandlerExtraParams;\n  actionHandler: MessageActionHandler<T>;\n};\n\nexport type MessageReactionActionItem<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  actionName: 'react';\n  isVisible: (\n    enabledActions: string[],\n    isMine: boolean,\n    message: StreamMessage<T>\n  ) => boolean;\n};\n\ntype MessageActionItemBase<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  actionLabelOrTranslationKey: ((message: StreamMessage<T>) => string) | string;\n  isVisible: (\n    enabledActions: string[],\n    isMine: boolean,\n    message: StreamMessage<T>\n  ) => boolean;\n  actionHandler: MessageActionHandler;\n};\n\nexport type MessageActionItem<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = MessageActionItemBase<T> & {\n  actionName:\n    | 'quote'\n    | 'pin'\n    | 'flag'\n    | 'edit'\n    | 'delete'\n    | 'mark-unread'\n    | 'thread-reply'\n    | 'copy-message-text';\n};\n\nexport type CustomMessageActionItem<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = MessageActionItemBase<T> & {\n  actionName: string;\n};\n\nexport type MessageReactionsSelectorContext = {\n  messageId: string | undefined;\n  ownReactions: ReactionResponse<DefaultStreamChatGenerics>[];\n};\n\nexport type MessageReactionsContext = {\n  messageId: string | undefined;\n  /** @deprecated use `messageReactionGroups` */\n  messageReactionCounts: { [key in MessageReactionType]?: number };\n  /** @deprecated you can fetch the reactions using [`chatService.chatClient.queryReactions()`](/chat/docs/javascript/send_reaction/&q=queryReactions#query-reactions) */\n  latestReactions: ReactionResponse<DefaultStreamChatGenerics>[];\n  ownReactions: ReactionResponse<DefaultStreamChatGenerics>[];\n  messageReactionGroups: {\n    [key in MessageReactionType]: ReactionGroupResponse;\n  };\n};\n\nexport type ModalContext = {\n  isOpen: boolean;\n  isOpenChangeHandler: (isOpen: boolean) => void;\n  content: TemplateRef<void>;\n};\n\nexport type NotificationContext = {\n  type: NotificationType | undefined;\n  content: TemplateRef<void> | undefined;\n};\n\nexport type ThreadHeaderContext = {\n  parentMessage: StreamMessage | undefined;\n  closeThreadHandler: () => void;\n};\n\nexport type MessageReactionType = string;\n\nexport type AttachmentConfigration = {\n  url: string;\n  height: string;\n  width: string;\n};\n\nexport type ImageAttachmentConfiguration = AttachmentConfigration & {\n  originalHeight: number;\n  originalWidth: number;\n};\n\nexport type VideoAttachmentConfiguration = ImageAttachmentConfiguration & {\n  thumbUrl?: string;\n};\n\nexport type DeliveredStatusContext = {\n  message: StreamMessage;\n};\n\nexport type SendingStatusContext = {\n  message: StreamMessage;\n};\n\nexport type CustomMetadataContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  message: StreamMessage<T>;\n};\n\nexport type ReadStatusContext = {\n  message: StreamMessage;\n  readByText: string;\n};\n\nexport type ChannelHeaderInfoContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = { channel: Channel<T> };\n\nexport type CustomAttachmentUploadContext = {\n  isMultipleFileUploadEnabled: boolean | undefined;\n  attachmentService: AttachmentService;\n};\n\nexport type AttachmentContext = {\n  attachment: Attachment<DefaultStreamChatGenerics>;\n};\n\nexport type SystemMessageContext = MessageContext & {\n  parsedDate: string | undefined;\n};\n\nexport type DateSeparatorContext = {\n  date: Date;\n  parsedDate: string;\n};\n\nexport type UnreadMessagesIndicatorContext = {\n  unreadCount: number;\n};\n\nexport type UnreadMessagesNotificationContext =\n  UnreadMessagesIndicatorContext & {\n    onJump: () => void;\n    onDismiss: () => void;\n  };\n\nexport type ChannelQueryState = {\n  state: 'in-progress' | 'success' | 'error';\n  // No type def from stream-chat\n  error?: unknown;\n};\n\nexport type MessageInput<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  text: string;\n  attachments: Attachment<T>[];\n  mentionedUsers: UserResponse<T>[];\n  parentId: string | undefined;\n  quotedMessageId: string | undefined;\n  customData: undefined | Partial<T['messageType']>;\n};\n\nexport type OffsetNextPageConfiguration = {\n  type: 'offset';\n  offset: number;\n};\n\nexport type FiltertNextPageConfiguration<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  type: 'filter';\n  paginationFilter: ChannelFilters<T>;\n};\n\nexport type NextPageConfiguration =\n  | OffsetNextPageConfiguration\n  | FiltertNextPageConfiguration\n  | undefined;\n\nexport type MessageReactionClickDetails = {\n  messageId: string;\n  reactionType: string;\n};\n\nexport type MessageActionsClickDetails<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = MessageActionsBoxContext<T> & { customActions: CustomMessageActionItem[] };\n\nexport type GroupStyleOptions = {\n  noGroupByUser?: boolean;\n  lastReadMessageId?: string;\n  noGroupByReadState?: boolean;\n};\n\nexport type ChannelQueryType = 'first-page' | 'next-page' | 'recover-state';\n\nexport type ChannelQueryResult<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  channels: Channel<T>[];\n  hasMorePage: boolean;\n};\n\nexport type VirtualizedListScrollPosition = 'top' | 'bottom' | 'middle';\n\nexport type VirtualizedListQueryState = {\n  state: 'loading-top' | 'loading-bottom' | 'success' | 'error';\n  error?: unknown;\n};\n\nexport type VirtualizedListQueryDirection = 'top' | 'bottom';\n\nexport type VirtualizedListVerticalItemPosition = 'top' | 'bottom' | 'middle';\n\nexport type AudioRecording = MediaRecording & { waveform_data: number[] };\n\nexport type MediaRecording = {\n  recording: File;\n  duration: number;\n  mime_type: string;\n  asset_url: string | ArrayBuffer | undefined;\n};\n\nexport type CustomAttachmentPreviewListContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  attachmentService: AttachmentService<T>;\n};\n\nexport type ThreadReplyButtonContext<\n  T extends DefaultStreamChatGenerics = DefaultStreamChatGenerics\n> = {\n  message: StreamMessage<T>;\n};\n\nexport type CustomAutocompleteItemContext = {\n  item: CustomAutocompleteItem;\n};\n\nexport type CustomAutocompleteItem = {\n  /**\n   * This is the text that will be inserted into the message input once a user selects an option (appended after the trigger character)\n   */\n  autocompleteLabel: string;\n};\n\nexport type CustomAutocomplete = {\n  /**\n   * The character that will trigger the autocomplete (for example #)\n   *\n   * The SDK supports @ and / by default, so you can't use those\n   */\n  triggerCharacter: string;\n  /**\n   * The HTML template to display an item in the autocomplete list\n   */\n  templateRef: TemplateRef<{ item: CustomAutocompleteItem }>;\n  /**\n   * Set to `true` if space characters can be part of the `autocompleteLabel`\n   */\n  allowSpace: boolean;\n  /**\n   * The options to choose from\n   *\n   * In case you want to use dynamic/server-side filtering, use `updateOptions` instead\n   */\n  options: CustomAutocompleteItem[];\n  /**\n   * If you want to have dynamic/server-side filtering provide a  method that will be called any time the autocomplete options should be filtered\n   * @param searchTerm the text to filter by (without the trigger character), can be an empty string\n   * @returns a promise that will resolve to the options, you should take care of error handling\n   */\n  updateOptions?: (searchTerm: string) => Promise<CustomAutocompleteItem[]>;\n};\n\nexport type MessageTextContext = {\n  message: StreamMessage | undefined | MessageResponseBase;\n  isQuoted: boolean;\n  shouldTranslate: boolean;\n};\n"]}