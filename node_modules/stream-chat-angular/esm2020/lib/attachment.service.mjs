import { Injectable } from '@angular/core';
import { createUriFromBlob, isImageFile } from './file-utils';
import { BehaviorSubject, combineLatest, map, shareReplay, take, } from 'rxjs';
import { isImageAttachment } from './is-image-attachment';
import * as i0 from "@angular/core";
import * as i1 from "./channel.service";
import * as i2 from "./notification.service";
import * as i3 from "./chat-client.service";
import * as i4 from "./message.service";
/**
 * The `AttachmentService` manages the uploads of a message input.
 *
 * You can read more about [uploads](/chat/docs/javascript/file_uploads/) in the Stream API documentation. You can use Stream's API or the dashboard to customize the [file](/chat/docs/javascript/app_setting_overview/#file-uploads) and [image upload](/chat/docs/javascript/app_setting_overview/#image-uploads) configuration.
 */
export class AttachmentService {
    constructor(channelService, notificationService, chatClientService, messageService) {
        this.channelService = channelService;
        this.notificationService = notificationService;
        this.chatClientService = chatClientService;
        this.messageService = messageService;
        /**
         * Emits the number of uploads in progress.
         *
         * You can increment and decrement this counter if you're using custom attachments and want to disable message sending until all attachments are uploaded.
         *
         * The SDK will handle updating this counter for built-in attachments, but for custom attachments you should take care of this.
         */
        this.attachmentUploadInProgressCounter$ = new BehaviorSubject(0);
        /**
         * You can get and set the list if uploaded custom attachments
         *
         * By default the SDK components won't display these, but you can provide your own `customAttachmentPreviewListTemplate$` and `customAttachmentListTemplate$` for the [`CustomTemplatesService`](/chat/docs/sdk/angular/services/CustomTemplatesService/).
         */
        this.customAttachments$ = new BehaviorSubject([]);
        /**
         * The maximum number of attachments allowed for a message.
         *
         * The maximum is 30, you can set it to lower, but not higher.
         */
        this.maxNumberOfAttachments = 30;
        this.attachmentUploadsSubject = new BehaviorSubject([]);
        this.attachmentUploads$ = this.attachmentUploadsSubject.asObservable();
        this.chatClientService.appSettings$.subscribe((appSettings) => (this.appSettings = appSettings));
        this.attachmentsCounter$ = combineLatest([
            this.attachmentUploads$,
            this.customAttachments$,
        ]).pipe(map(([attchmentUploads, customAttachments]) => {
            return (attchmentUploads.filter((u) => u.state === 'success').length +
                customAttachments.length);
        }), shareReplay(1));
        this.attachmentsCounter$.subscribe((count) => {
            if (count > this.maxNumberOfAttachments) {
                this.attachmentLimitNotificationHide =
                    this.notificationService.addPermanentNotification('streamChat.You currently have {{count}} attachments, the maximum is {{max}}', 'error', { count, max: this.maxNumberOfAttachments });
            }
            else {
                this.attachmentLimitNotificationHide?.();
            }
        });
    }
    /**
     * Resets the attachments uploads (for example after the message with the attachments sent successfully)
     */
    resetAttachmentUploads() {
        this.attachmentUploadsSubject.next([]);
        this.customAttachments$.next([]);
        this.attachmentLimitNotificationHide?.();
    }
    /**
     * Upload a voice recording
     * @param audioRecording
     * @returns A promise with true or false. If false is returned the upload was canceled because of a client side error. The error is emitted via the `NotificationService`.
     */
    async uploadVoiceRecording(audioRecording) {
        if (!this.isWithinLimit(1)) {
            return false;
        }
        if (!(await this.areAttachmentsHaveValidExtension([audioRecording.recording]))) {
            return false;
        }
        if (!(await this.areAttachmentsHaveValidSize([audioRecording.recording]))) {
            return false;
        }
        const upload = {
            file: audioRecording.recording,
            previewUri: audioRecording.asset_url,
            extraData: {
                duration: audioRecording.duration,
                waveform_data: audioRecording.waveform_data,
            },
            state: 'uploading',
            type: 'voiceRecording',
        };
        this.attachmentUploadsSubject.next([
            ...this.attachmentUploadsSubject.getValue(),
            upload,
        ]);
        await this.uploadAttachments([upload]);
        return true;
    }
    /**
     * Uploads the selected files, and creates preview for image files. The result is propagated throught the `attachmentUploads$` stream.
     * @param fileList The files selected by the user, if you have Blobs instead of Files, you can convert them with this method: https://developer.mozilla.org/en-US/docs/Web/API/File/File
     * @returns A promise with true or false. If false is returned the upload was canceled because of a client side error. The error is emitted via the `NotificationService`.
     */
    async filesSelected(fileList) {
        if (!fileList) {
            return;
        }
        const files = Array.from(fileList);
        if (!this.isWithinLimit(files.length)) {
            return false;
        }
        if (!(await this.areAttachmentsHaveValidExtension(files))) {
            return false;
        }
        if (!(await this.areAttachmentsHaveValidSize(files))) {
            return false;
        }
        const imageFiles = [];
        const dataFiles = [];
        const videoFiles = [];
        files.forEach((file) => {
            if (isImageFile(file)) {
                imageFiles.push(file);
            }
            else if (file.type.startsWith('video/')) {
                videoFiles.push(file);
            }
            else {
                dataFiles.push(file);
            }
        });
        imageFiles.forEach((f) => void this.createPreview(f));
        const newUploads = [
            ...imageFiles.map((file) => ({
                file,
                state: 'uploading',
                type: 'image',
            })),
            ...videoFiles.map((file) => ({
                file,
                state: 'uploading',
                type: 'video',
            })),
            ...dataFiles.map((file) => ({
                file,
                state: 'uploading',
                type: 'file',
            })),
        ];
        this.attachmentUploadsSubject.next([
            ...this.attachmentUploadsSubject.getValue(),
            ...newUploads,
        ]);
        await this.uploadAttachments(newUploads);
        return true;
    }
    /**
     * You can add custom `image`, `video` and `file` attachments using this method.
     *
     * Note: If you just want to use your own CDN for file uploads, you don't necessary need this method, you can just specify you own upload function in the [`ChannelService`](/chat/docs/sdk/angular/services/ChannelService/)
     * @param attachment
     */
    addAttachment(attachment) {
        attachment.isCustomAttachment = true;
        this.createFromAttachments([attachment]);
    }
    /**
     * Retries to upload an attachment.
     * @param file
     * @returns A promise with the result
     */
    async retryAttachmentUpload(file) {
        const attachmentUploads = this.attachmentUploadsSubject.getValue();
        const upload = attachmentUploads.find((u) => u.file === file);
        if (!upload) {
            return;
        }
        upload.state = 'uploading';
        this.attachmentUploadsSubject.next([...attachmentUploads]);
        await this.uploadAttachments([upload]);
    }
    /**
     * Deletes an attachment, the attachment can have any state (`error`, `uploading` or `success`).
     * @param upload
     */
    async deleteAttachment(upload) {
        const attachmentUploads = this.attachmentUploadsSubject.getValue();
        let result;
        if (upload.state === 'success' &&
            !upload.fromAttachment?.isCustomAttachment) {
            try {
                await this.channelService.deleteAttachment(upload);
                result = [...attachmentUploads];
                const index = attachmentUploads.indexOf(upload);
                result.splice(index, 1);
            }
            catch (error) {
                result = attachmentUploads;
                this.notificationService.addTemporaryNotification('streamChat.Error deleting attachment');
            }
        }
        else {
            result = [...attachmentUploads];
            const index = attachmentUploads.indexOf(upload);
            result.splice(index, 1);
        }
        this.attachmentUploadsSubject.next([...result]);
    }
    /**
     * Maps the current uploads to a format that can be sent along with the message to the Stream API.
     * @returns the attachments
     */
    mapToAttachments() {
        const attachmentUploads = this.attachmentUploadsSubject.getValue();
        const builtInAttachments = attachmentUploads
            .filter((r) => r.state === 'success')
            .map((r) => {
            let attachment = {
                type: r.type,
            };
            if (r.fromAttachment) {
                return r.fromAttachment;
            }
            else {
                attachment.mime_type = r.file?.type;
                if (r.type === 'image') {
                    attachment.fallback = r.file?.name;
                    attachment.image_url = r.url;
                }
                else {
                    attachment.asset_url = r.url;
                    attachment.title = r.file?.name;
                    attachment.file_size = r.file?.size;
                    attachment.thumb_url = r.thumb_url;
                }
                if (r.extraData) {
                    attachment = { ...attachment, ...r.extraData };
                }
            }
            return attachment;
        });
        return [...builtInAttachments, ...this.customAttachments$.value];
    }
    /**
     * Maps attachments received from the Stream API to uploads. This is useful when editing a message.
     * @param attachments Attachemnts received with the message
     */
    createFromAttachments(attachments) {
        const attachmentUploads = [];
        const builtInAttachments = [];
        const customAttachments = [];
        attachments.forEach((attachment) => {
            if (this.messageService.isCustomAttachment(attachment)) {
                customAttachments.push(attachment);
            }
            else {
                builtInAttachments.push(attachment);
            }
        });
        builtInAttachments.forEach((attachment) => {
            if (isImageAttachment(attachment)) {
                attachmentUploads.push({
                    url: (attachment.img_url ||
                        attachment.thumb_url ||
                        attachment.image_url),
                    state: 'success',
                    type: 'image',
                    file: {
                        name: attachment.fallback,
                        type: attachment.mime_type,
                    },
                    fromAttachment: attachment,
                });
            }
            else if (attachment.type === 'file' || attachment.type === 'video') {
                attachmentUploads.push({
                    url: attachment.asset_url,
                    state: 'success',
                    file: {
                        name: attachment.title,
                        size: attachment.file_size,
                        type: attachment.mime_type,
                    },
                    type: attachment.type,
                    thumb_url: attachment.thumb_url,
                    fromAttachment: attachment,
                });
            }
            else if (attachment.type === 'voiceRecording') {
                attachmentUploads.push({
                    url: attachment.asset_url,
                    state: 'success',
                    file: {
                        name: attachment.title,
                        size: attachment.file_size,
                        type: attachment.mime_type,
                    },
                    type: 'voiceRecording',
                    extraData: {
                        duration: attachment.duration,
                        waveform_data: attachment.waveform_data,
                    },
                });
            }
        });
        if (attachmentUploads.length > 0) {
            this.attachmentUploadsSubject.next([
                ...this.attachmentUploadsSubject.getValue(),
                ...attachmentUploads,
            ]);
        }
        if (customAttachments.length > 0) {
            this.customAttachments$.next(customAttachments);
        }
    }
    async createPreview(file) {
        try {
            const uri = await createUriFromBlob(file);
            const attachmentUploads = this.attachmentUploadsSubject.getValue();
            const upload = attachmentUploads.find((upload) => upload.file === file);
            if (!upload) {
                return;
            }
            upload.previewUri = uri;
            this.attachmentUploadsSubject.next([...attachmentUploads]);
        }
        catch (e) {
            this.chatClientService?.chatClient?.logger('error', e instanceof Error ? e.message : `Can't create image preview`, { error: e, tag: ['AttachmentService'] });
        }
    }
    async uploadAttachments(uploads) {
        this.attachmentUploadInProgressCounter$.next(this.attachmentUploadInProgressCounter$.value + 1);
        const result = await this.channelService.uploadAttachments(uploads);
        const attachmentUploads = this.attachmentUploadsSubject.getValue();
        result.forEach((r) => {
            const upload = attachmentUploads.find((upload) => upload.file === r.file);
            if (!upload) {
                if (r.url) {
                    void this.channelService.deleteAttachment(r);
                }
                return;
            }
            upload.state = r.state;
            upload.url = r.url;
            upload.thumb_url = r.thumb_url;
            if (upload.state === 'error') {
                upload.errorReason = r.errorReason;
                upload.errorExtraInfo = r.errorExtraInfo;
                let errorKey;
                const translateParams = { name: upload.file.name };
                switch (upload.errorReason) {
                    case 'file-extension':
                        errorKey =
                            'streamChat.Error uploading file, extension not supported';
                        translateParams.ext = upload.errorExtraInfo?.[0]?.param;
                        break;
                    case 'file-size':
                        errorKey =
                            'streamChat.Error uploading file, maximum file size exceeded';
                        translateParams.limit = upload.errorExtraInfo?.[0]?.param;
                        break;
                    default:
                        errorKey = 'streamChat.Error uploading file';
                }
                this.notificationService.addTemporaryNotification(errorKey, 'error', undefined, translateParams);
            }
        });
        this.attachmentUploadInProgressCounter$.next(this.attachmentUploadInProgressCounter$.value - 1);
        this.attachmentUploadsSubject.next([...attachmentUploads]);
    }
    async areAttachmentsHaveValidExtension(files) {
        if (!this.appSettings) {
            try {
                await this.chatClientService.getAppSettings();
            }
            catch (error) {
                return true;
            }
        }
        let isValid = true;
        files.forEach((f) => {
            let hasBlockedExtension;
            let hasBlockedMimeType;
            let hasNotAllowedExtension;
            let hasNotAllowedMimeType;
            if (isImageFile(f)) {
                hasBlockedExtension =
                    !!this.appSettings?.image_upload_config?.blocked_file_extensions?.find((ext) => f.name.endsWith(ext));
                hasBlockedMimeType =
                    !!this.appSettings?.image_upload_config?.blocked_mime_types?.find((type) => f.type === type);
                hasNotAllowedExtension =
                    !!this.appSettings?.image_upload_config?.allowed_file_extensions
                        ?.length &&
                        !this.appSettings?.image_upload_config?.allowed_file_extensions?.find((ext) => f.name.endsWith(ext));
                hasNotAllowedMimeType =
                    !!this.appSettings?.image_upload_config?.allowed_mime_types?.length &&
                        !this.appSettings?.image_upload_config?.allowed_mime_types?.find((type) => f.type === type);
            }
            else {
                hasBlockedExtension =
                    !!this.appSettings?.file_upload_config?.blocked_file_extensions?.find((ext) => f.name.endsWith(ext));
                hasBlockedMimeType =
                    !!this.appSettings?.file_upload_config?.blocked_mime_types?.find((type) => f.type === type);
                hasNotAllowedExtension =
                    !!this.appSettings?.file_upload_config?.allowed_file_extensions
                        ?.length &&
                        !this.appSettings?.file_upload_config?.allowed_file_extensions?.find((ext) => f.name.endsWith(ext));
                hasNotAllowedMimeType =
                    !!this.appSettings?.file_upload_config?.allowed_mime_types?.length &&
                        !this.appSettings?.file_upload_config?.allowed_mime_types?.find((type) => f.type === type);
            }
            if (hasBlockedExtension ||
                hasBlockedMimeType ||
                hasNotAllowedExtension ||
                hasNotAllowedMimeType) {
                this.notificationService.addTemporaryNotification('streamChat.Error uploading file, extension not supported', undefined, undefined, { name: f.name, ext: f.type });
                isValid = false;
            }
        });
        return isValid;
    }
    async areAttachmentsHaveValidSize(files) {
        if (!this.appSettings) {
            try {
                await this.chatClientService.getAppSettings();
            }
            catch (error) {
                return true;
            }
        }
        const imageSizeLimitInBytes = this.appSettings?.image_upload_config?.size_limit || 0;
        const imageSizeLimiString = `${imageSizeLimitInBytes / (1024 * 1024)}MB`;
        const fileSizeLimitInBytes = this.appSettings?.file_upload_config?.size_limit || 0;
        const fileSizeLimitInString = `${fileSizeLimitInBytes / (1024 * 1024)}MB`;
        let isValid = true;
        files.forEach((f) => {
            let isOverSized = false;
            let limit = '';
            if (isImageFile(f) && imageSizeLimitInBytes > 0) {
                isOverSized = f.size > imageSizeLimitInBytes;
                limit = imageSizeLimiString;
            }
            else if (fileSizeLimitInBytes > 0) {
                isOverSized = f.size > fileSizeLimitInBytes;
                limit = fileSizeLimitInString;
            }
            if (isOverSized) {
                this.notificationService.addTemporaryNotification('streamChat.Error uploading file, maximum file size exceeded', undefined, undefined, { name: f.name, limit: limit });
                isValid = false;
            }
        });
        return isValid;
    }
    isWithinLimit(numberOfNewAttachments) {
        let currentNumberOfAttachments = 0;
        this.attachmentsCounter$
            .pipe(take(1))
            .subscribe((counter) => (currentNumberOfAttachments = counter));
        if (currentNumberOfAttachments + numberOfNewAttachments >
            this.maxNumberOfAttachments) {
            this.notificationService.addTemporaryNotification(`streamChat.You can't uplod more than {{max}} attachments`, 'error', undefined, { max: this.maxNumberOfAttachments });
            return false;
        }
        else {
            return true;
        }
    }
}
AttachmentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AttachmentService, deps: [{ token: i1.ChannelService }, { token: i2.NotificationService }, { token: i3.ChatClientService }, { token: i4.MessageService }], target: i0.ɵɵFactoryTarget.Injectable });
AttachmentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AttachmentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AttachmentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.NotificationService }, { type: i3.ChatClientService }, { type: i4.MessageService }]; } });
//# sourceMappingURL=data:application/json;base64,