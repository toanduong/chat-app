import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * The message service contains configuration options related to displaying the message content
 */
export class MessageService {
    constructor() {
        /**
         * Decides if the message content should be formatted as text or HTML
         *
         * If you display messages as text the following parts are still be displayed as HTML:
         * - user mentions -> you can customize this with your own template using the [`customTemplatesService.mentionTemplate$`](/chat/docs/sdk/angular/services/CustomTemplatesService/#mentiontemplate)
         * - links -> you can customize this by providing you own [`customLinkRenderer`](#customlinkrenderer) method
         */
        this.displayAs = 'text';
    }
    /**
     * Tells if an attachment is custom (you need to provide your own template to display them) or built-in (the SDK supports it out-of-the-box)
     * @param attachment
     * @returns `true` if the attachment is custom
     */
    isCustomAttachment(attachment) {
        if (this.filterCustomAttachment) {
            return this.filterCustomAttachment(attachment);
        }
        else {
            return (attachment.type !== 'image' &&
                attachment.type !== 'file' &&
                attachment.type !== 'video' &&
                attachment.type !== 'voiceRecording' &&
                attachment.type !== 'giphy');
        }
    }
}
MessageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MessageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RyZWFtLWNoYXQtYW5ndWxhci9zcmMvbGliL21lc3NhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQzs7R0FFRztBQUlILE1BQU0sT0FBTyxjQUFjO0lBMkJ6QjtRQXhCQTs7Ozs7O1dBTUc7UUFDSCxjQUFTLEdBQW9CLE1BQU0sQ0FBQztJQWlCckIsQ0FBQztJQUVoQjs7OztPQUlHO0lBQ0gsa0JBQWtCLENBQUMsVUFBeUI7UUFDMUMsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDaEQ7YUFBTTtZQUNMLE9BQU8sQ0FDTCxVQUFVLENBQUMsSUFBSSxLQUFLLE9BQU87Z0JBQzNCLFVBQVUsQ0FBQyxJQUFJLEtBQUssTUFBTTtnQkFDMUIsVUFBVSxDQUFDLElBQUksS0FBSyxPQUFPO2dCQUMzQixVQUFVLENBQUMsSUFBSSxLQUFLLGdCQUFnQjtnQkFDcEMsVUFBVSxDQUFDLElBQUksS0FBSyxPQUFPLENBQzVCLENBQUM7U0FDSDtJQUNILENBQUM7OzJHQTlDVSxjQUFjOytHQUFkLGNBQWMsY0FGYixNQUFNOzJGQUVQLGNBQWM7a0JBSDFCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXR0YWNobWVudCB9IGZyb20gJ3N0cmVhbS1jaGF0JztcbmltcG9ydCB7IERlZmF1bHRTdHJlYW1DaGF0R2VuZXJpY3MgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBUaGUgbWVzc2FnZSBzZXJ2aWNlIGNvbnRhaW5zIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyByZWxhdGVkIHRvIGRpc3BsYXlpbmcgdGhlIG1lc3NhZ2UgY29udGVudFxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZVNlcnZpY2U8XG4gIFQgZXh0ZW5kcyBEZWZhdWx0U3RyZWFtQ2hhdEdlbmVyaWNzID0gRGVmYXVsdFN0cmVhbUNoYXRHZW5lcmljc1xuPiB7XG4gIC8qKlxuICAgKiBEZWNpZGVzIGlmIHRoZSBtZXNzYWdlIGNvbnRlbnQgc2hvdWxkIGJlIGZvcm1hdHRlZCBhcyB0ZXh0IG9yIEhUTUxcbiAgICpcbiAgICogSWYgeW91IGRpc3BsYXkgbWVzc2FnZXMgYXMgdGV4dCB0aGUgZm9sbG93aW5nIHBhcnRzIGFyZSBzdGlsbCBiZSBkaXNwbGF5ZWQgYXMgSFRNTDpcbiAgICogLSB1c2VyIG1lbnRpb25zIC0+IHlvdSBjYW4gY3VzdG9taXplIHRoaXMgd2l0aCB5b3VyIG93biB0ZW1wbGF0ZSB1c2luZyB0aGUgW2BjdXN0b21UZW1wbGF0ZXNTZXJ2aWNlLm1lbnRpb25UZW1wbGF0ZSRgXSgvY2hhdC9kb2NzL3Nkay9hbmd1bGFyL3NlcnZpY2VzL0N1c3RvbVRlbXBsYXRlc1NlcnZpY2UvI21lbnRpb250ZW1wbGF0ZSlcbiAgICogLSBsaW5rcyAtPiB5b3UgY2FuIGN1c3RvbWl6ZSB0aGlzIGJ5IHByb3ZpZGluZyB5b3Ugb3duIFtgY3VzdG9tTGlua1JlbmRlcmVyYF0oI2N1c3RvbWxpbmtyZW5kZXJlcikgbWV0aG9kXG4gICAqL1xuICBkaXNwbGF5QXM6ICd0ZXh0JyB8ICdodG1sJyA9ICd0ZXh0JztcblxuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIGEgY3VzdG9tIG1ldGhvZCB0byBkaXNwbGF5IGxpbmtzXG4gICAqIEBwYXJhbSB1cmwgdGhlIHVybCB0aGUgbGluayBzaG91bGQgcmVmZXIgdG9cbiAgICogQHJldHVybnMgdGhlIEhUTUwgbWFya3VwIGFzIGEgc3RyaW5nIGZvciB0aGUgbGlua1xuICAgKi9cbiAgY3VzdG9tTGlua1JlbmRlcmVyPzogKHVybDogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgU0RLIHN1cHBvcnRzIHRoZSBmb2xsb3dpbmcgYXR0YWNobWVudCB0eXBlczogYGltYWdlYCwgYGZpbGVgLCBgZ2lwaHlgLCBgdmlkZW9gIGFuZCBgdm9pY2VSZWNvcmRpbmdgIGF0dGFjaG1lbnRzLlxuICAgKlxuICAgKiBBbGwgb3RoZXIgdHlwZXMgYXJlIHRyZWF0ZWQgYXMgY3VzdG9tIGF0dGFjaG1lbnRzLCBob3dldmVyIGl0J3MgcG9zc2libGUgdG8gb3ZlcnJpZGUgdGhpcyBsb2dpYywgYW5kIHByb3ZpZGUgYSBjdXN0b20gZmlsdGVyaW5nIG1ldGhvZCB3aGljaCBjYW4gYmUgdXNlZCB0byB0cmVhdCBzb21lIGJ1aWx0LWluIGF0dGFjaG1lbnRzIGFzIGN1c3RvbS5cbiAgICpcbiAgICogUHJvdmlkZSBhIG1ldGhvZCB3aGljaCByZXRydW5zIGB0cnVlYCBpZiBhbiBhdHRhY2htZW50IHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIGN1c3RvbS5cbiAgICovXG4gIGZpbHRlckN1c3RvbUF0dGFjaG1lbnQ/OiAoYXR0YWNobWVudDogQXR0YWNobWVudDxUPikgPT4gYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIFRlbGxzIGlmIGFuIGF0dGFjaG1lbnQgaXMgY3VzdG9tICh5b3UgbmVlZCB0byBwcm92aWRlIHlvdXIgb3duIHRlbXBsYXRlIHRvIGRpc3BsYXkgdGhlbSkgb3IgYnVpbHQtaW4gKHRoZSBTREsgc3VwcG9ydHMgaXQgb3V0LW9mLXRoZS1ib3gpXG4gICAqIEBwYXJhbSBhdHRhY2htZW50XG4gICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXR0YWNobWVudCBpcyBjdXN0b21cbiAgICovXG4gIGlzQ3VzdG9tQXR0YWNobWVudChhdHRhY2htZW50OiBBdHRhY2htZW50PFQ+KSB7XG4gICAgaWYgKHRoaXMuZmlsdGVyQ3VzdG9tQXR0YWNobWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyQ3VzdG9tQXR0YWNobWVudChhdHRhY2htZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgYXR0YWNobWVudC50eXBlICE9PSAnaW1hZ2UnICYmXG4gICAgICAgIGF0dGFjaG1lbnQudHlwZSAhPT0gJ2ZpbGUnICYmXG4gICAgICAgIGF0dGFjaG1lbnQudHlwZSAhPT0gJ3ZpZGVvJyAmJlxuICAgICAgICBhdHRhY2htZW50LnR5cGUgIT09ICd2b2ljZVJlY29yZGluZycgJiZcbiAgICAgICAgYXR0YWNobWVudC50eXBlICE9PSAnZ2lwaHknXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19