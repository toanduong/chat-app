import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, ReplaySubject, } from 'rxjs';
import { filter, first, map, shareReplay, take } from 'rxjs/operators';
import { getMessageTranslation } from './get-message-translation';
import { createMessagePreview } from './message-preview';
import { getReadBy } from './read-by';
import { ChannelQuery } from './channel-query';
import * as i0 from "@angular/core";
import * as i1 from "./chat-client.service";
import * as i2 from "./notification.service";
/**
 * The `ChannelService` provides data and interaction for the channel list and message list.
 */
export class ChannelService {
    constructor(chatClientService, ngZone, notificationService) {
        this.chatClientService = chatClientService;
        this.ngZone = ngZone;
        this.notificationService = notificationService;
        /**
         * @internal
         */
        this.isMessageLoadingInProgress = false;
        this.messagePageSize = 25;
        this.channelsSubject = new BehaviorSubject(undefined);
        this.activeChannelSubject = new BehaviorSubject(undefined);
        this.activeChannelMessagesSubject = new BehaviorSubject([]);
        this.activeChannelPinnedMessagesSubject = new BehaviorSubject([]);
        this.hasMoreChannelsSubject = new ReplaySubject(1);
        this.activeChannelSubscriptions = [];
        this.channelSubscriptions = {};
        this.activeParentMessageIdSubject = new BehaviorSubject(undefined);
        this.activeThreadMessagesSubject = new BehaviorSubject([]);
        this.jumpToMessageSubject = new BehaviorSubject({ id: undefined, parentId: undefined });
        this.latestMessageDateByUserByChannelsSubject = new BehaviorSubject({});
        this.attachmentMaxSizeFallbackInMB = 100;
        this.messageToQuoteSubject = new BehaviorSubject(undefined);
        this.usersTypingInChannelSubject = new BehaviorSubject([]);
        this.usersTypingInThreadSubject = new BehaviorSubject([]);
        this._shouldMarkActiveChannelAsRead = true;
        this.isStateRecoveryInProgress = false;
        this.channelQueryStateSubject = new BehaviorSubject(undefined);
        this.channelListSetter = (channels, shouldStopWatchingRemovedChannels = true) => {
            const currentChannels = this.channelsSubject.getValue() || [];
            const deletedChannels = currentChannels.filter((c) => !channels?.find((channel) => channel.cid === c.cid));
            for (let i = 0; i < channels.length; i++) {
                const channel = channels[i];
                if (!this.channelSubscriptions[channel.cid]) {
                    this.watchForChannelEvents(channel);
                }
                if (deletedChannels.includes(channel)) {
                    if (shouldStopWatchingRemovedChannels) {
                        if (this.channelSubscriptions[channel.cid]) {
                            this.channelSubscriptions[channel.cid]();
                            delete this.channelSubscriptions.cid;
                        }
                        void this.chatClientService.chatClient.activeChannels[channel.cid]
                            ?.stopWatching()
                            .catch((err) => this.chatClientService.chatClient.logger('warn', 'Failed to unwatch channel', err));
                    }
                }
            }
            const nextChannels = channels;
            this.channelsSubject.next(nextChannels);
            if (!nextChannels.find((c) => c.cid === this.activeChannelSubject.getValue()?.cid)) {
                if (nextChannels.length > 0) {
                    this.setAsActiveChannel(nextChannels[0]);
                }
                else {
                    this.activeChannelSubject.next(undefined);
                }
            }
        };
        this.messageListSetter = (messages) => {
            this.activeChannelMessagesSubject.next(messages);
        };
        this.threadListSetter = (messages) => {
            this.activeThreadMessagesSubject.next(messages);
        };
        this.parentMessageSetter = (message) => {
            this.activeParentMessageIdSubject.next(message?.id);
        };
        this.areReadEventsPaused = false;
        this.markReadThrottleTime = 1050;
        this.channels$ = this.channelsSubject.asObservable().pipe(shareReplay(1));
        this.activeChannel$ = this.activeChannelSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.activeChannelMessages$ = this.activeChannelMessagesSubject.pipe(map((messages) => {
            const channel = this.activeChannelSubject.getValue();
            return messages.map((message) => this.transformToStreamMessage(message, channel));
        }), shareReplay(1));
        this.bouncedMessage$ = new BehaviorSubject(undefined);
        this.hasMoreChannels$ = this.hasMoreChannelsSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.activeParentMessageId$ = this.activeParentMessageIdSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.activeThreadMessages$ = this.activeThreadMessagesSubject.pipe(map((messages) => {
            const channel = this.activeChannelSubject.getValue();
            return messages.map((message) => this.transformToStreamMessage(message, channel));
        }), shareReplay(1));
        this.activeParentMessage$ = combineLatest([
            this.activeChannelMessages$,
            this.activeParentMessageId$,
        ]).pipe(map(([messages, parentMessageId]) => {
            if (!parentMessageId) {
                return undefined;
            }
            else {
                const message = messages.find((m) => m.id === parentMessageId);
                if (!message) {
                    void this.setAsActiveParentMessage(undefined);
                    return undefined;
                }
                else {
                    return message;
                }
            }
        }), shareReplay(1));
        this.messageToQuote$ = this.messageToQuoteSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.jumpToMessage$ = this.jumpToMessageSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.usersTypingInChannel$ = this.usersTypingInChannelSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.usersTypingInThread$ = this.usersTypingInThreadSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.latestMessageDateByUserByChannels$ =
            this.latestMessageDateByUserByChannelsSubject
                .asObservable()
                .pipe(shareReplay(1));
        this.activeChannelPinnedMessages$ = this.activeChannelPinnedMessagesSubject
            .asObservable()
            .pipe(shareReplay(1));
        this.channelQueryState$ = this.channelQueryStateSubject
            .asObservable()
            .pipe(shareReplay(1));
    }
    /**
     * If set to false, read events won't be sent as new messages are received. If set to true active channel (if any) will immediately be marked as read.
     */
    get shouldMarkActiveChannelAsRead() {
        return this._shouldMarkActiveChannelAsRead;
    }
    /**
     * If set to false, read events won't be sent as new messages are received. If set to true active channel (if any) will immediately be marked as read.
     */
    set shouldMarkActiveChannelAsRead(shouldMarkActiveChannelAsRead) {
        if (!this._shouldMarkActiveChannelAsRead && shouldMarkActiveChannelAsRead) {
            const activeChannel = this.activeChannelSubject.getValue();
            if (activeChannel && this.canSendReadEvents) {
                void activeChannel.markRead();
            }
        }
        this._shouldMarkActiveChannelAsRead = shouldMarkActiveChannelAsRead;
    }
    /**
     * By default the SDK uses an offset based pagination, you can change/extend this by providing your own custom paginator method.
     *
     * The method will be called with the result of the latest channel query.
     *
     * You can return either an offset, or a filter using the [`$lte`/`$gte` operator](/chat/docs/javascript/query_syntax_operators/). If you return a filter, it will be merged with the filter provided for the `init` method.
     */
    set customPaginator(paginator) {
        this._customPaginator = paginator;
        if (this.channelQuery && 'customPaginator' in this.channelQuery) {
            this.channelQuery.customPaginator = this._customPaginator;
        }
    }
    /**
     * Sets the given `channel` as active and marks it as read.
     * If the channel wasn't previously part of the channel, it will be added to the beginning of the list.
     * @param channel
     */
    setAsActiveChannel(channel) {
        const prevActiveChannel = this.activeChannelSubject.getValue();
        if (prevActiveChannel?.cid === channel.cid) {
            return;
        }
        this.stopWatchForActiveChannelEvents(prevActiveChannel);
        this.flushMarkReadQueue();
        this.areReadEventsPaused = false;
        this.isMessageLoadingInProgress = false;
        const readState = channel.state.read[this.chatClientService.chatClient.user?.id || ''];
        this.activeChannelLastReadMessageId = readState?.last_read_message_id;
        if (channel.state.latestMessages[channel.state.latestMessages.length - 1]
            ?.id === this.activeChannelLastReadMessageId) {
            this.activeChannelLastReadMessageId = undefined;
        }
        this.activeChannelUnreadCount = readState?.unread_messages || 0;
        this.watchForActiveChannelEvents(channel);
        this.addChannel(channel);
        this.activeChannelSubject.next(channel);
        const channelStateLength = channel.state.latestMessages.length;
        if (channelStateLength > 2 * this.messagePageSize) {
            channel.state.latestMessages = channel.state.latestMessages.slice(channelStateLength - 2 * this.messagePageSize);
        }
        this.setChannelState(channel);
    }
    /**
     * Deselects the currently active (if any) channel
     */
    deselectActiveChannel() {
        const activeChannel = this.activeChannelSubject.getValue();
        if (!activeChannel) {
            return;
        }
        this.stopWatchForActiveChannelEvents(activeChannel);
        this.flushMarkReadQueue();
        this.activeChannelMessagesSubject.next([]);
        this.activeChannelSubject.next(undefined);
        this.activeParentMessageIdSubject.next(undefined);
        this.activeThreadMessagesSubject.next([]);
        this.latestMessageDateByUserByChannelsSubject.next({});
        this.selectMessageToQuote(undefined);
        this.jumpToMessageSubject.next({ id: undefined, parentId: undefined });
        this.activeChannelPinnedMessagesSubject.next([]);
        this.usersTypingInChannelSubject.next([]);
        this.usersTypingInThreadSubject.next([]);
        this.activeChannelLastReadMessageId = undefined;
        this.activeChannelUnreadCount = undefined;
        this.areReadEventsPaused = false;
        this.isMessageLoadingInProgress = false;
    }
    /**
     * Sets the given `message` as an active parent message. If `undefined` is provided, it will deleselect the current parent message.
     * @param message
     * @param loadMessagesForm
     */
    async setAsActiveParentMessage(message, loadMessagesForm = 'request') {
        const messageToQuote = this.messageToQuoteSubject.getValue();
        if (messageToQuote && !!messageToQuote.parent_id) {
            this.messageToQuoteSubject.next(undefined);
        }
        if (!message) {
            this.activeParentMessageIdSubject.next(undefined);
            this.activeThreadMessagesSubject.next([]);
            const messageToJumpTo = this.jumpToMessageSubject.getValue();
            if (messageToJumpTo && !!messageToJumpTo.parentId) {
                this.jumpToMessageSubject.next({ id: undefined, parentId: undefined });
            }
        }
        else {
            this.activeParentMessageIdSubject.next(message.id);
            const activeChannel = this.activeChannelSubject.getValue();
            if (loadMessagesForm === 'request') {
                const result = await activeChannel?.getReplies(message.id, {
                    limit: this.messagePageSize,
                });
                this.activeThreadMessagesSubject.next(result?.messages || []);
            }
            else {
                this.activeThreadMessagesSubject.next(activeChannel?.state.threads[message.id] || []);
            }
        }
    }
    /**
     * Loads the next page of messages of the active channel. The page size can be set in the [query option](/chat/docs/javascript/query_channels/#query-options) object.
     * @param direction
     */
    loadMoreMessages(direction = 'older') {
        const activeChnannel = this.activeChannelSubject.getValue();
        const messages = this.activeChannelMessagesSubject.getValue();
        const lastMessageId = messages[direction === 'older' ? 0 : messages.length - 1]?.id;
        if (direction === 'newer' &&
            activeChnannel?.state?.latestMessages === activeChnannel?.state?.messages) {
            // If we are on latest message set, activeChannelMessages$ will be refreshed by WS events, no need for a request
            return false;
        }
        return activeChnannel
            ?.query({
            messages: {
                limit: this.messagePageSize,
                [direction === 'older' ? 'id_lt' : 'id_gt']: lastMessageId,
            },
            members: { limit: 0 },
            watchers: { limit: 0 },
        })
            .then((res) => {
            if (activeChnannel?.data?.id ===
                this.activeChannelSubject.getValue()?.data?.id) {
                this.activeChannelMessagesSubject.next([
                    ...activeChnannel.state.messages,
                ]);
            }
            return res;
        });
    }
    /**
     * Loads the next page of messages of the active thread. The page size can be set in the [query option](/chat/docs/javascript/query_channels/#query-options) object.
     * @param direction
     */
    loadMoreThreadReplies(direction = 'older') {
        if (direction === 'newer') {
            // Thread replies aren't broke into different message sets, activeThreadMessages$ will be refreshed by WS events, no need for a request
            return false;
        }
        const activeChnannel = this.activeChannelSubject.getValue();
        const parentMessageId = this.activeParentMessageIdSubject.getValue();
        if (!parentMessageId || !activeChnannel) {
            return false;
        }
        const threadMessages = this.activeThreadMessagesSubject.getValue();
        const lastMessageId = threadMessages[direction === 'older' ? 0 : threadMessages.length - 1]?.id;
        return activeChnannel
            .getReplies(parentMessageId, {
            limit: this.messagePageSize,
            [direction === 'older' ? 'id_lt' : 'id_gt']: lastMessageId,
        })
            .then(() => {
            this.activeThreadMessagesSubject.next(activeChnannel?.state.threads[parentMessageId] || []);
        });
    }
    /**
     * Queries the channels with the given filters, sorts and options. More info about [channel querying](/chat/docs/javascript/query_channels/) can be found in the platform documentation. By default the first channel in the list will be set as active channel and will be marked as read.
     * @param filters
     * @param sort
     * @param options
     * @param shouldSetActiveChannel Decides if the first channel in the result should be made as an active channel or not.
     * @returns the list of channels found by the query
     */
    init(filters, sort, options, shouldSetActiveChannel = true) {
        this.channelQuery = new ChannelQuery(this.chatClientService, this, filters, sort || { last_message_at: -1 }, {
            limit: 25,
            state: true,
            presence: true,
            watch: true,
            message_limit: this.messagePageSize,
            ...options,
        });
        this.channelQuery.customPaginator = this._customPaginator;
        return this._init({
            shouldSetActiveChannel,
            messagePageSize: options?.message_limit ?? this.messagePageSize,
        });
    }
    /**
     * Queries the channels with the given query function. More info about [channel querying](/chat/docs/javascript/query_channels/) can be found in the platform documentation.
     * @param query
     * @param options
     * @param options.shouldSetActiveChannel The `shouldSetActiveChannel` specifies if the first channel in the result should be selected as the active channel or not. Default is `true`.
     * @param options.messagePageSize How many messages should we load? The default is 25
     * @returns the channels that were loaded
     */
    initWithCustomQuery(query, options = {
        shouldSetActiveChannel: true,
        messagePageSize: this.messagePageSize,
    }) {
        this.channelQuery = query;
        return this._init(options);
    }
    /**
     * Resets the `activeChannel$`, `channels$` and `activeChannelMessages$` Observables. Useful when disconnecting a chat user, use in combination with [`disconnectUser`](/chat/docs/sdk/angular/services/ChatClientService/#disconnectuser/).
     */
    reset() {
        this.deselectActiveChannel();
        this.channelsSubject.next(undefined);
        this.channelQueryStateSubject.next(undefined);
        this.clientEventsSubscription?.unsubscribe();
        this.dismissErrorNotification?.();
        this.dismissErrorNotification = undefined;
        Object.keys(this.channelSubscriptions).forEach((cid) => {
            this.channelSubscriptions[cid]();
        });
        this.channelSubscriptions = {};
    }
    /**
     * Loads the next page of channels. The page size can be set in the [query option](/chat/docs/javascript/query_channels/#query-options) object.
     */
    async loadMoreChannels() {
        await this.queryChannels(false, 'next-page');
    }
    /**
     * Adds a reaction to a message.
     * @param messageId The id of the message to add the reaction to
     * @param reactionType The type of the reaction
     * @param customData
     */
    async addReaction(messageId, reactionType, customData) {
        await this.activeChannelSubject.getValue()?.sendReaction(messageId, {
            type: reactionType,
            ...customData,
        });
    }
    /**
     * Removes a reaction from a message.
     * @param messageId The id of the message to remove the reaction from
     * @param reactionType Thr type of reaction to remove
     */
    async removeReaction(messageId, reactionType) {
        await this.activeChannelSubject
            .getValue()
            ?.deleteReaction(messageId, reactionType);
    }
    /**
     * Sends a message to the active channel. The message is immediately added to the message list, if an error occurs and the message can't be sent, the error is indicated in `state` of the message.
     * @param text The text of the message
     * @param attachments The attachments
     * @param mentionedUsers Mentioned users
     * @param parentId Id of the parent message (if sending a thread reply)
     * @param quotedMessageId Id of the message to quote (if sending a quote reply)
     * @param customData
     */
    async sendMessage(text, attachments = [], mentionedUsers = [], parentId = undefined, quotedMessageId = undefined, customData = undefined) {
        let input = {
            text,
            attachments,
            mentionedUsers,
            parentId,
            quotedMessageId,
            customData,
        };
        if (this.beforeSendMessage) {
            input = await this.beforeSendMessage(input);
        }
        const preview = createMessagePreview(this.chatClientService.chatClient.user, input.text, input.attachments, input.mentionedUsers, input.parentId, input.quotedMessageId, input.customData);
        const channel = this.activeChannelSubject.getValue();
        preview.readBy = [];
        channel.state.addMessageSorted(preview, true);
        const response = await this.sendMessageRequest(preview, input.customData);
        return response;
    }
    /**
     * Resends the given message to the active channel
     * @param message The message to resend
     */
    async resendMessage(message) {
        const channel = this.activeChannelSubject.getValue();
        channel.state.addMessageSorted({
            ...message,
            errorStatusCode: undefined,
            status: 'sending',
        }, true);
        return this.sendMessageRequest(message, undefined, true);
    }
    /**
     * Updates the message in the active channel
     * @param message Mesage to be updated
     */
    async updateMessage(message) {
        let messageToUpdate = {
            ...message,
        };
        delete messageToUpdate.i18n;
        if (this.beforeUpdateMessage) {
            messageToUpdate = await this.beforeUpdateMessage(messageToUpdate);
        }
        if (messageToUpdate.readBy) {
            delete messageToUpdate.readBy;
        }
        if (message.moderation_details) {
            return this.resendMessage(message);
        }
        const response = await this.chatClientService.chatClient.updateMessage(messageToUpdate);
        const channel = this.channelsSubject
            .getValue()
            ?.find((c) => c.cid === message.cid);
        if (response.message.type === 'error' &&
            response.message.moderation_details) {
            this.notificationService.addTemporaryNotification('streamChat.This message did not meet our content guidelines');
            return message;
        }
        return this.transformToStreamMessage(response.message, channel);
    }
    /**
     * Deletes the message from the active channel
     * @param message Message to be deleted
     * @param isLocalDelete set this `true` if you want to delete a message that's only part of the local state, not yet saved on the backend
     */
    async deleteMessage(message, isLocalDelete = false) {
        if (isLocalDelete && this.activeChannel) {
            const result = this.activeChannel.state.removeMessage({
                id: message.id,
                parent_id: message.parent_id,
            });
            if (result) {
                message.parent_id
                    ? this.activeThreadMessagesSubject.next(this.activeChannel.state.threads[message.parent_id])
                    : this.activeChannelMessagesSubject.next(this.activeChannel.state.messages);
            }
            return;
        }
        if (this.messageDeleteConfirmationHandler) {
            const result = await this.messageDeleteConfirmationHandler(message);
            if (result) {
                await this.chatClientService.chatClient.deleteMessage(message.id);
            }
        }
        else {
            await this.chatClientService.chatClient.deleteMessage(message.id);
        }
    }
    /**
     * Uploads files to the channel. If you want to know more about [file uploads](/chat/docs/javascript/file_uploads/) check out the platform documentation.
     * @param uploads the attachments to upload (output of the [`AttachmentService`](/chat/docs/sdk/angular/services/AttachmentService/))
     * @returns the result of file upload requests
     */
    async uploadAttachments(uploads) {
        const result = [];
        const channel = this.activeChannelSubject.getValue();
        const uploadResults = await Promise.allSettled(uploads.map((upload) => upload.type === 'image'
            ? this.customImageUploadRequest
                ? this.customImageUploadRequest(upload.file, channel)
                : channel.sendImage(upload.file, upload.file.name, upload.file.type)
            : this.customFileUploadRequest
                ? this.customFileUploadRequest(upload.file, channel)
                : channel.sendFile(upload.file, upload.file.name, upload.file.type)));
        uploadResults.forEach((uploadResult, i) => {
            const file = uploads[i].file;
            const type = uploads[i].type;
            if (uploadResult.status === 'fulfilled') {
                result.push({
                    file,
                    type,
                    state: 'success',
                    url: uploadResult.value.file,
                    /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any */
                    thumb_url: uploadResult.value.thumb_url,
                });
            }
            else {
                let reason = 'unknown';
                let extraData;
                /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */
                const message = 
                /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
                uploadResult.reason.response?.data?.message;
                /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */
                const code = 
                /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
                uploadResult.reason.response?.data?.code;
                if (code === 22 ||
                    (code === 4 && message?.toLowerCase()?.includes('bytes'))) {
                    reason = 'file-size';
                    extraData = {
                        param: /\d+MB|\d+\s?bytes/.exec(message || '')?.[0] ||
                            `${this.attachmentMaxSizeFallbackInMB}MB`,
                    };
                    if (extraData.param.includes('bytes')) {
                        const limitInBytes = +(/\d+/.exec(extraData.param)?.[0] ||
                            this.attachmentMaxSizeFallbackInMB * 1024 * 1024);
                        extraData.param = `${limitInBytes / (1024 * 1024)}MB`;
                    }
                }
                else if (code === 4 &&
                    message?.toLowerCase()?.includes('file extension')) {
                    reason = 'file-extension';
                    extraData = { param: /\.\w+/.exec(message)?.[0] || '' };
                }
                result.push({
                    file,
                    type,
                    state: 'error',
                    errorReason: reason,
                    errorExtraInfo: extraData ? [extraData] : undefined,
                });
            }
        });
        return result;
    }
    /**
     * Deletes an uploaded file by URL. If you want to know more about [file uploads](/chat/docs/javascript/file_uploads/) check out the platform documentation
     * @param attachmentUpload Attachment to be deleted (output of the [`AttachmentService`](/chat/docs/sdk/angular/services/AttachmentService/))
     */
    async deleteAttachment(attachmentUpload) {
        const channel = this.activeChannelSubject.getValue();
        await (attachmentUpload.type === 'image'
            ? this.customImageDeleteRequest
                ? this.customImageDeleteRequest(attachmentUpload.url, channel)
                : channel.deleteImage(attachmentUpload.url)
            : this.customFileDeleteRequest
                ? this.customFileDeleteRequest(attachmentUpload.url, channel)
                : channel.deleteFile(attachmentUpload.url));
    }
    /**
     * Returns the autocomplete options for current channel members. If the channel has less than 100 members, it returns the channel members, otherwise sends a [search request](/chat/docs/javascript/query_members/#pagination-and-ordering) with the given search term.
     * @param searchTerm Text to search for in the names of members
     * @returns The list of members matching the search filter
     */
    async autocompleteMembers(searchTerm) {
        const activeChannel = this.activeChannelSubject.getValue();
        if (!activeChannel) {
            return [];
        }
        if (Object.keys(activeChannel.state.members).length < 100) {
            return Object.values(activeChannel.state.members).filter((m) => m.user?.id !== this.chatClientService.chatClient.userID);
        }
        else {
            if (!searchTerm) {
                return [];
            }
            const result = await activeChannel.queryMembers({
                name: { $autocomplete: searchTerm },
            }); // TODO: find out why we need typecast here
            return result.members.filter((m) => m.user_id !== this.chatClientService.chatClient?.user?.id);
        }
    }
    /**
     * [Runs a message action](https://getstream.io/chat/docs/rest/#messages-runmessageaction) in the current channel. Updates the message list based on the action result (if no message is returned, the message will be removed from the message list).
     * @param messageId
     * @param formData
     * @param parentMessageId
     */
    async sendAction(messageId, formData, parentMessageId) {
        const channel = this.activeChannelSubject.getValue();
        const response = await channel.sendAction(messageId, formData);
        if (response?.message) {
            channel.state.addMessageSorted({
                ...response.message,
                status: 'received',
            });
            const isThreadReply = !!response.message.parent_id;
            isThreadReply
                ? this.activeThreadMessagesSubject.next([
                    ...channel.state.threads[response.message.parent_id],
                ])
                : this.activeChannelMessagesSubject.next([...channel.state.messages]);
        }
        else {
            channel.state.removeMessage({
                id: messageId,
                parent_id: parentMessageId,
            });
            if (parentMessageId) {
                this.activeThreadMessagesSubject.next(channel.state.threads[this.activeParentMessageIdSubject.getValue()]);
            }
            else {
                this.activeChannelMessagesSubject.next([...channel.state.messages]);
            }
        }
    }
    /**
     * Selects or deselects the current message to quote reply to
     * @param message The message to select, if called with `undefined`, it deselects the message
     */
    selectMessageToQuote(message) {
        this.messageToQuoteSubject.next(message);
    }
    /**
     * Add a new channel to the channel list
     * The channel will be added to the beginning of the channel list
     * @param channel
     */
    addChannel(channel) {
        if (!this.channels.find((c) => c.cid === channel.cid)) {
            this.channelsSubject.next([channel, ...this.channels]);
            this.watchForChannelEvents(channel);
        }
    }
    /**
     *
     * @param cid
     * @param shouldStopWatching
     */
    removeChannel(cid, shouldStopWatching = true) {
        const remainingChannels = this.channels.filter((c) => c.cid !== cid);
        if (shouldStopWatching) {
            if (this.channelSubscriptions[cid]) {
                this.channelSubscriptions[cid]();
                delete this.channelSubscriptions.cid;
            }
            void this.chatClientService.chatClient.activeChannels[cid]
                ?.stopWatching()
                .catch((err) => this.chatClientService.chatClient.logger('warn', 'Failed to unwatch channel', err));
        }
        if (remainingChannels.length < this.channels.length) {
            this.channelsSubject.next(remainingChannels);
            if (cid === this.activeChannelSubject.getValue()?.cid) {
                if (remainingChannels.length > 0) {
                    this.setAsActiveChannel(remainingChannels[0]);
                }
                else {
                    this.activeChannelSubject.next(undefined);
                }
            }
        }
    }
    async sendMessageRequest(preview, customData, isResend = false) {
        const channel = this.activeChannelSubject.getValue();
        const isThreadReply = !!preview.parent_id;
        isThreadReply
            ? this.activeThreadMessagesSubject.next([
                ...channel.state.threads[preview.parent_id],
            ])
            : this.activeChannelMessagesSubject.next([...channel.state.messages]);
        try {
            const response = await channel.sendMessage({
                id: preview.id,
                text: preview.text,
                attachments: preview.attachments,
                mentioned_users: preview.mentioned_users?.map((u) => u.id),
                parent_id: preview.parent_id,
                quoted_message_id: preview.quoted_message_id,
                ...customData,
            }); // TODO: find out why we need typecast here
            channel.state.addMessageSorted({
                ...response.message,
                status: 'received',
            }, true);
            isThreadReply
                ? this.activeThreadMessagesSubject.next([
                    ...channel.state.threads[preview.parent_id],
                ])
                : this.activeChannelMessagesSubject.next([...channel.state.messages]);
            let messages;
            (isThreadReply ? this.activeThreadMessages$ : this.activeChannelMessages$)
                .pipe(take(1))
                .subscribe((m) => (messages = m));
            const newMessage = messages[messages.length - 1];
            return newMessage;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (error) {
            const stringError = JSON.stringify(error);
            const parsedError = stringError ? JSON.parse(stringError) : {};
            let isAlreadyExists = false;
            if (isResend) {
                if (parsedError.status === 400 &&
                    parsedError.code === 4 &&
                    parsedError?.response?.data?.message?.includes('already exists')) {
                    isAlreadyExists = true;
                }
            }
            channel.state.addMessageSorted({
                ...preview,
                errorStatusCode: isAlreadyExists
                    ? undefined
                    : parsedError.status || undefined,
                status: isAlreadyExists ? 'received' : 'failed',
            }, true);
            isThreadReply
                ? this.activeThreadMessagesSubject.next([
                    ...channel.state.threads[preview.parent_id],
                ])
                : this.activeChannelMessagesSubject.next([...channel.state.messages]);
            let messages;
            (isThreadReply ? this.activeThreadMessages$ : this.activeChannelMessages$)
                .pipe(take(1))
                .subscribe((m) => (messages = m));
            const newMessage = messages[messages.length - 1];
            return newMessage;
        }
    }
    /**
     * Jumps to the selected message inside the message list, if the message is not yet loaded, it'll load the message (and it's surroundings) from the API.
     * @param messageId The ID of the message to be loaded, 'latest' means jump to the latest messages
     * @param parentMessageId The ID of the parent message if we want to load a thread message
     */
    async jumpToMessage(messageId, parentMessageId) {
        this.isMessageLoadingInProgress = true;
        const activeChannel = this.activeChannelSubject.getValue();
        try {
            await activeChannel?.state.loadMessageIntoState(messageId, parentMessageId);
            const messages = activeChannel?.state.messages || [];
            this.activeChannelMessagesSubject.next([...messages]);
            if (parentMessageId) {
                const parentMessage = messages.find((m) => m.id === parentMessageId);
                void this.setAsActiveParentMessage(parentMessage, 'state');
            }
            this.jumpToMessageSubject.next({
                id: messageId,
                parentId: parentMessageId,
            });
        }
        catch (error) {
            this.notificationService.addTemporaryNotification('streamChat.Message not found');
            throw error;
        }
        finally {
            this.isMessageLoadingInProgress = false;
        }
    }
    /**
     * Clears the currently selected message to jump
     */
    clearMessageJump() {
        this.jumpToMessageSubject.next({ id: undefined, parentId: undefined });
    }
    /**
     * Pins the given message in the channel
     * @param message
     */
    async pinMessage(message) {
        try {
            await this.chatClientService.chatClient?.pinMessage(message);
            this.notificationService.addTemporaryNotification('streamChat.Message pinned', 'success');
        }
        catch (error) {
            this.notificationService.addTemporaryNotification('streamChat.Error pinning message');
            throw error;
        }
    }
    /**
     * Removes the given message from pinned messages
     * @param message
     */
    async unpinMessage(message) {
        try {
            await this.chatClientService.chatClient?.unpinMessage(message);
            this.notificationService.addTemporaryNotification('streamChat.Message unpinned', 'success');
        }
        catch (error) {
            this.notificationService.addTemporaryNotification('streamChat.Error removing message pin');
            throw error;
        }
    }
    handleNotification(clientEvent) {
        switch (clientEvent.eventType) {
            case 'connection.recovered': {
                void this.ngZone.run(async () => {
                    if (this.isStateRecoveryInProgress) {
                        return;
                    }
                    this.isStateRecoveryInProgress = true;
                    try {
                        // If channel list is not inited, we set the active channel
                        const shoulSetActiveChannel = this.shouldSetActiveChannel &&
                            !this.activeChannelSubject.getValue();
                        await this.queryChannels(shoulSetActiveChannel || false, 'recover-state');
                        if (this.activeChannelSubject.getValue()) {
                            // Thread messages are not refetched so active thread gets deselected to avoid displaying stale messages
                            void this.setAsActiveParentMessage(undefined);
                            // Update and reselect message to quote
                            const messageToQuote = this.messageToQuoteSubject.getValue();
                            this.setChannelState(this.activeChannelSubject.getValue());
                            let messages;
                            this.activeChannelMessages$
                                .pipe(take(1))
                                .subscribe((m) => (messages = m));
                            const updatedMessageToQuote = messages.find((m) => m.id === messageToQuote?.id);
                            if (updatedMessageToQuote) {
                                this.selectMessageToQuote(updatedMessageToQuote);
                            }
                        }
                        this.isStateRecoveryInProgress = false;
                    }
                    catch {
                        this.isStateRecoveryInProgress = false;
                    }
                });
                break;
            }
            case 'notification.message_new': {
                this.ngZone.run(() => {
                    if (this.customNewMessageNotificationHandler) {
                        this.customNewMessageNotificationHandler(clientEvent, this.channelListSetter);
                    }
                    else {
                        this.handleNewMessageNotification(clientEvent);
                    }
                });
                break;
            }
            case 'notification.added_to_channel': {
                this.ngZone.run(() => {
                    if (this.customAddedToChannelNotificationHandler) {
                        this.customAddedToChannelNotificationHandler(clientEvent, this.channelListSetter);
                    }
                    else {
                        this.handleAddedToChannelNotification(clientEvent);
                    }
                });
                break;
            }
            case 'notification.removed_from_channel': {
                this.ngZone.run(() => {
                    if (this.customRemovedFromChannelNotificationHandler) {
                        this.customRemovedFromChannelNotificationHandler(clientEvent, this.channelListSetter);
                    }
                    else {
                        this.handleRemovedFromChannelNotification(clientEvent);
                    }
                });
                break;
            }
            case 'user.updated': {
                this.ngZone.run(() => {
                    const updatedChannels = this.channelsSubject.getValue()?.map((c) => {
                        if (this.chatClientService.chatClient.activeChannels[c.cid]) {
                            return this.chatClientService.chatClient.activeChannels[c.cid];
                        }
                        else {
                            return c;
                        }
                    });
                    this.channelsSubject.next(updatedChannels);
                    const activeChannel = this.activeChannelSubject.getValue();
                    if (activeChannel) {
                        this.activeChannelSubject.next(this.chatClientService.chatClient.activeChannels[activeChannel.cid] || activeChannel);
                        this.activeChannelMessagesSubject.next(activeChannel.state.messages.map((m) => {
                            m.readBy = getReadBy(m, activeChannel);
                            return { ...m };
                        }));
                        const activeParentMessage = this.activeParentMessageIdSubject.getValue();
                        if (activeParentMessage) {
                            const messages = activeChannel.state.threads[activeParentMessage];
                            this.activeThreadMessagesSubject.next([...messages]);
                        }
                        this.activeChannelPinnedMessagesSubject.next([
                            ...activeChannel.state.pinnedMessages,
                        ]);
                    }
                });
                break;
            }
        }
    }
    handleRemovedFromChannelNotification(clientEvent) {
        const channelIdToBeRemoved = clientEvent.event.channel.cid;
        this.removeChannel(channelIdToBeRemoved, true);
    }
    handleNewMessageNotification(clientEvent) {
        if (clientEvent.event.channel) {
            void this.addChannelFromNotification(clientEvent.event.channel);
        }
    }
    handleAddedToChannelNotification(clientEvent) {
        if (clientEvent.event.channel) {
            void this.addChannelFromNotification(clientEvent.event.channel);
        }
    }
    async addChannelFromNotification(channelResponse) {
        const newChannel = this.chatClientService.chatClient.channel(channelResponse.type, channelResponse.id);
        let currentChannels = this.channelsSubject.getValue() || [];
        if (currentChannels.find((c) => c.cid === newChannel.cid)) {
            return;
        }
        await newChannel.watch().catch((err) => {
            this.chatClientService.chatClient.logger('error', 'Failed to add channel to channel list because watch request failed', err);
        });
        currentChannels = this.channelsSubject.getValue() || [];
        if (currentChannels.find((c) => c.cid === newChannel.cid)) {
            return;
        }
        this.watchForChannelEvents(newChannel);
        this.channelsSubject.next([newChannel, ...currentChannels]);
    }
    watchForActiveChannelEvents(channel) {
        this.activeChannelSubscriptions.push(channel.on('message.new', (event) => {
            this.ngZone.run(() => {
                event.message && event.message.parent_id
                    ? event.message.parent_id ===
                        this.activeParentMessageIdSubject.getValue()
                        ? this.activeThreadMessagesSubject.next([
                            ...channel.state.threads[event.message.parent_id],
                        ])
                        : null
                    : this.activeChannelMessagesSubject.next([
                        ...channel.state.messages,
                    ]);
                this.activeChannel$.pipe(first()).subscribe((c) => {
                    if (c) {
                        this.markRead(c);
                    }
                });
                this.updateLatestMessages(event);
            });
        }));
        this.activeChannelSubscriptions.push(channel.on('message.updated', (event) => this.messageUpdated(event)));
        this.activeChannelSubscriptions.push(channel.on('message.deleted', (event) => this.messageUpdated(event)));
        this.activeChannelSubscriptions.push(channel.on('reaction.new', (e) => this.messageReactionEventReceived(e)));
        this.activeChannelSubscriptions.push(channel.on('reaction.deleted', (e) => this.messageReactionEventReceived(e)));
        this.activeChannelSubscriptions.push(channel.on('reaction.updated', (e) => this.messageReactionEventReceived(e)));
        this.activeChannelSubscriptions.push(channel.on('message.read', (e) => {
            this.ngZone.run(() => {
                let latestMessage;
                let messages;
                this.activeChannelMessages$.pipe(first()).subscribe((m) => {
                    messages = m;
                    latestMessage = messages[messages.length - 1];
                });
                if (!latestMessage || !e.user) {
                    return;
                }
                if (latestMessage.readBy) {
                    latestMessage.readBy.splice(0, latestMessage.readBy.length);
                }
                else {
                    latestMessage.readBy = [];
                }
                latestMessage.readBy.push(...getReadBy(latestMessage, channel));
                messages[messages.length - 1] = { ...latestMessage };
                this.activeChannelMessagesSubject.next([...messages]);
            });
        }));
        this.activeChannelSubscriptions.push(this.chatClientService.events$
            .pipe(filter((e) => e.eventType === 'notification.mark_unread' &&
            e.event.channel_id === channel.id), map((e) => e.event))
            .subscribe((e) => {
            this.ngZone.run(() => {
                this.activeChannelLastReadMessageId = e.last_read_message_id;
                this.activeChannelUnreadCount = e.unread_messages;
                this.activeChannelSubject.next(this.activeChannel);
            });
        }));
        this.activeChannelSubscriptions.push(channel.on('typing.start', (e) => this.ngZone.run(() => this.handleTypingStartEvent(e))));
        this.activeChannelSubscriptions.push(channel.on('typing.stop', (e) => this.ngZone.run(() => this.handleTypingStopEvent(e))));
    }
    /**
     * Call this method if user started typing in the active channel
     * @param parentId The id of the parent message, if user is typing in a thread
     */
    async typingStarted(parentId) {
        const activeChannel = this.activeChannelSubject.getValue();
        await activeChannel?.keystroke(parentId);
    }
    /**
     * Call this method if user stopped typing in the active channel
     * @param parentId The id of the parent message, if user were typing in a thread
     */
    async typingStopped(parentId) {
        const activeChannel = this.activeChannelSubject.getValue();
        await activeChannel?.stopTyping(parentId);
    }
    /**
     * The current list of channels
     */
    get channels() {
        return this.channelsSubject.getValue() || [];
    }
    /**
     * The current active channel
     */
    get activeChannel() {
        return this.activeChannelSubject.getValue() || undefined;
    }
    /**
     * The current active channel messages
     */
    get activeChannelMessages() {
        return this.activeChannelMessagesSubject.getValue() || [];
    }
    /**
     * The current thread replies
     */
    get activeChannelThreadReplies() {
        return this.activeThreadMessagesSubject.getValue() || [];
    }
    /**
     * Get the last 1200 reactions of a message in the current active channel. If you need to fetch more reactions please use the [following endpoint](/chat/docs/javascript/send_reaction/#paginating-reactions).
     * @deprecated use [`messageReactionsService.queryReactions()`](/chat/docs/sdk/angular/services/MessageReactionsService/#queryreactions) instead
     * @param messageId
     * @returns all reactions of a message
     */
    async getMessageReactions(messageId) {
        const reactions = [];
        const limit = 300;
        let offset = 0;
        const reactionsLimit = ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH;
        let lastPageSize = limit;
        while (lastPageSize === limit && reactions.length < reactionsLimit) {
            try {
                const response = await this.activeChannel?.getReactions(messageId, {
                    offset,
                    limit,
                });
                lastPageSize = response?.reactions?.length || 0;
                if (lastPageSize > 0) {
                    reactions.push(...response.reactions);
                }
                offset += lastPageSize;
            }
            catch (e) {
                this.notificationService.addTemporaryNotification('streamChat.Error loading reactions');
                throw e;
            }
        }
        return reactions;
    }
    /**
     * Marks the channel from the given message as unread
     * @param messageId
     * @returns the result of the request
     */
    async markMessageUnread(messageId) {
        if (!this.activeChannel) {
            return;
        }
        try {
            const response = await this.activeChannel.markUnread({
                message_id: messageId,
            });
            this.areReadEventsPaused = true;
            return response;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (e) {
            const error = JSON.parse(JSON.stringify(e));
            const data = error?.response?.data;
            if (data &&
                data.code === 4 &&
                data.StatusCode === 400 &&
                data.message?.includes('it is older than last')) {
                const count = /\d+ channel messages/
                    .exec(data.message)?.[0]
                    .match(/\d+/)?.[0];
                if (count) {
                    this.notificationService.addTemporaryNotification('streamChat.Error, only the first {{count}} message can be marked as unread', undefined, undefined, { count });
                    throw e;
                }
            }
            this.notificationService.addTemporaryNotification('streamChat.Error marking message as unread');
            throw e;
        }
    }
    messageUpdated(event) {
        this.ngZone.run(() => {
            const isThreadReply = event.message && event.message.parent_id;
            const channel = this.activeChannelSubject.getValue();
            if (!channel) {
                return;
            }
            // Get messages from state as message order could change, and message could've been deleted
            const messages = isThreadReply
                ? channel.state.threads[event?.message?.parent_id || '']
                : channel.state.messages;
            if (!messages) {
                return;
            }
            const messageIndex = messages.findIndex((m) => m.id === event?.message?.id);
            if (messageIndex !== -1 || event.type === 'message.deleted') {
                isThreadReply
                    ? this.activeThreadMessagesSubject.next([...messages])
                    : this.activeChannelMessagesSubject.next([...messages]);
                this.activeChannelPinnedMessagesSubject.next([
                    ...channel.state.pinnedMessages,
                ]);
            }
        });
    }
    messageReactionEventReceived(e) {
        this.ngZone.run(() => {
            const isThreadMessage = e.message && e.message.parent_id;
            let messages;
            (isThreadMessage
                ? this.activeThreadMessages$
                : this.activeChannelMessages$)
                .pipe(first())
                .subscribe((m) => (messages = m));
            const messageIndex = messages.findIndex((m) => m.id === e?.message?.id);
            if (messageIndex === -1) {
                return;
            }
            const message = messages[messageIndex];
            message.reaction_counts = { ...e.message?.reaction_counts };
            message.reaction_scores = { ...e.message?.reaction_scores };
            message.latest_reactions = [...(e.message?.latest_reactions || [])];
            message.own_reactions = [...(e.message?.own_reactions || [])];
            message.reaction_groups = { ...e.message?.reaction_groups };
            messages[messageIndex] = { ...message };
            isThreadMessage
                ? this.activeThreadMessagesSubject.next([...messages])
                : this.activeChannelMessagesSubject.next([...messages]);
        });
    }
    formatMessage(message) {
        const m = message;
        m.pinned_at = message.pinned_at ? new Date(message.pinned_at) : null;
        m.created_at = message.created_at
            ? new Date(message.created_at)
            : new Date();
        m.updated_at = message.updated_at
            ? new Date(message.updated_at)
            : new Date();
        message.status = message.status || 'received';
        return m;
    }
    isStreamMessage(message) {
        return !!message.readBy;
    }
    isFormatMessageResponse(message) {
        return message.created_at instanceof Date;
    }
    stopWatchForActiveChannelEvents(channel) {
        if (!channel) {
            return;
        }
        this.activeChannelSubscriptions.forEach((s) => s.unsubscribe());
        this.activeChannelSubscriptions = [];
    }
    async queryChannels(shouldSetActiveChannel, queryType) {
        if (!this.channelQuery) {
            throw new Error('Query channels called before initializing ChannelQuery instance');
        }
        try {
            this.channelQueryStateSubject.next({ state: 'in-progress' });
            const { channels, hasMorePage } = await ('query' in this.channelQuery
                ? this.channelQuery.query(queryType)
                : this.channelQuery(queryType));
            const filteredChannels = channels.filter((channel, index) => !channels.slice(0, index).find((c) => c.cid === channel.cid));
            filteredChannels.forEach((c) => {
                if (!this.channelSubscriptions[c.cid]) {
                    this.watchForChannelEvents(c);
                }
            });
            this.channelsSubject.next(filteredChannels);
            const currentActiveChannel = this.activeChannelSubject.getValue();
            if (currentActiveChannel &&
                !filteredChannels.find((c) => c.cid === currentActiveChannel?.cid)) {
                this.deselectActiveChannel();
            }
            else if (filteredChannels.length > 0 &&
                !currentActiveChannel &&
                shouldSetActiveChannel) {
                this.setAsActiveChannel(filteredChannels[0]);
            }
            this.hasMoreChannelsSubject.next(hasMorePage);
            this.channelQueryStateSubject.next({ state: 'success' });
            this.dismissErrorNotification?.();
            return channels;
        }
        catch (error) {
            this.channelQueryStateSubject.next({
                state: 'error',
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                error,
            });
            throw error;
        }
    }
    watchForChannelEvents(channel) {
        if (this.channelSubscriptions[channel.cid]) {
            this.channelSubscriptions[channel.cid]();
        }
        const unsubscribe = channel.on((event) => {
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
            const type = event.type;
            switch (type) {
                case 'message.new': {
                    this.ngZone.run(() => {
                        if (this.customNewMessageHandler) {
                            this.customNewMessageHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleNewMessage(event, channel);
                        }
                    });
                    break;
                }
                case 'channel.hidden': {
                    this.ngZone.run(() => {
                        if (this.customChannelHiddenHandler) {
                            this.customChannelHiddenHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelHidden(event);
                        }
                    });
                    break;
                }
                case 'channel.deleted': {
                    this.ngZone.run(() => {
                        if (this.customChannelDeletedHandler) {
                            this.customChannelDeletedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelDeleted(event);
                        }
                    });
                    break;
                }
                case 'channel.visible': {
                    this.ngZone.run(() => {
                        if (this.customChannelVisibleHandler) {
                            this.customChannelVisibleHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelVisible(event, channel);
                        }
                    });
                    break;
                }
                case 'channel.updated': {
                    this.ngZone.run(() => {
                        if (this.customChannelUpdatedHandler) {
                            this.customChannelUpdatedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelUpdate(event);
                        }
                    });
                    break;
                }
                case 'channel.truncated': {
                    this.ngZone.run(() => {
                        if (this.customChannelTruncatedHandler) {
                            this.customChannelTruncatedHandler(event, channel, this.channelListSetter, this.messageListSetter, this.threadListSetter, this.parentMessageSetter);
                        }
                        else {
                            this.handleChannelTruncate(event);
                        }
                    });
                    break;
                }
                case 'capabilities.changed': {
                    this.ngZone.run(() => {
                        const cid = event.cid;
                        if (cid) {
                            const currentChannels = this.channelsSubject.getValue();
                            const index = currentChannels?.findIndex((c) => c.cid === cid);
                            if (index !== -1 && index !== undefined) {
                                this.channelsSubject.next([...currentChannels]);
                                if (cid === this.activeChannelSubject.getValue()?.cid) {
                                    this.activeChannelSubject.next(this.activeChannelSubject.getValue());
                                }
                            }
                        }
                    });
                    break;
                }
            }
        });
        this.channelSubscriptions[channel.cid] = unsubscribe.unsubscribe;
    }
    handleNewMessage(_, channel) {
        const channelIndex = this.channels.findIndex((c) => c.cid === channel.cid);
        this.channels.splice(channelIndex, 1);
        this.channelsSubject.next([channel, ...this.channels]);
    }
    handleChannelHidden(event) {
        this.removeChannel(event.channel.cid, false);
    }
    handleChannelDeleted(event) {
        this.removeChannel(event.channel.cid, false);
    }
    handleChannelVisible(event, channel) {
        if (!this.channels.find((c) => c.cid === event.cid)) {
            this.ngZone.run(() => this.channelsSubject.next([...this.channels, channel]));
        }
    }
    handleChannelUpdate(event) {
        const channelIndex = this.channels.findIndex((c) => c.cid === event.channel.cid);
        if (channelIndex !== -1) {
            const channel = this.channels[channelIndex];
            const notIncludedProperies = {
                hidden: channel.data?.hidden || false,
                own_capabilities: channel.data?.own_capabilities || [],
            };
            channel.data = {
                ...event.channel,
                ...notIncludedProperies,
            };
            this.channelsSubject.next([...this.channels]);
            if (event.channel?.cid === this.activeChannelSubject.getValue()?.cid) {
                this.activeChannelSubject.next(channel);
            }
        }
    }
    handleChannelTruncate(event) {
        const channelIndex = this.channels.findIndex((c) => c.cid === event.channel.cid);
        if (channelIndex !== -1) {
            this.channels[channelIndex].state.messages = [];
            this.channelsSubject.next([...this.channels]);
            if (event.channel?.cid === this.activeChannelSubject.getValue()?.cid) {
                const channel = this.activeChannelSubject.getValue();
                channel.state.messages = [];
                this.activeChannelSubject.next(channel);
                this.activeChannelMessagesSubject.next([]);
                this.activeParentMessageIdSubject.next(undefined);
                this.activeThreadMessagesSubject.next([]);
            }
        }
    }
    get canSendReadEvents() {
        const channel = this.activeChannelSubject.getValue();
        if (!channel) {
            return false;
        }
        const capabilites = channel.data?.own_capabilities;
        return capabilites.indexOf('read-events') !== -1;
    }
    transformToStreamMessage(message, channel) {
        const isThreadMessage = !!message.parent_id;
        if (this.isStreamMessage(message) &&
            this.isFormatMessageResponse(message)) {
            if (message.quoted_message) {
                message.quoted_message.translation = getMessageTranslation(message.quoted_message, channel, this.chatClientService.chatClient.user);
            }
            message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
            return message;
        }
        else {
            if (message.quoted_message) {
                message.quoted_message.translation = getMessageTranslation(message.quoted_message, channel, this.chatClientService.chatClient.user);
            }
            if (this.isFormatMessageResponse(message)) {
                message.readBy = isThreadMessage
                    ? []
                    : channel
                        ? getReadBy(message, channel)
                        : [];
                message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
                return message;
            }
            else {
                message = this.formatMessage(message);
                message.readBy = isThreadMessage
                    ? []
                    : channel
                        ? getReadBy(message, channel)
                        : [];
                message.translation = getMessageTranslation(message, channel, this.chatClientService.chatClient.user);
                return message;
            }
        }
    }
    handleTypingStartEvent(event) {
        if (event.user?.id === this.chatClientService.chatClient.user?.id) {
            return;
        }
        const isTypingInThread = !!event.parent_id;
        if (isTypingInThread &&
            event.parent_id !== this.activeParentMessageIdSubject.getValue()) {
            return;
        }
        const subject = isTypingInThread
            ? this.usersTypingInThreadSubject
            : this.usersTypingInChannelSubject;
        const users = subject.getValue();
        const user = event.user;
        if (user && !users.find((u) => u.id === user.id)) {
            users.push(user);
            subject.next([...users]);
        }
    }
    handleTypingStopEvent(event) {
        const usersTypingInChannel = this.usersTypingInChannelSubject.getValue();
        const usersTypingInThread = this.usersTypingInThreadSubject.getValue();
        const user = event.user;
        if (user && usersTypingInChannel.find((u) => u.id === user.id)) {
            usersTypingInChannel.splice(usersTypingInChannel.findIndex((u) => u.id === user.id), 1);
            this.usersTypingInChannelSubject.next([...usersTypingInChannel]);
            return;
        }
        if (user && usersTypingInThread.find((u) => u.id === user.id)) {
            usersTypingInThread.splice(usersTypingInThread.findIndex((u) => u.id === user.id), 1);
            this.usersTypingInThreadSubject.next([...usersTypingInThread]);
            return;
        }
    }
    updateLatestMessages(event) {
        if (event.message?.user?.id !== this.chatClientService?.chatClient.user?.id) {
            return;
        }
        const latestMessages = this.latestMessageDateByUserByChannelsSubject.getValue();
        if (!event.message?.created_at) {
            return;
        }
        const channelId = event?.message?.cid;
        if (!channelId) {
            return;
        }
        const messageDate = new Date(event.message.created_at);
        if (!latestMessages[channelId] ||
            latestMessages[channelId]?.getTime() < messageDate.getTime()) {
            latestMessages[channelId] = messageDate;
            this.latestMessageDateByUserByChannelsSubject.next({
                ...latestMessages,
            });
        }
    }
    setChannelState(channel) {
        channel.state.messages.forEach((m) => {
            m.readBy = getReadBy(m, channel);
            m.translation = getMessageTranslation(m, channel, this.chatClientService.chatClient.user);
            if (m.quoted_message) {
                m.quoted_message.translation = getMessageTranslation(m.quoted_message, channel, this.chatClientService.chatClient.user);
            }
        });
        this.markRead(channel);
        this.activeChannelMessagesSubject.next([...channel.state.messages]);
        this.activeChannelPinnedMessagesSubject.next([
            ...channel.state.pinnedMessages,
        ]);
        this.activeParentMessageIdSubject.next(undefined);
        this.activeThreadMessagesSubject.next([]);
        this.messageToQuoteSubject.next(undefined);
        this.usersTypingInChannelSubject.next([]);
        this.usersTypingInThreadSubject.next([]);
    }
    markRead(channel, isThrottled = true) {
        if (this.canSendReadEvents &&
            this.shouldMarkActiveChannelAsRead &&
            !this.areReadEventsPaused) {
            if (isThrottled) {
                this.markReadThrottled(channel);
            }
            else {
                void channel.markRead();
            }
        }
    }
    markReadThrottled(channel) {
        if (!this.markReadTimeout) {
            this.markRead(channel, false);
            this.markReadTimeout = setTimeout(() => {
                this.flushMarkReadQueue();
            }, this.markReadThrottleTime);
        }
        else {
            clearTimeout(this.markReadTimeout);
            this.scheduledMarkReadRequest = () => this.markRead(channel, false);
            this.markReadTimeout = setTimeout(() => {
                this.flushMarkReadQueue();
            }, this.markReadThrottleTime);
        }
    }
    flushMarkReadQueue() {
        this.scheduledMarkReadRequest?.();
        this.scheduledMarkReadRequest = undefined;
        clearTimeout(this.markReadTimeout);
        this.markReadTimeout = undefined;
    }
    async _init(settings) {
        this.shouldSetActiveChannel = settings.shouldSetActiveChannel;
        this.messagePageSize = settings.messagePageSize;
        this.clientEventsSubscription = this.chatClientService.events$.subscribe((notification) => void this.handleNotification(notification));
        try {
            const result = await this.queryChannels(this.shouldSetActiveChannel, 'first-page');
            return result;
        }
        catch (error) {
            this.dismissErrorNotification =
                this.notificationService.addPermanentNotification('streamChat.Error loading channels', 'error');
            throw error;
        }
    }
}
/**
 * @internal
 */
ChannelService.MAX_MESSAGE_REACTIONS_TO_FETCH = 1200;
ChannelService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChannelService, deps: [{ token: i1.ChatClientService }, { token: i0.NgZone }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ChannelService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChannelService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChannelService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i0.NgZone }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,