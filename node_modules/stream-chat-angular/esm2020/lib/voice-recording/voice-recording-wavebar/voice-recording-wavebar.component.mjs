import { Component, Input, ViewChild, } from '@angular/core';
import { resampleWaveForm } from '../../wave-form-sampler';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * This component can be used to visualize the wave bar of a voice recording
 */
export class VoiceRecordingWavebarComponent {
    constructor(ngZone, cdRef) {
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        /**
         * The waveform data to visualize
         */
        this.waveFormData = [];
        this.resampledWaveFormData = [];
        this.progress = 0;
        this.isDragging = false;
        this.sampleSize = 40;
        this.isViewInited = false;
    }
    ngOnInit() {
        this.containerSizeChanged();
        if (this.container?.nativeElement) {
            this.ngZone.runOutsideAngular(() => {
                new ResizeObserver(() => {
                    this.containerSizeChanged();
                }).observe(this.container.nativeElement);
            });
        }
    }
    ngOnChanges(changes) {
        if (changes.waveFormData) {
            this.resampledWaveFormData = resampleWaveForm(this.waveFormData, this.sampleSize);
        }
        if (changes.audioElement) {
            this.ngZone.runOutsideAngular(() => {
                this.audioElement?.addEventListener('timeupdate', () => {
                    const progress = (this.audioElement?.currentTime || 0) / (this.duration || 0) || 0;
                    if (Math.abs(progress - this.progress) >= 0.02) {
                        this.ngZone.run(() => {
                            this.progress = progress;
                            this.cdRef.detectChanges();
                        });
                    }
                });
            });
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    seek(event) {
        const containerWidth = this.container?.nativeElement?.getBoundingClientRect().width || 0;
        const containerStart = this.container?.nativeElement?.getBoundingClientRect()?.x || 0;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        const progress = (event.x - containerStart) / containerWidth;
        if (!isNaN(progress) && this.audioElement) {
            const duration = this.duration || 0;
            const time = duration * progress;
            this.audioElement.currentTime = time;
        }
    }
    trackByIndex(index) {
        return index;
    }
    containerSizeChanged() {
        if (!this.container?.nativeElement) {
            return;
        }
        const containerWidth = this.container.nativeElement.clientWidth;
        if (containerWidth === 0) {
            return;
        }
        const barWidth = +getComputedStyle(this.container.nativeElement)
            .getPropertyValue('--str-chat__voice-recording-amplitude-bar-width')
            .replace('px', '');
        const barGap = +getComputedStyle(this.container.nativeElement)
            .getPropertyValue('--str-chat__voice-recording-amplitude-bar-gap-width')
            .replace('px', '');
        if (!isNaN(barWidth) && !isNaN(barGap)) {
            const sampleSize = Math.floor(containerWidth / (barWidth + barGap));
            if (sampleSize !== this.sampleSize &&
                !isNaN(sampleSize) &&
                sampleSize !== Infinity) {
                this.ngZone.run(() => {
                    this.sampleSize = sampleSize;
                    this.resampledWaveFormData = resampleWaveForm(this.waveFormData, this.sampleSize);
                    if (this.isViewInited) {
                        this.cdRef.detectChanges();
                    }
                });
            }
        }
    }
}
VoiceRecordingWavebarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: VoiceRecordingWavebarComponent, deps: [{ token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
VoiceRecordingWavebarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: VoiceRecordingWavebarComponent, selector: "stream-voice-recording-wavebar", inputs: { audioElement: "audioElement", waveFormData: "waveFormData", duration: "duration" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<!--eslint-disable @angular-eslint/template/click-events-have-key-events-->\n<div\n  #container\n  class=\"str-chat__wave-progress-bar__track\"\n  data-testid=\"wave-progress-bar-track\"\n  role=\"progressbar\"\n  (mousedown)=\"isDragging = true\"\n  (mouseup)=\"isDragging = false\"\n  (mouseleave)=\"isDragging = false\"\n  (mousemove)=\"isDragging ? seek($event) : null\"\n  (click)=\"seek($event)\"\n>\n  <!--eslint-enable @angular-eslint/template/click-events-have-key-events-->\n  <div\n    *ngFor=\"\n      let dataPoint of resampledWaveFormData;\n      let i = index;\n      trackBy: trackByIndex\n    \"\n    class=\"str-chat__wave-progress-bar__amplitude-bar\"\n    [class.str-chat__wave-progress-bar__amplitude-bar--active]=\"\n      progress > i / resampledWaveFormData.length\n    \"\n    [style.--str-chat__wave-progress-bar__amplitude-bar-height]=\"\n      dataPoint ? dataPoint * 100 + '%' : '0%'\n    \"\n  ></div>\n  <div\n    class=\"str-chat__wave-progress-bar__progress-indicator\"\n    data-testid=\"wave-progress-bar-progress-indicator\"\n    [ngStyle]=\"{ 'inset-inline-start': progress * 100 + '%' }\"\n  ></div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: VoiceRecordingWavebarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-voice-recording-wavebar', template: "<!--eslint-disable @angular-eslint/template/click-events-have-key-events-->\n<div\n  #container\n  class=\"str-chat__wave-progress-bar__track\"\n  data-testid=\"wave-progress-bar-track\"\n  role=\"progressbar\"\n  (mousedown)=\"isDragging = true\"\n  (mouseup)=\"isDragging = false\"\n  (mouseleave)=\"isDragging = false\"\n  (mousemove)=\"isDragging ? seek($event) : null\"\n  (click)=\"seek($event)\"\n>\n  <!--eslint-enable @angular-eslint/template/click-events-have-key-events-->\n  <div\n    *ngFor=\"\n      let dataPoint of resampledWaveFormData;\n      let i = index;\n      trackBy: trackByIndex\n    \"\n    class=\"str-chat__wave-progress-bar__amplitude-bar\"\n    [class.str-chat__wave-progress-bar__amplitude-bar--active]=\"\n      progress > i / resampledWaveFormData.length\n    \"\n    [style.--str-chat__wave-progress-bar__amplitude-bar-height]=\"\n      dataPoint ? dataPoint * 100 + '%' : '0%'\n    \"\n  ></div>\n  <div\n    class=\"str-chat__wave-progress-bar__progress-indicator\"\n    data-testid=\"wave-progress-bar-progress-indicator\"\n    [ngStyle]=\"{ 'inset-inline-start': progress * 100 + '%' }\"\n  ></div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { audioElement: [{
                type: Input
            }], waveFormData: [{
                type: Input
            }], duration: [{
                type: Input
            }], container: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,