import { Injectable } from '@angular/core';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { StreamChat } from 'stream-chat';
import { version } from '../assets/version';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./notification.service";
/**
 * The `ChatClient` service connects the user to the Stream chat.
 */
export class ChatClientService {
    constructor(ngZone, notificationService) {
        this.ngZone = ngZone;
        this.notificationService = notificationService;
        this.notificationSubject = new ReplaySubject(1);
        this.connectionStateSubject = new ReplaySubject(1);
        this.appSettingsSubject = new BehaviorSubject(undefined);
        this.pendingInvitesSubject = new BehaviorSubject([]);
        this.userSubject = new ReplaySubject(1);
        this.subscriptions = [];
        this.trackPendingChannelInvites = true;
        this.events$ = this.notificationSubject.asObservable();
        this.connectionState$ = this.connectionStateSubject.asObservable();
        this.appSettings$ = this.appSettingsSubject.asObservable();
        this.pendingInvites$ = this.pendingInvitesSubject.asObservable();
        this.user$ = this.userSubject.asObservable();
    }
    /**
     * Creates a [`StreamChat`](https://github.com/GetStream/stream-chat-js/blob/668b3e5521339f4e14fc657834531b4c8bf8176b/src/client.ts#L124) instance using the provided `apiKey`, and connects a user with the given meta data and token. More info about [connecting users](/chat/docs/javascript/init_and_users/) can be found in the platform documentation.
     * @param apiKey
     * @param userOrId you can emit this for anonymous logins
     * @param userTokenOrProvider You can provide:<ul>
     *  <li> a token, </li>
     *  <li> a token provider, a method that returns `Promise<string>`, which can be called when the previous token expires (recommended setup for production applications)</li>
     *  <li> the keyword 'guest' to connect as [guest user](/chat/docs/javascript/authless_users/#guest-users) </li>
     *  <li> the keyword 'anonymous' to connect as [anonymous user](/chat/docs/javascript/authless_users/#anonymous-users) </li>
     *  </ul>
     * @param clientOptions Setting to provide to the Stream client instance
     */
    async init(apiKey, userOrId, userTokenOrProvider, clientOptions) {
        if (this.chatClient && this.chatClient.key !== apiKey) {
            this.appSettingsSubject.next(undefined);
            this.appSettingsPromise = undefined;
        }
        this.trackPendingChannelInvites =
            clientOptions?.trackPendingChannelInvites === true;
        this.chatClient = StreamChat.getInstance(apiKey, clientOptions);
        if ('sdkIdentifier' in this.chatClient) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
            this.chatClient.sdkIdentifier = {
                name: 'angular',
                version,
            };
        }
        else {
            const userAgent = this.chatClient.getUserAgent();
            if (!userAgent.includes('stream-chat-angular')) {
                const parts = userAgent.split('-');
                const jsVersion = parts[parts.length - 1] ?? '0.0.0';
                this.chatClient.setUserAgent(`stream-chat-angular-v${version}-llc-v${jsVersion}`);
            }
        }
        this.chatClient.recoverStateOnReconnect = false;
        this.chatClient.devToken;
        let result;
        await this.ngZone.runOutsideAngular(async () => {
            const user = typeof userOrId === 'string' ? { id: userOrId } : userOrId;
            try {
                result = await ({
                    guest: () => this.chatClient.setGuestUser(user),
                    anonymous: () => this.chatClient.connectAnonymousUser(),
                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                }[`${userTokenOrProvider}`] ??
                    (() => this.chatClient.connectUser(user, userTokenOrProvider)))();
            }
            catch (error) {
                this.notificationService.addPermanentNotification('streamChat.Error connecting to chat, refresh the page to try again.', 'error');
                throw error;
            }
            this.userSubject.next(this.chatClient.user ? { ...this.chatClient.user } : undefined);
        });
        if (this.chatClient.user?.id && this.trackPendingChannelInvites) {
            const channels = await this.chatClient.queryChannels({
                invite: 'pending',
                members: { $in: [this.chatClient.user?.id] },
            } // TODO: find out why we need this typecast
            );
            this.pendingInvitesSubject.next(channels);
        }
        this.subscriptions.push(this.chatClient.on((e) => {
            this.updateUser(e);
            this.updatePendingInvites(e);
            this.notificationSubject.next({
                eventType: e.type,
                event: e,
            });
        }));
        let removeNotification;
        this.subscriptions.push(this.chatClient.on('connection.changed', (e) => {
            this.ngZone.run(() => {
                const isOnline = e.online;
                if (isOnline) {
                    if (removeNotification) {
                        removeNotification();
                    }
                }
                else {
                    removeNotification =
                        this.notificationService.addPermanentNotification('streamChat.Connection failure, reconnecting now...');
                }
                this.connectionStateSubject.next(isOnline ? 'online' : 'offline');
            });
        }));
        return result;
    }
    /**
     * Disconnects the current user, and closes the WebSocket connection. Useful when disconnecting a chat user, use in combination with [`reset`](/chat/docs/sdk/angular/services/ChannelService/#reset/).
     */
    async disconnectUser() {
        this.pendingInvitesSubject.next([]);
        await this.chatClient.disconnectUser();
        this.userSubject.next(undefined);
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    /**
     * Loads the current [application settings](/chat/docs/javascript/app_setting_overview/), if the application settings have already been loaded, it does nothing.
     */
    async getAppSettings() {
        if (this.appSettingsPromise) {
            return;
        }
        if (this.appSettingsSubject.getValue()) {
            return;
        }
        this.appSettingsPromise = this.chatClient.getAppSettings();
        void this.appSettingsPromise.finally(() => {
            this.appSettingsPromise = undefined;
        });
        const settings = await this.appSettingsPromise;
        this.appSettingsSubject.next(settings.app || {});
    }
    /**
     * Flag the message with the given ID. If you want to know [more about flags](/chat/docs/javascript/moderation/) check out the platform documentation.
     * @param messageId
     */
    async flagMessage(messageId) {
        await this.chatClient.flagMessage(messageId);
    }
    /**
     * Searches for users in the application that have ID or name matching the provided search term
     * @param searchTerm
     * @returns The users matching the search
     */
    async autocompleteUsers(searchTerm) {
        if (!searchTerm) {
            return [];
        }
        const result = await this.chatClient.queryUsers({
            $or: [
                { id: { $autocomplete: searchTerm } },
                { name: { $autocomplete: searchTerm } },
            ],
        }); // TODO: find out why we need this typecast
        return result.users.filter((u) => u.id !== this.chatClient?.user?.id);
    }
    updatePendingInvites(e) {
        if (!this.trackPendingChannelInvites) {
            return;
        }
        if (e.member?.user?.id === this.chatClient.user?.id && e.channel) {
            const pendingInvites = this.pendingInvitesSubject.getValue();
            if (e.type === 'notification.invited') {
                const channel = this.chatClient.channel(e.channel?.type, e.channel?.id);
                this.pendingInvitesSubject.next([...pendingInvites, channel]);
            }
            else if (e.type === 'notification.invite_accepted' ||
                e.type === 'notification.invite_rejected') {
                const index = pendingInvites.findIndex((i) => i?.cid === e.channel?.cid);
                if (index !== -1) {
                    pendingInvites.splice(index, 1);
                    this.pendingInvitesSubject.next([...pendingInvites]);
                }
            }
        }
    }
    updateUser(e) {
        if (typeof e.total_unread_count !== 'undefined') {
            let user;
            this.userSubject.pipe(take(1)).subscribe((u) => {
                user = u;
            });
            if (user && user.total_unread_count !== e.total_unread_count) {
                this.userSubject.next({
                    ...user,
                    total_unread_count: e.total_unread_count,
                });
            }
        }
        if (typeof e.unread_channels !== 'undefined') {
            let user;
            this.userSubject.pipe(take(1)).subscribe((u) => {
                user = u;
            });
            if (user && user.unread_channels !== e.unread_channels) {
                this.userSubject.next({
                    ...user,
                    unread_channels: e.unread_channels,
                });
            }
        }
        if (typeof e.unread_count !== 'undefined') {
            let user;
            this.userSubject.pipe(take(1)).subscribe((u) => {
                user = u;
            });
            if (user && user.unread_count !== e.unread_count) {
                this.userSubject.next({
                    ...user,
                    unread_count: e.unread_count,
                });
            }
        }
        if (e.type === 'user.updated' &&
            this.chatClient.user &&
            e.user?.id === this.chatClient.user.id) {
            this.userSubject.next({ ...this.chatClient.user });
        }
    }
}
ChatClientService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChatClientService, deps: [{ token: i0.NgZone }, { token: i1.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ChatClientService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChatClientService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChatClientService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,