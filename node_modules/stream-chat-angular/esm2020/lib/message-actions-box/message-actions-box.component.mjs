import { Component, Input, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../custom-templates.service";
import * as i2 from "../message-actions.service";
import * as i3 from "@angular/common";
import * as i4 from "../message-reactions-selector/message-reactions-selector.component";
import * as i5 from "@ngx-translate/core";
/**
 * The `MessageActionsBox` component displays a list of message actions (i.e edit), that can be opened or closed. You can find the [list of the supported actions](/chat/docs/sdk/angular/concepts/message-interactions/) in the message interaction guide.
 */
export class MessageActionsBoxComponent {
    constructor(customTemplatesService, messageActionsService, cdRef) {
        this.customTemplatesService = customTemplatesService;
        this.messageActionsService = messageActionsService;
        this.cdRef = cdRef;
        /**
         * Indicates if the message actions are belonging to a message that was sent by the current user or not.
         */
        this.isMine = false;
        /**
         * The list of [channel capabilities](/chat/docs/javascript/channel_capabilities/) that are enabled for the current user, the list of [supported interactions](/chat/docs/sdk/angular/concepts/message-interactions) can be found in our message interaction guide. Unathorized actions won't be displayed on the UI.
         */
        this.enabledActions = [];
        this.visibleMessageActionItems = [];
        this.isEditModalOpen = false;
        this.customActions = [];
        this.subscriptions = [];
        this.isViewInited = false;
        this.messageActionItems = this.messageActionsService.defaultActions;
    }
    ngOnInit() {
        this.subscriptions.push(this.messageActionsService.customActions$.subscribe((actions) => {
            this.customActions = actions;
            this.setVisibleActions();
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.messageActionsService.messageToEdit$.subscribe((m) => {
            let isEditModalOpen = false;
            if (m && m.id === this.message?.id) {
                isEditModalOpen = true;
            }
            if (isEditModalOpen !== this.isEditModalOpen) {
                this.isEditModalOpen = isEditModalOpen;
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
        }));
    }
    ngOnChanges(changes) {
        if (changes.isMine || changes.enabledActions || changes.message) {
            this.setVisibleActions();
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    getActionLabel(actionLabelOrTranslationKey) {
        return typeof actionLabelOrTranslationKey === 'string'
            ? actionLabelOrTranslationKey
            : actionLabelOrTranslationKey(this.message);
    }
    getReactionSelectorTemplateContext() {
        return {
            messageId: this.message?.id,
            ownReactions: this.message?.own_reactions || [],
        };
    }
    getMessageActionTemplateContext(item) {
        if (this.isReactAction(item)) {
            return {};
        }
        else {
            return {
                actionHandler: item.actionHandler,
                actionHandlerExtraParams: {
                    isMine: this.isMine,
                    messageTextHtmlElement: this.messageTextHtmlElement,
                },
                actionName: item.actionName,
                message: this.message,
                actionLabelOrTranslationKey: item.actionLabelOrTranslationKey,
            };
        }
    }
    trackByActionName(_, item) {
        return item.actionName;
    }
    isReactAction(item) {
        return item.actionName === 'react';
    }
    setVisibleActions() {
        if (!this.message) {
            this.visibleMessageActionItems = [];
        }
        else {
            this.visibleMessageActionItems = [
                ...this.messageActionItems,
                ...this.customActions,
            ].filter((item) => item.isVisible(this.enabledActions, this.isMine, this.message));
        }
    }
}
MessageActionsBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageActionsBoxComponent, deps: [{ token: i1.CustomTemplatesService }, { token: i2.MessageActionsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MessageActionsBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MessageActionsBoxComponent, selector: "stream-message-actions-box", inputs: { isMine: "isMine", message: "message", messageTextHtmlElement: "messageTextHtmlElement", enabledActions: "enabledActions" }, usesOnChanges: true, ngImport: i0, template: "<div\n  #actionBox\n  data-testid=\"action-box\"\n  class=\"str-chat__message-actions-box str-chat__message-actions-box-angular str-chat__message-actions-box--open\"\n>\n  <ul class=\"str-chat__message-actions-list\">\n    <ng-container\n      *ngFor=\"let item of visibleMessageActionItems; trackBy: trackByActionName\"\n    >\n      <ng-container [ngSwitch]=\"item.actionName\">\n        <ng-container *ngSwitchCase=\"'react'\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              (customTemplatesService.messageReactionsSelectorTemplate$\n                | async) || defaultReactionSelector;\n              context: getReactionSelectorTemplateContext()\n            \"\n          ></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <ng-container\n            *ngTemplateOutlet=\"\n              (customTemplatesService.messageActionsBoxItemTemplate$ | async) ||\n                defaultMessageActionItem;\n              context: getMessageActionTemplateContext(item)\n            \"\n          ></ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ul>\n</div>\n\n<ng-template\n  #defaultMessageActionItem\n  let-actionName=\"actionName\"\n  let-actionHandler=\"actionHandler\"\n  let-actionLabelOrTranslationKey=\"actionLabelOrTranslationKey\"\n  let-actionHandlerExtraParams=\"actionHandlerExtraParams\"\n>\n  <button\n    class=\"str-chat__message-actions-list-item-button\"\n    [attr.data-testid]=\"actionName + '-action'\"\n    (click)=\"actionHandler(message, actionHandlerExtraParams)\"\n  >\n    <li class=\"str-chat__message-actions-list-item\">\n      {{ getActionLabel(actionLabelOrTranslationKey) | translate }}\n    </li>\n  </button>\n</ng-template>\n\n<ng-template\n  #defaultReactionSelector\n  let-messageId=\"messageId\"\n  let-ownReactions=\"ownReactions\"\n>\n  <stream-message-reactions-selector\n    [messageId]=\"message?.id\"\n    [ownReactions]=\"message?.own_reactions || []\"\n  ></stream-message-reactions-selector>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i4.MessageReactionsSelectorComponent, selector: "stream-message-reactions-selector", inputs: ["ownReactions", "messageId"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageActionsBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-message-actions-box', template: "<div\n  #actionBox\n  data-testid=\"action-box\"\n  class=\"str-chat__message-actions-box str-chat__message-actions-box-angular str-chat__message-actions-box--open\"\n>\n  <ul class=\"str-chat__message-actions-list\">\n    <ng-container\n      *ngFor=\"let item of visibleMessageActionItems; trackBy: trackByActionName\"\n    >\n      <ng-container [ngSwitch]=\"item.actionName\">\n        <ng-container *ngSwitchCase=\"'react'\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              (customTemplatesService.messageReactionsSelectorTemplate$\n                | async) || defaultReactionSelector;\n              context: getReactionSelectorTemplateContext()\n            \"\n          ></ng-container>\n        </ng-container>\n        <ng-container *ngSwitchDefault>\n          <ng-container\n            *ngTemplateOutlet=\"\n              (customTemplatesService.messageActionsBoxItemTemplate$ | async) ||\n                defaultMessageActionItem;\n              context: getMessageActionTemplateContext(item)\n            \"\n          ></ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ul>\n</div>\n\n<ng-template\n  #defaultMessageActionItem\n  let-actionName=\"actionName\"\n  let-actionHandler=\"actionHandler\"\n  let-actionLabelOrTranslationKey=\"actionLabelOrTranslationKey\"\n  let-actionHandlerExtraParams=\"actionHandlerExtraParams\"\n>\n  <button\n    class=\"str-chat__message-actions-list-item-button\"\n    [attr.data-testid]=\"actionName + '-action'\"\n    (click)=\"actionHandler(message, actionHandlerExtraParams)\"\n  >\n    <li class=\"str-chat__message-actions-list-item\">\n      {{ getActionLabel(actionLabelOrTranslationKey) | translate }}\n    </li>\n  </button>\n</ng-template>\n\n<ng-template\n  #defaultReactionSelector\n  let-messageId=\"messageId\"\n  let-ownReactions=\"ownReactions\"\n>\n  <stream-message-reactions-selector\n    [messageId]=\"message?.id\"\n    [ownReactions]=\"message?.own_reactions || []\"\n  ></stream-message-reactions-selector>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.CustomTemplatesService }, { type: i2.MessageActionsService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { isMine: [{
                type: Input
            }], message: [{
                type: Input
            }], messageTextHtmlElement: [{
                type: Input
            }], enabledActions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,