import { Component, } from '@angular/core';
import { getChannelDisplayText } from '../get-channel-display-text';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../custom-templates.service";
import * as i3 from "../chat-client.service";
import * as i4 from "@angular/common";
import * as i5 from "../avatar-placeholder/avatar-placeholder.component";
import * as i6 from "@ngx-translate/core";
/**
 * The `ChannelHeader` component displays the avatar and name of the currently active channel along with member and watcher information. You can read about [the difference between members and watchers](/chat/docs/javascript/watch_channel/#watchers-vs-members) in the platform documentation. Please note that number of watchers is only displayed if the user has [`connect-events` capability](/chat/docs/javascript/channel_capabilities/)
 */
export class ChannelHeaderComponent {
    constructor(channelService, customTemplatesService, cdRef, chatClientService) {
        this.channelService = channelService;
        this.customTemplatesService = customTemplatesService;
        this.cdRef = cdRef;
        this.chatClientService = chatClientService;
        this.subscriptions = [];
        this.channelService.activeChannel$.subscribe((c) => {
            this.activeChannel = c;
            const capabilities = this.activeChannel?.data
                ?.own_capabilities;
            if (!capabilities) {
                return;
            }
            this.canReceiveConnectEvents =
                capabilities.indexOf('connect-events') !== -1;
        });
    }
    ngOnInit() {
        this.subscriptions.push(this.customTemplatesService.channelActionsTemplate$.subscribe((template) => {
            this.channelActionsTemplate = template;
            this.cdRef.detectChanges();
        }));
        this.subscriptions.push(this.customTemplatesService.channelHeaderInfoTemplate$.subscribe((template) => {
            this.channelHeaderInfoTemplate = template;
            this.cdRef.detectChanges();
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    getChannelActionsContext() {
        return { channel: this.activeChannel };
    }
    getChannelInfoContext() {
        return { channel: this.activeChannel };
    }
    get memberCountParam() {
        return { memberCount: this.activeChannel?.data?.member_count || 0 };
    }
    get watcherCountParam() {
        return { watcherCount: this.activeChannel?.state?.watcher_count || 0 };
    }
    get displayText() {
        if (!this.activeChannel) {
            return '';
        }
        return getChannelDisplayText(this.activeChannel, this.chatClientService.chatClient.user);
    }
    get avatarName() {
        return this.activeChannel?.data?.name;
    }
}
ChannelHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChannelHeaderComponent, deps: [{ token: i1.ChannelService }, { token: i2.CustomTemplatesService }, { token: i0.ChangeDetectorRef }, { token: i3.ChatClientService }], target: i0.ɵɵFactoryTarget.Component });
ChannelHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: ChannelHeaderComponent, selector: "stream-channel-header", ngImport: i0, template: "<div class=\"str-chat__header-livestream str-chat__channel-header\">\n  <ng-content></ng-content>\n  <stream-avatar-placeholder\n    type=\"channel\"\n    location=\"channel-header\"\n    imageUrl=\"{{ activeChannel?.data?.image }}\"\n    name=\"{{ avatarName }}\"\n    [channel]=\"activeChannel\"\n  ></stream-avatar-placeholder>\n  <div class=\"str-chat__header-livestream-left str-chat__channel-header-end\">\n    <p\n      data-testid=\"name\"\n      class=\"str-chat__header-livestream-left--title str-chat__channel-header-title\"\n    >\n      {{ displayText }}\n    </p>\n    <ng-container\n      *ngTemplateOutlet=\"\n        channelHeaderInfoTemplate || defaultChannelInfo;\n        context: getChannelInfoContext()\n      \"\n    ></ng-container>\n    <ng-template #defaultChannelInfo>\n      <p\n        data-testid=\"info\"\n        class=\"str-chat__header-livestream-left--members str-chat__channel-header-info\"\n      >\n        {{'streamChat.{{ memberCount }} members' | translate:memberCountParam}}\n        {{canReceiveConnectEvents ? ('streamChat.{{ watcherCount }} online' |\n        translate:watcherCountParam) : ''}}\n      </p>\n    </ng-template>\n  </div>\n  <ng-container *ngIf=\"channelActionsTemplate\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        channelActionsTemplate;\n        context: getChannelActionsContext()\n      \"\n    ></ng-container>\n  </ng-container>\n</div>\n", dependencies: [{ kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i5.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { kind: "pipe", type: i6.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: ChannelHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-channel-header', template: "<div class=\"str-chat__header-livestream str-chat__channel-header\">\n  <ng-content></ng-content>\n  <stream-avatar-placeholder\n    type=\"channel\"\n    location=\"channel-header\"\n    imageUrl=\"{{ activeChannel?.data?.image }}\"\n    name=\"{{ avatarName }}\"\n    [channel]=\"activeChannel\"\n  ></stream-avatar-placeholder>\n  <div class=\"str-chat__header-livestream-left str-chat__channel-header-end\">\n    <p\n      data-testid=\"name\"\n      class=\"str-chat__header-livestream-left--title str-chat__channel-header-title\"\n    >\n      {{ displayText }}\n    </p>\n    <ng-container\n      *ngTemplateOutlet=\"\n        channelHeaderInfoTemplate || defaultChannelInfo;\n        context: getChannelInfoContext()\n      \"\n    ></ng-container>\n    <ng-template #defaultChannelInfo>\n      <p\n        data-testid=\"info\"\n        class=\"str-chat__header-livestream-left--members str-chat__channel-header-info\"\n      >\n        {{'streamChat.{{ memberCount }} members' | translate:memberCountParam}}\n        {{canReceiveConnectEvents ? ('streamChat.{{ watcherCount }} online' |\n        translate:watcherCountParam) : ''}}\n      </p>\n    </ng-template>\n  </div>\n  <ng-container *ngIf=\"channelActionsTemplate\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        channelActionsTemplate;\n        context: getChannelActionsContext()\n      \"\n    ></ng-container>\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.CustomTemplatesService }, { type: i0.ChangeDetectorRef }, { type: i3.ChatClientService }]; } });
//# sourceMappingURL=data:application/json;base64,