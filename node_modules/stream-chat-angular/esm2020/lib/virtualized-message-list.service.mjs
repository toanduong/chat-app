import { map } from 'rxjs';
import { VirtualizedListService } from './virtualized-list.service';
/**
 * The `VirtualizedMessageListService` removes messages from the message list that are currently not in view
 */
export class VirtualizedMessageListService extends VirtualizedListService {
    constructor(mode, scrollPosition$, channelService) {
        const jumpToMessage$ = channelService.jumpToMessage$.pipe(map((jumpToMessage) => {
            let result = {
                item: undefined,
            };
            let targetMessageId;
            if (mode === 'main') {
                targetMessageId = jumpToMessage.parentId
                    ? jumpToMessage.parentId
                    : jumpToMessage.id;
            }
            else {
                targetMessageId = jumpToMessage.parentId
                    ? jumpToMessage.id
                    : undefined;
            }
            if (targetMessageId) {
                const messages = mode === 'main'
                    ? channelService.activeChannelMessages
                    : channelService.activeChannelThreadReplies;
                const id = targetMessageId === 'latest'
                    ? messages[messages.length - 1]?.id
                    : targetMessageId;
                if (id) {
                    result = {
                        item: { id },
                        position: jumpToMessage.id === 'latest' ? 'bottom' : 'middle',
                    };
                }
                channelService.clearMessageJump();
            }
            return result;
        }));
        const messages$ = mode === 'main'
            ? channelService.activeChannelMessages$
            : channelService.activeThreadMessages$;
        super(messages$, scrollPosition$, jumpToMessage$, channelService.messagePageSize);
        this.mode = mode;
        this.channelService = channelService;
        this.isEqual = (t1, t2) => t1.id === t2.id;
        this.query = (direction) => {
            const request = this.mode === 'main'
                ? (direction) => this.channelService.loadMoreMessages(direction)
                : (direction) => this.channelService.loadMoreThreadReplies(direction);
            const result = request(direction === 'top' ? 'older' : 'newer');
            if (result) {
                return result;
            }
            else {
                this.queryStateSubject.next({ state: 'success' });
                if ((direction === 'top' && this.bufferOnTop > 0) ||
                    (direction === 'bottom' && this.bufferOnBottom > 0)) {
                    this.loadFromBuffer$.next();
                }
                return Promise.resolve();
            }
        };
    }
    loadMoreFromBuffer(direction) {
        this.queryStateSubject.next({ state: `loading-${direction}` });
        setTimeout(() => {
            this.loadFromBuffer$.next();
            this.queryStateSubject.next({ state: 'success' });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,