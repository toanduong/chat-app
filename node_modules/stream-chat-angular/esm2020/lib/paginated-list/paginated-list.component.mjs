import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../icon/loading-indicator-placeholder/loading-indicator-placeholder.component";
import * as i3 from "@ngx-translate/core";
/**
 * The `PaginatedListComponent` is a utility element that can display a list of any items. It uses infinite scrolls to load more elements. Providing the data to display, is the responsibility of the parent component.
 */
export class PaginatedListComponent {
    constructor(ngZone, cdRef) {
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        /**
         * The items to display
         */
        this.items = [];
        /**
         * If `true`, the loading indicator will be displayed
         */
        this.isLoading = false;
        /**
         * If `false` the component won't ask for more data vua the `loadMore` output
         */
        this.hasMore = false;
        /**
         * The `trackBy` to use with the `NgFor` directive
         * @param i
         * @returns the track by id
         */
        this.trackBy = (i) => i;
        /**
         * The component will signal via this output when more items should be fetched
         *
         * The new items should be appended to the `items` array
         */
        this.loadMore = new EventEmitter();
        this.isScrollable = false;
        this.isAtBottom = false;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.scrollContainer?.nativeElement?.addEventListener('scroll', () => this.scrolled());
        });
    }
    scrolled() {
        if (!this.hasMore) {
            return;
        }
        const isScrollable = this.scrollContainer.nativeElement.scrollHeight >
            this.scrollContainer.nativeElement.clientHeight;
        if (this.isScrollable !== isScrollable) {
            this.ngZone.run(() => {
                this.isScrollable = isScrollable;
                this.cdRef.detectChanges();
            });
        }
        const isAtBottom = Math.ceil(this.scrollContainer.nativeElement.scrollTop) +
            this.scrollContainer.nativeElement.clientHeight +
            1 >=
            this.scrollContainer.nativeElement.scrollHeight;
        if (this.isAtBottom !== isAtBottom) {
            this.ngZone.run(() => {
                this.isAtBottom = isAtBottom;
                if (this.isAtBottom && !this.isLoading) {
                    this.loadMore.emit();
                }
                this.cdRef.detectChanges();
            });
        }
    }
}
PaginatedListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: PaginatedListComponent, deps: [{ token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
PaginatedListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: PaginatedListComponent, selector: "stream-paginated-list", inputs: { items: "items", isLoading: "isLoading", hasMore: "hasMore", trackBy: "trackBy" }, outputs: { loadMore: "loadMore" }, queries: [{ propertyName: "itemTempalteRef", first: true, predicate: TemplateRef, descendants: true }], viewQueries: [{ propertyName: "scrollContainer", first: true, predicate: ["container"], descendants: true }], ngImport: i0, template: "<div class=\"stream-chat__paginated-list\" #container>\n  <div\n    data-testid=\"item\"\n    class=\"stream-chat__paginated-list-item\"\n    *ngFor=\"let item of items; let index = index; trackBy: trackBy\"\n  >\n    <ng-template\n      *ngIf=\"itemTempalteRef\"\n      [ngTemplateOutlet]=\"itemTempalteRef\"\n      [ngTemplateOutletContext]=\"{ item: item, index: index }\"\n    ></ng-template>\n  </div>\n  <button\n    *ngIf=\"hasMore && !isScrollable\"\n    class=\"str-chat__load-more-button__button str-chat__cta-button\"\n    data-testid=\"load-more-button\"\n    [disabled]=\"isLoading\"\n    (click)=\"loadMore.emit()\"\n    (keyup.enter)=\"loadMore.emit()\"\n  >\n    <span>{{ \"Load more\" | translate }}</span>\n  </button>\n  <stream-loading-indicator-placeholder\n    data-testid=\"loading-indicator\"\n    *ngIf=\"isLoading\"\n  ></stream-loading-indicator-placeholder>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.LoadingIndicatorPlaceholderComponent, selector: "stream-loading-indicator-placeholder" }, { kind: "pipe", type: i3.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: PaginatedListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-paginated-list', template: "<div class=\"stream-chat__paginated-list\" #container>\n  <div\n    data-testid=\"item\"\n    class=\"stream-chat__paginated-list-item\"\n    *ngFor=\"let item of items; let index = index; trackBy: trackBy\"\n  >\n    <ng-template\n      *ngIf=\"itemTempalteRef\"\n      [ngTemplateOutlet]=\"itemTempalteRef\"\n      [ngTemplateOutletContext]=\"{ item: item, index: index }\"\n    ></ng-template>\n  </div>\n  <button\n    *ngIf=\"hasMore && !isScrollable\"\n    class=\"str-chat__load-more-button__button str-chat__cta-button\"\n    data-testid=\"load-more-button\"\n    [disabled]=\"isLoading\"\n    (click)=\"loadMore.emit()\"\n    (keyup.enter)=\"loadMore.emit()\"\n  >\n    <span>{{ \"Load more\" | translate }}</span>\n  </button>\n  <stream-loading-indicator-placeholder\n    data-testid=\"loading-indicator\"\n    *ngIf=\"isLoading\"\n  ></stream-loading-indicator-placeholder>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { items: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], hasMore: [{
                type: Input
            }], trackBy: [{
                type: Input
            }], itemTempalteRef: [{
                type: ContentChild,
                args: [TemplateRef]
            }], loadMore: [{
                type: Output
            }], scrollContainer: [{
                type: ViewChild,
                args: ['container']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGVkLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RyZWFtLWNoYXQtYW5ndWxhci9zcmMvbGliL3BhZ2luYXRlZC1saXN0L3BhZ2luYXRlZC1saXN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9wYWdpbmF0ZWQtbGlzdC9wYWdpbmF0ZWQtbGlzdC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR0wsU0FBUyxFQUNULFlBQVksRUFFWixZQUFZLEVBQ1osS0FBSyxFQUVMLE1BQU0sRUFDTixXQUFXLEVBRVgsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDOzs7OztBQUV2Qjs7R0FFRztBQU1ILE1BQU0sT0FBTyxzQkFBc0I7SUErQmpDLFlBQW9CLE1BQWMsRUFBVSxLQUF3QjtRQUFoRCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUE5QnBFOztXQUVHO1FBQ00sVUFBSyxHQUFRLEVBQUUsQ0FBQztRQUN6Qjs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDM0I7O1dBRUc7UUFDTSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3pCOzs7O1dBSUc7UUFDTSxZQUFPLEdBQXVCLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFaEQ7Ozs7V0FJRztRQUNnQixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztRQUN2RCxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixlQUFVLEdBQUcsS0FBSyxDQUFDO0lBSW9ELENBQUM7SUFFeEUsZUFBZTtRQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxlQUFlLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FDbkUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUNoQixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sUUFBUTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLE9BQU87U0FDUjtRQUVELE1BQU0sWUFBWSxHQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxZQUFZO1lBQy9DLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUVsRCxJQUFJLElBQUksQ0FBQyxZQUFZLEtBQUssWUFBWSxFQUFFO1lBQ3RDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE1BQU0sVUFBVSxHQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1lBQ3JELElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFlBQVk7WUFDL0MsQ0FBQztZQUNILElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQztRQUNsRCxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssVUFBVSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7Z0JBQzdCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQ3RCO2dCQUNELElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7O21IQXRFVSxzQkFBc0I7dUdBQXRCLHNCQUFzQix5T0FtQm5CLFdBQVcsOEpDMUMzQixpNEJBMkJBOzJGREphLHNCQUFzQjtrQkFMbEMsU0FBUzsrQkFDRSx1QkFBdUI7NkhBUXhCLEtBQUs7c0JBQWIsS0FBSztnQkFJRyxTQUFTO3NCQUFqQixLQUFLO2dCQUlHLE9BQU87c0JBQWYsS0FBSztnQkFNRyxPQUFPO3NCQUFmLEtBQUs7Z0JBQ3FCLGVBQWU7c0JBQXpDLFlBQVk7dUJBQUMsV0FBVztnQkFNTixRQUFRO3NCQUExQixNQUFNO2dCQUlDLGVBQWU7c0JBRHRCLFNBQVM7dUJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPdXRwdXQsXG4gIFRlbXBsYXRlUmVmLFxuICBUcmFja0J5RnVuY3Rpb24sXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVGhlIGBQYWdpbmF0ZWRMaXN0Q29tcG9uZW50YCBpcyBhIHV0aWxpdHkgZWxlbWVudCB0aGF0IGNhbiBkaXNwbGF5IGEgbGlzdCBvZiBhbnkgaXRlbXMuIEl0IHVzZXMgaW5maW5pdGUgc2Nyb2xscyB0byBsb2FkIG1vcmUgZWxlbWVudHMuIFByb3ZpZGluZyB0aGUgZGF0YSB0byBkaXNwbGF5LCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3N0cmVhbS1wYWdpbmF0ZWQtbGlzdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYWdpbmF0ZWQtbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFBhZ2luYXRlZExpc3RDb21wb25lbnQ8VD4gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgLyoqXG4gICAqIFRoZSBpdGVtcyB0byBkaXNwbGF5XG4gICAqL1xuICBASW5wdXQoKSBpdGVtczogVFtdID0gW107XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsb2FkaW5nIGluZGljYXRvciB3aWxsIGJlIGRpc3BsYXllZFxuICAgKi9cbiAgQElucHV0KCkgaXNMb2FkaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgIHRoZSBjb21wb25lbnQgd29uJ3QgYXNrIGZvciBtb3JlIGRhdGEgdnVhIHRoZSBgbG9hZE1vcmVgIG91dHB1dFxuICAgKi9cbiAgQElucHV0KCkgaGFzTW9yZSA9IGZhbHNlO1xuICAvKipcbiAgICogVGhlIGB0cmFja0J5YCB0byB1c2Ugd2l0aCB0aGUgYE5nRm9yYCBkaXJlY3RpdmVcbiAgICogQHBhcmFtIGlcbiAgICogQHJldHVybnMgdGhlIHRyYWNrIGJ5IGlkXG4gICAqL1xuICBASW5wdXQoKSB0cmFja0J5OiBUcmFja0J5RnVuY3Rpb248VD4gPSAoaSkgPT4gaTtcbiAgQENvbnRlbnRDaGlsZChUZW1wbGF0ZVJlZikgaXRlbVRlbXBhbHRlUmVmOiBUZW1wbGF0ZVJlZjxUPiB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgd2lsbCBzaWduYWwgdmlhIHRoaXMgb3V0cHV0IHdoZW4gbW9yZSBpdGVtcyBzaG91bGQgYmUgZmV0Y2hlZFxuICAgKlxuICAgKiBUaGUgbmV3IGl0ZW1zIHNob3VsZCBiZSBhcHBlbmRlZCB0byB0aGUgYGl0ZW1zYCBhcnJheVxuICAgKi9cbiAgQE91dHB1dCgpIHJlYWRvbmx5IGxvYWRNb3JlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBpc1Njcm9sbGFibGUgPSBmYWxzZTtcbiAgaXNBdEJvdHRvbSA9IGZhbHNlO1xuICBAVmlld0NoaWxkKCdjb250YWluZXInKVxuICBwcml2YXRlIHNjcm9sbENvbnRhaW5lciE6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lcj8ubmF0aXZlRWxlbWVudD8uYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT5cbiAgICAgICAgdGhpcy5zY3JvbGxlZCgpXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzY3JvbGxlZCgpIHtcbiAgICBpZiAoIXRoaXMuaGFzTW9yZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlzU2Nyb2xsYWJsZSA9XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lci5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodCA+XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lci5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgIGlmICh0aGlzLmlzU2Nyb2xsYWJsZSAhPT0gaXNTY3JvbGxhYmxlKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmlzU2Nyb2xsYWJsZSA9IGlzU2Nyb2xsYWJsZTtcbiAgICAgICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgaXNBdEJvdHRvbSA9XG4gICAgICBNYXRoLmNlaWwodGhpcy5zY3JvbGxDb250YWluZXIubmF0aXZlRWxlbWVudC5zY3JvbGxUb3ApICtcbiAgICAgICAgdGhpcy5zY3JvbGxDb250YWluZXIubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQgK1xuICAgICAgICAxID49XG4gICAgICB0aGlzLnNjcm9sbENvbnRhaW5lci5uYXRpdmVFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICBpZiAodGhpcy5pc0F0Qm90dG9tICE9PSBpc0F0Qm90dG9tKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICB0aGlzLmlzQXRCb3R0b20gPSBpc0F0Qm90dG9tO1xuICAgICAgICBpZiAodGhpcy5pc0F0Qm90dG9tICYmICF0aGlzLmlzTG9hZGluZykge1xuICAgICAgICAgIHRoaXMubG9hZE1vcmUuZW1pdCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwic3RyZWFtLWNoYXRfX3BhZ2luYXRlZC1saXN0XCIgI2NvbnRhaW5lcj5cbiAgPGRpdlxuICAgIGRhdGEtdGVzdGlkPVwiaXRlbVwiXG4gICAgY2xhc3M9XCJzdHJlYW0tY2hhdF9fcGFnaW5hdGVkLWxpc3QtaXRlbVwiXG4gICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXM7IGxldCBpbmRleCA9IGluZGV4OyB0cmFja0J5OiB0cmFja0J5XCJcbiAgPlxuICAgIDxuZy10ZW1wbGF0ZVxuICAgICAgKm5nSWY9XCJpdGVtVGVtcGFsdGVSZWZcIlxuICAgICAgW25nVGVtcGxhdGVPdXRsZXRdPVwiaXRlbVRlbXBhbHRlUmVmXCJcbiAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7IGl0ZW06IGl0ZW0sIGluZGV4OiBpbmRleCB9XCJcbiAgICA+PC9uZy10ZW1wbGF0ZT5cbiAgPC9kaXY+XG4gIDxidXR0b25cbiAgICAqbmdJZj1cImhhc01vcmUgJiYgIWlzU2Nyb2xsYWJsZVwiXG4gICAgY2xhc3M9XCJzdHItY2hhdF9fbG9hZC1tb3JlLWJ1dHRvbl9fYnV0dG9uIHN0ci1jaGF0X19jdGEtYnV0dG9uXCJcbiAgICBkYXRhLXRlc3RpZD1cImxvYWQtbW9yZS1idXR0b25cIlxuICAgIFtkaXNhYmxlZF09XCJpc0xvYWRpbmdcIlxuICAgIChjbGljayk9XCJsb2FkTW9yZS5lbWl0KClcIlxuICAgIChrZXl1cC5lbnRlcik9XCJsb2FkTW9yZS5lbWl0KClcIlxuICA+XG4gICAgPHNwYW4+e3sgXCJMb2FkIG1vcmVcIiB8IHRyYW5zbGF0ZSB9fTwvc3Bhbj5cbiAgPC9idXR0b24+XG4gIDxzdHJlYW0tbG9hZGluZy1pbmRpY2F0b3ItcGxhY2Vob2xkZXJcbiAgICBkYXRhLXRlc3RpZD1cImxvYWRpbmctaW5kaWNhdG9yXCJcbiAgICAqbmdJZj1cImlzTG9hZGluZ1wiXG4gID48L3N0cmVhbS1sb2FkaW5nLWluZGljYXRvci1wbGFjZWhvbGRlcj5cbjwvZGl2PlxuIl19