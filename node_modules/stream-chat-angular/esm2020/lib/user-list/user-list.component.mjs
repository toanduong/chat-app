import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../avatar-placeholder/avatar-placeholder.component";
import * as i2 from "../paginated-list/paginated-list.component";
/**
 * The `UserListComponent` can display a list of Stream users with pagination
 */
export class UserListComponent {
    constructor() {
        /**
         * The users to display
         */
        this.users = [];
        /**
         * If `true`, the loading indicator will be displayed
         */
        this.isLoading = false;
        /**
         * If `false` the component won't ask for more data vua the `loadMore` output
         */
        this.hasMore = false;
        /**
         * The component will signal via this output when more items should be fetched
         *
         * The new items should be appended to the `items` array
         */
        this.loadMore = new EventEmitter();
    }
    trackByUserId(_, item) {
        return item.id;
    }
}
UserListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: UserListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
UserListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: UserListComponent, selector: "stream-user-list", inputs: { users: "users", isLoading: "isLoading", hasMore: "hasMore" }, outputs: { loadMore: "loadMore" }, ngImport: i0, template: "<stream-paginated-list\n  [items]=\"users\"\n  [hasMore]=\"hasMore\"\n  (loadMore)=\"loadMore.emit()\"\n  [isLoading]=\"isLoading\"\n  [trackBy]=\"trackByUserId\"\n>\n  <ng-template let-user=\"item\">\n    <div class=\"str-chat__user-list-item\">\n      <stream-avatar-placeholder\n        data-testclass=\"avatar\"\n        class=\"str-chat__avatar str-chat__avatar--circle\"\n        type=\"user\"\n        location=\"reaction\"\n        [imageUrl]=\"user.image\"\n        [name]=\"user.name\"\n        [user]=\"user\"\n      ></stream-avatar-placeholder>\n      <span data-testclass=\"username\" class=\"str-chat__user-item--name\">{{\n        user.name\n      }}</span>\n    </div>\n  </ng-template>\n</stream-paginated-list>\n", dependencies: [{ kind: "component", type: i1.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { kind: "component", type: i2.PaginatedListComponent, selector: "stream-paginated-list", inputs: ["items", "isLoading", "hasMore", "trackBy"], outputs: ["loadMore"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: UserListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-user-list', template: "<stream-paginated-list\n  [items]=\"users\"\n  [hasMore]=\"hasMore\"\n  (loadMore)=\"loadMore.emit()\"\n  [isLoading]=\"isLoading\"\n  [trackBy]=\"trackByUserId\"\n>\n  <ng-template let-user=\"item\">\n    <div class=\"str-chat__user-list-item\">\n      <stream-avatar-placeholder\n        data-testclass=\"avatar\"\n        class=\"str-chat__avatar str-chat__avatar--circle\"\n        type=\"user\"\n        location=\"reaction\"\n        [imageUrl]=\"user.image\"\n        [name]=\"user.name\"\n        [user]=\"user\"\n      ></stream-avatar-placeholder>\n      <span data-testclass=\"username\" class=\"str-chat__user-item--name\">{{\n        user.name\n      }}</span>\n    </div>\n  </ng-template>\n</stream-paginated-list>\n" }]
        }], propDecorators: { users: [{
                type: Input
            }], isLoading: [{
                type: Input
            }], hasMore: [{
                type: Input
            }], loadMore: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi91c2VyLWxpc3QvdXNlci1saXN0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi91c2VyLWxpc3QvdXNlci1saXN0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFJdkU7O0dBRUc7QUFNSCxNQUFNLE9BQU8saUJBQWlCO0lBTDlCO1FBTUU7O1dBRUc7UUFDTSxVQUFLLEdBQThDLEVBQUUsQ0FBQztRQUMvRDs7V0FFRztRQUNNLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDM0I7O1dBRUc7UUFDTSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3pCOzs7O1dBSUc7UUFDZ0IsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7S0FLeEQ7SUFIQyxhQUFhLENBQUMsQ0FBUyxFQUFFLElBQWtCO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs4R0F0QlUsaUJBQWlCO2tHQUFqQixpQkFBaUIsbUtDWjlCLDZ0QkF3QkE7MkZEWmEsaUJBQWlCO2tCQUw3QixTQUFTOytCQUNFLGtCQUFrQjs4QkFRbkIsS0FBSztzQkFBYixLQUFLO2dCQUlHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBSUcsT0FBTztzQkFBZixLQUFLO2dCQU1hLFFBQVE7c0JBQTFCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVXNlclJlc3BvbnNlIH0gZnJvbSAnc3RyZWFtLWNoYXQnO1xuaW1wb3J0IHsgRGVmYXVsdFN0cmVhbUNoYXRHZW5lcmljcyB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBUaGUgYFVzZXJMaXN0Q29tcG9uZW50YCBjYW4gZGlzcGxheSBhIGxpc3Qgb2YgU3RyZWFtIHVzZXJzIHdpdGggcGFnaW5hdGlvblxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzdHJlYW0tdXNlci1saXN0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VzZXItbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJMaXN0Q29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1c2VycyB0byBkaXNwbGF5XG4gICAqL1xuICBASW5wdXQoKSB1c2VyczogVXNlclJlc3BvbnNlPERlZmF1bHRTdHJlYW1DaGF0R2VuZXJpY3M+W10gPSBbXTtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIHdpbGwgYmUgZGlzcGxheWVkXG4gICAqL1xuICBASW5wdXQoKSBpc0xvYWRpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIElmIGBmYWxzZWAgdGhlIGNvbXBvbmVudCB3b24ndCBhc2sgZm9yIG1vcmUgZGF0YSB2dWEgdGhlIGBsb2FkTW9yZWAgb3V0cHV0XG4gICAqL1xuICBASW5wdXQoKSBoYXNNb3JlID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHdpbGwgc2lnbmFsIHZpYSB0aGlzIG91dHB1dCB3aGVuIG1vcmUgaXRlbXMgc2hvdWxkIGJlIGZldGNoZWRcbiAgICpcbiAgICogVGhlIG5ldyBpdGVtcyBzaG91bGQgYmUgYXBwZW5kZWQgdG8gdGhlIGBpdGVtc2AgYXJyYXlcbiAgICovXG4gIEBPdXRwdXQoKSByZWFkb25seSBsb2FkTW9yZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICB0cmFja0J5VXNlcklkKF86IG51bWJlciwgaXRlbTogVXNlclJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIGl0ZW0uaWQ7XG4gIH1cbn1cbiIsIjxzdHJlYW0tcGFnaW5hdGVkLWxpc3RcbiAgW2l0ZW1zXT1cInVzZXJzXCJcbiAgW2hhc01vcmVdPVwiaGFzTW9yZVwiXG4gIChsb2FkTW9yZSk9XCJsb2FkTW9yZS5lbWl0KClcIlxuICBbaXNMb2FkaW5nXT1cImlzTG9hZGluZ1wiXG4gIFt0cmFja0J5XT1cInRyYWNrQnlVc2VySWRcIlxuPlxuICA8bmctdGVtcGxhdGUgbGV0LXVzZXI9XCJpdGVtXCI+XG4gICAgPGRpdiBjbGFzcz1cInN0ci1jaGF0X191c2VyLWxpc3QtaXRlbVwiPlxuICAgICAgPHN0cmVhbS1hdmF0YXItcGxhY2Vob2xkZXJcbiAgICAgICAgZGF0YS10ZXN0Y2xhc3M9XCJhdmF0YXJcIlxuICAgICAgICBjbGFzcz1cInN0ci1jaGF0X19hdmF0YXIgc3RyLWNoYXRfX2F2YXRhci0tY2lyY2xlXCJcbiAgICAgICAgdHlwZT1cInVzZXJcIlxuICAgICAgICBsb2NhdGlvbj1cInJlYWN0aW9uXCJcbiAgICAgICAgW2ltYWdlVXJsXT1cInVzZXIuaW1hZ2VcIlxuICAgICAgICBbbmFtZV09XCJ1c2VyLm5hbWVcIlxuICAgICAgICBbdXNlcl09XCJ1c2VyXCJcbiAgICAgID48L3N0cmVhbS1hdmF0YXItcGxhY2Vob2xkZXI+XG4gICAgICA8c3BhbiBkYXRhLXRlc3RjbGFzcz1cInVzZXJuYW1lXCIgY2xhc3M9XCJzdHItY2hhdF9fdXNlci1pdGVtLS1uYW1lXCI+e3tcbiAgICAgICAgdXNlci5uYW1lXG4gICAgICB9fTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvc3RyZWFtLXBhZ2luYXRlZC1saXN0PlxuIl19