export const isImageFile = (file) => {
    // photoshop files begin with 'image/'
    return file.type.startsWith('image/') && !file.type.endsWith('.photoshop');
};
export const readBlobAsArrayBuffer = (blob) => new Promise((resolve, reject) => {
    const fileReader = new FileReader();
    fileReader.onload = () => {
        resolve(fileReader.result);
    };
    fileReader.onerror = () => {
        reject(fileReader.error);
    };
    fileReader.readAsArrayBuffer(blob);
});
export const createFileFromBlobs = ({ blobsArray, fileName, mimeType, }) => {
    const concatenatedBlob = new Blob(blobsArray, { type: mimeType });
    return new File([concatenatedBlob], fileName, {
        type: concatenatedBlob.type,
    });
};
export const getExtensionFromMimeType = (mimeType) => {
    const match = mimeType.match(/\/([^/;]+)/);
    return match && match[1];
};
export const createUriFromBlob = (blob) => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (event) => {
            resolve(event.target?.result ?? undefined);
        };
        reader.onerror = (e) => reject(e);
        reader.readAsDataURL(blob);
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9maWxlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLElBQVUsRUFBRSxFQUFFO0lBQ3hDLHNDQUFzQztJQUN0QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxJQUFVLEVBQXdCLEVBQUUsQ0FDeEUsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7SUFDOUIsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztJQUNwQyxVQUFVLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtRQUN2QixPQUFPLENBQUMsVUFBVSxDQUFDLE1BQXFCLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7SUFFRixVQUFVLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtRQUN4QixNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUMsQ0FBQztJQUVGLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUMsQ0FBQztBQUVMLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsRUFDbEMsVUFBVSxFQUNWLFFBQVEsRUFDUixRQUFRLEdBS1QsRUFBRSxFQUFFO0lBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNsRSxPQUFPLElBQUksSUFBSSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxRQUFRLEVBQUU7UUFDNUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLElBQUk7S0FDNUIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUU7SUFDM0QsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxJQUFVLEVBQUUsRUFBRTtJQUM5QyxPQUFPLElBQUksT0FBTyxDQUFtQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUN2RSxNQUFNLE1BQU0sR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLElBQUksU0FBUyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDO1FBQ0YsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNJbWFnZUZpbGUgPSAoZmlsZTogRmlsZSkgPT4ge1xuICAvLyBwaG90b3Nob3AgZmlsZXMgYmVnaW4gd2l0aCAnaW1hZ2UvJ1xuICByZXR1cm4gZmlsZS50eXBlLnN0YXJ0c1dpdGgoJ2ltYWdlLycpICYmICFmaWxlLnR5cGUuZW5kc1dpdGgoJy5waG90b3Nob3AnKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZWFkQmxvYkFzQXJyYXlCdWZmZXIgPSAoYmxvYjogQmxvYik6IFByb21pc2U8QXJyYXlCdWZmZXI+ID0+XG4gIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmaWxlUmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIHJlc29sdmUoZmlsZVJlYWRlci5yZXN1bHQgYXMgQXJyYXlCdWZmZXIpO1xuICAgIH07XG5cbiAgICBmaWxlUmVhZGVyLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICByZWplY3QoZmlsZVJlYWRlci5lcnJvcik7XG4gICAgfTtcblxuICAgIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gIH0pO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRmlsZUZyb21CbG9icyA9ICh7XG4gIGJsb2JzQXJyYXksXG4gIGZpbGVOYW1lLFxuICBtaW1lVHlwZSxcbn06IHtcbiAgYmxvYnNBcnJheTogQmxvYltdO1xuICBmaWxlTmFtZTogc3RyaW5nO1xuICBtaW1lVHlwZTogc3RyaW5nO1xufSkgPT4ge1xuICBjb25zdCBjb25jYXRlbmF0ZWRCbG9iID0gbmV3IEJsb2IoYmxvYnNBcnJheSwgeyB0eXBlOiBtaW1lVHlwZSB9KTtcbiAgcmV0dXJuIG5ldyBGaWxlKFtjb25jYXRlbmF0ZWRCbG9iXSwgZmlsZU5hbWUsIHtcbiAgICB0eXBlOiBjb25jYXRlbmF0ZWRCbG9iLnR5cGUsXG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEV4dGVuc2lvbkZyb21NaW1lVHlwZSA9IChtaW1lVHlwZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IG1hdGNoID0gbWltZVR5cGUubWF0Y2goL1xcLyhbXi87XSspLyk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVVcmlGcm9tQmxvYiA9IChibG9iOiBCbG9iKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IHVuZGVmaW5lZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZCA9IChldmVudCkgPT4ge1xuICAgICAgcmVzb2x2ZShldmVudC50YXJnZXQ/LnJlc3VsdCA/PyB1bmRlZmluZWQpO1xuICAgIH07XG4gICAgcmVhZGVyLm9uZXJyb3IgPSAoZSkgPT4gcmVqZWN0KGUpO1xuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xuICB9KTtcbn07XG4iXX0=