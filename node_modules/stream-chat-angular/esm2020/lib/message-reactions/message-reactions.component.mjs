import { Component, Input, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../message-reactions.service";
import * as i2 from "../custom-templates.service";
import * as i3 from "@angular/common";
import * as i4 from "../modal/modal.component";
import * as i5 from "../user-list/user-list.component";
/**
 * The `MessageReactions` component displays the reactions of a message. You can read more about [message reactions](/chat/docs/javascript/send_reaction/) in the platform documentation.
 */
export class MessageReactionsComponent {
    constructor(cdRef, messageReactionsService, customTemplatesService) {
        this.cdRef = cdRef;
        this.messageReactionsService = messageReactionsService;
        this.customTemplatesService = customTemplatesService;
        /**
         * The number of reactions grouped by [reaction types](https://github.com/GetStream/stream-chat-angular/tree/master/projects/stream-chat-angular/src/lib/message-reactions/message-reactions.component.ts)
         */
        this.messageReactionGroups = undefined;
        /**
         * The number of reactions grouped by [reaction types](https://github.com/GetStream/stream-chat-angular/tree/master/projects/stream-chat-angular/src/lib/message-reactions/message-reactions.component.ts)
         * @deprecated use `messageReactionGroups`
         */
        this.messageReactionCounts = {};
        /**
         * List of reactions of a [message](/chat/docs/sdk/angular/types/stream-message/), used to display the users of a reaction type.
         * @deprecated you can fetch the reactions using [`messageReactionsService.queryReactions()`](/chat/docs/sdk/angular/services/MessageReactionsService/#queryreactions)
         */
        this.latestReactions = [];
        /**
         * List of the user's own reactions of a [message](/chat/docs/sdk/angular/types/stream-message/), used to display the users of a reaction type.
         */
        this.ownReactions = [];
        this.isLoading = true;
        this.reactions = [];
        this.shouldHandleReactionClick = true;
        this.existingReactions = [];
        this.reactionOptions = [];
        this.usersByReactions = {};
        this.subscriptions = [];
        this.isViewInited = false;
        this.isOpenChange = (isOpen) => {
            this.selectedReactionType = isOpen ? this.selectedReactionType : undefined;
            if (!isOpen) {
                this.usersByReactions = {};
            }
        };
    }
    ngOnInit() {
        this.subscriptions.push(this.messageReactionsService.reactions$.subscribe((reactions) => {
            this.reactionOptions = Object.keys(reactions);
            this.setExistingReactions();
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
    }
    ngOnChanges(changes) {
        if (changes.messageReactionCounts || changes.messageReactionGroups) {
            if (this.messageReactionCounts && !this.messageReactionGroups) {
                this.messageReactionGroups = {};
                Object.keys(this.messageReactionCounts).forEach((k) => {
                    this.messageReactionGroups[k] = {
                        count: this.messageReactionCounts?.[k] ?? 0,
                        sum_scores: this.messageReactionCounts?.[k] ?? 0,
                        first_reaction_at: undefined,
                        last_reaction_at: undefined,
                    };
                });
            }
            this.setExistingReactions();
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    getEmojiByReaction(reactionType) {
        return this.messageReactionsService.reactions[reactionType];
    }
    async reactionSelected(reactionType) {
        if (!this.messageId) {
            return;
        }
        if (this.messageReactionsService.customReactionClickHandler) {
            this.messageReactionsService.customReactionClickHandler({
                messageId: this.messageId,
                reactionType: reactionType,
            });
        }
        else {
            this.selectedReactionType = reactionType;
            if (!this.usersByReactions[this.selectedReactionType]) {
                this.usersByReactions[this.selectedReactionType] = {
                    users: [],
                };
                await this.loadNextPageOfReactions();
            }
        }
    }
    async loadNextPageOfReactions() {
        if (!this.messageId || !this.selectedReactionType) {
            return;
        }
        this.isLoading = true;
        try {
            const response = await this.messageReactionsService.queryReactions(this.messageId, this.selectedReactionType, this.usersByReactions[this.selectedReactionType].next);
            this.usersByReactions[this.selectedReactionType].users = [
                ...this.usersByReactions[this.selectedReactionType].users,
                ...response.reactions
                    .map((r) => r.user)
                    .filter((u) => !!u),
            ];
            this.usersByReactions[this.selectedReactionType].next = response.next;
        }
        catch (_) {
            this.selectedReactionType = undefined;
        }
        finally {
            this.isLoading = false;
        }
        if (this.isViewInited) {
            this.cdRef.detectChanges();
        }
    }
    trackByMessageReaction(_, item) {
        return item;
    }
    isOwnReaction(reactionType) {
        return !!this.ownReactions.find((r) => r.type === reactionType);
    }
    setExistingReactions() {
        this.existingReactions = Object.keys(this.messageReactionGroups ?? {})
            .filter((k) => this.reactionOptions.indexOf(k) !== -1)
            .filter((k) => this.messageReactionGroups[k].count > 0)
            .sort((r1, r2) => {
            const date1 = this.messageReactionGroups[r1].first_reaction_at
                ? new Date(this.messageReactionGroups[r1].first_reaction_at)
                : new Date();
            const date2 = this.messageReactionGroups[r2].first_reaction_at
                ? new Date(this.messageReactionGroups[r2].first_reaction_at)
                : new Date();
            return date1.getTime() - date2.getTime();
        });
    }
}
MessageReactionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.MessageReactionsService }, { token: i2.CustomTemplatesService }], target: i0.ɵɵFactoryTarget.Component });
MessageReactionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MessageReactionsComponent, selector: "stream-message-reactions", inputs: { messageId: "messageId", messageReactionGroups: "messageReactionGroups", messageReactionCounts: "messageReactionCounts", latestReactions: "latestReactions", ownReactions: "ownReactions" }, viewQueries: [{ propertyName: "selectorContainer", first: true, predicate: ["selectorContainer"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  *ngIf=\"existingReactions.length > 0\"\n  data-testid=\"reaction-list\"\n  class=\"str-chat__reaction-list str-chat__message-reactions-container\"\n  [class.str-chat__reaction-list--reverse]=\"true\"\n>\n  <ul class=\"str-chat__message-reactions\">\n    <li\n      *ngFor=\"\n        let reactionType of existingReactions;\n        trackBy: trackByMessageReaction\n      \"\n      class=\"str-chat__message-reaction\"\n      data-testclass=\"emoji\"\n      [class.str-chat__message-reaction-own]=\"isOwnReaction(reactionType)\"\n      (click)=\"reactionSelected(reactionType)\"\n      (keyup.enter)=\"reactionSelected(reactionType)\"\n    >\n      <span class=\"emoji str-chat__message-reaction-emoji\">\n        {{ getEmojiByReaction(reactionType) }}&nbsp;\n      </span>\n      <span\n        data-testclass=\"reaction-list-reaction-count\"\n        class=\"str-chat__message-reaction-count\"\n      >\n        {{ messageReactionGroups?.[reactionType]?.count ?? 0 }}\n      </span>\n    </li>\n  </ul>\n</div>\n\n<ng-container *ngIf=\"selectedReactionType\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      (customTemplatesService.modalTemplate$ | async) || defaultModal;\n      context: {\n        isOpen: !!selectedReactionType,\n        messageId: messageId,\n        reactionType: selectedReactionType,\n        isOpenChangeHandler: isOpenChange,\n        content: modalContent\n      }\n    \"\n  ></ng-container>\n</ng-container>\n\n<ng-template\n  #defaultModal\n  let-isOpen=\"isOpen\"\n  let-messageId=\"messageId\"\n  let-reactionType=\"reactionType\"\n  let-isOpenChangeHandler=\"isOpenChangeHandler\"\n  let-content=\"content\"\n>\n  <stream-modal\n    class=\"str-chat__message-reactions-details-modal\"\n    [isOpen]=\"isOpen\"\n    [content]=\"content\"\n    (isOpenChange)=\"isOpenChangeHandler($event)\"\n  >\n  </stream-modal>\n</ng-template>\n\n<ng-template #modalContent>\n  <div class=\"str-chat__message-reactions-details\">\n    <div class=\"str-chat__message-reactions-details-reaction-types\">\n      <div\n        *ngFor=\"\n          let reactionType of existingReactions;\n          trackBy: trackByMessageReaction\n        \"\n        class=\"str-chat__message-reactions-details-reaction-type\"\n        attr.data-testid=\"reaction-details-selector-{{ reactionType }}\"\n        [class.str-chat__message-reactions-details-reaction-type--selected]=\"\n          reactionType === selectedReactionType\n        \"\n        (click)=\"reactionSelected(reactionType)\"\n        (keyup.enter)=\"reactionSelected(reactionType)\"\n      >\n        <span class=\"emoji str-chat__message-reaction-emoji\">\n          {{ getEmojiByReaction(reactionType) }}&nbsp;\n        </span>\n        <span class=\"str-chat__message-reaction-count\">\n          {{ messageReactionGroups?.[reactionType]?.count ?? 0 }}\n        </span>\n      </div>\n    </div>\n    <div\n      class=\"emoji str-chat__message-reaction-emoji str-chat__message-reaction-emoji-big\"\n    >\n      {{ getEmojiByReaction(selectedReactionType!) }}\n    </div>\n    <div\n      data-testid=\"all-reacting-users\"\n      class=\"str-chat__message-reactions-details-reacting-users\"\n    >\n      <ng-container\n        *ngFor=\"\n          let reactionType of existingReactions;\n          trackBy: trackByMessageReaction\n        \"\n      >\n        <stream-user-list\n          attr.data-testid=\"{{ reactionType }}-user-list\"\n          [style.display]=\"\n            selectedReactionType === reactionType ? 'block' : 'none'\n          \"\n          [users]=\"usersByReactions[reactionType]?.users || []\"\n          [isLoading]=\"isLoading\"\n          [hasMore]=\"!!usersByReactions[reactionType]?.next || false\"\n          (loadMore)=\"loadNextPageOfReactions()\"\n        ></stream-user-list>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i4.ModalComponent, selector: "stream-modal", inputs: ["isOpen", "content"], outputs: ["isOpenChange"] }, { kind: "component", type: i5.UserListComponent, selector: "stream-user-list", inputs: ["users", "isLoading", "hasMore"], outputs: ["loadMore"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-message-reactions', template: "<div\n  *ngIf=\"existingReactions.length > 0\"\n  data-testid=\"reaction-list\"\n  class=\"str-chat__reaction-list str-chat__message-reactions-container\"\n  [class.str-chat__reaction-list--reverse]=\"true\"\n>\n  <ul class=\"str-chat__message-reactions\">\n    <li\n      *ngFor=\"\n        let reactionType of existingReactions;\n        trackBy: trackByMessageReaction\n      \"\n      class=\"str-chat__message-reaction\"\n      data-testclass=\"emoji\"\n      [class.str-chat__message-reaction-own]=\"isOwnReaction(reactionType)\"\n      (click)=\"reactionSelected(reactionType)\"\n      (keyup.enter)=\"reactionSelected(reactionType)\"\n    >\n      <span class=\"emoji str-chat__message-reaction-emoji\">\n        {{ getEmojiByReaction(reactionType) }}&nbsp;\n      </span>\n      <span\n        data-testclass=\"reaction-list-reaction-count\"\n        class=\"str-chat__message-reaction-count\"\n      >\n        {{ messageReactionGroups?.[reactionType]?.count ?? 0 }}\n      </span>\n    </li>\n  </ul>\n</div>\n\n<ng-container *ngIf=\"selectedReactionType\">\n  <ng-container\n    *ngTemplateOutlet=\"\n      (customTemplatesService.modalTemplate$ | async) || defaultModal;\n      context: {\n        isOpen: !!selectedReactionType,\n        messageId: messageId,\n        reactionType: selectedReactionType,\n        isOpenChangeHandler: isOpenChange,\n        content: modalContent\n      }\n    \"\n  ></ng-container>\n</ng-container>\n\n<ng-template\n  #defaultModal\n  let-isOpen=\"isOpen\"\n  let-messageId=\"messageId\"\n  let-reactionType=\"reactionType\"\n  let-isOpenChangeHandler=\"isOpenChangeHandler\"\n  let-content=\"content\"\n>\n  <stream-modal\n    class=\"str-chat__message-reactions-details-modal\"\n    [isOpen]=\"isOpen\"\n    [content]=\"content\"\n    (isOpenChange)=\"isOpenChangeHandler($event)\"\n  >\n  </stream-modal>\n</ng-template>\n\n<ng-template #modalContent>\n  <div class=\"str-chat__message-reactions-details\">\n    <div class=\"str-chat__message-reactions-details-reaction-types\">\n      <div\n        *ngFor=\"\n          let reactionType of existingReactions;\n          trackBy: trackByMessageReaction\n        \"\n        class=\"str-chat__message-reactions-details-reaction-type\"\n        attr.data-testid=\"reaction-details-selector-{{ reactionType }}\"\n        [class.str-chat__message-reactions-details-reaction-type--selected]=\"\n          reactionType === selectedReactionType\n        \"\n        (click)=\"reactionSelected(reactionType)\"\n        (keyup.enter)=\"reactionSelected(reactionType)\"\n      >\n        <span class=\"emoji str-chat__message-reaction-emoji\">\n          {{ getEmojiByReaction(reactionType) }}&nbsp;\n        </span>\n        <span class=\"str-chat__message-reaction-count\">\n          {{ messageReactionGroups?.[reactionType]?.count ?? 0 }}\n        </span>\n      </div>\n    </div>\n    <div\n      class=\"emoji str-chat__message-reaction-emoji str-chat__message-reaction-emoji-big\"\n    >\n      {{ getEmojiByReaction(selectedReactionType!) }}\n    </div>\n    <div\n      data-testid=\"all-reacting-users\"\n      class=\"str-chat__message-reactions-details-reacting-users\"\n    >\n      <ng-container\n        *ngFor=\"\n          let reactionType of existingReactions;\n          trackBy: trackByMessageReaction\n        \"\n      >\n        <stream-user-list\n          attr.data-testid=\"{{ reactionType }}-user-list\"\n          [style.display]=\"\n            selectedReactionType === reactionType ? 'block' : 'none'\n          \"\n          [users]=\"usersByReactions[reactionType]?.users || []\"\n          [isLoading]=\"isLoading\"\n          [hasMore]=\"!!usersByReactions[reactionType]?.next || false\"\n          (loadMore)=\"loadNextPageOfReactions()\"\n        ></stream-user-list>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.MessageReactionsService }, { type: i2.CustomTemplatesService }]; }, propDecorators: { messageId: [{
                type: Input
            }], messageReactionGroups: [{
                type: Input
            }], messageReactionCounts: [{
                type: Input
            }], latestReactions: [{
                type: Input
            }], ownReactions: [{
                type: Input
            }], selectorContainer: [{
                type: ViewChild,
                args: ['selectorContainer']
            }] } });
//# sourceMappingURL=data:application/json;base64,