import { Component, ContentChild, EventEmitter, HostBinding, Inject, Input, Optional, Output, TemplateRef, ViewChild, } from '@angular/core';
import { combineLatest, Subject, timer } from 'rxjs';
import { first, map, take, tap } from 'rxjs/operators';
import { AttachmentService } from '../attachment.service';
import { textareaInjectionToken } from '../injection-tokens';
import { TextareaDirective } from './textarea.directive';
import { EmojiInputService } from './emoji-input.service';
import { v4 as uuidv4 } from 'uuid';
import { VoiceRecorderService } from './voice-recorder.service';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../notification.service";
import * as i3 from "../attachment.service";
import * as i4 from "./message-input-config.service";
import * as i5 from "./emoji-input.service";
import * as i6 from "../custom-templates.service";
import * as i7 from "../message-actions.service";
import * as i8 from "./voice-recorder.service";
import * as i9 from "../voice-recorder/audio-recorder.service";
import * as i10 from "@angular/common";
import * as i11 from "../avatar-placeholder/avatar-placeholder.component";
import * as i12 from "../icon/icon-placeholder/icon-placeholder.component";
import * as i13 from "../attachment-list/attachment-list.component";
import * as i14 from "../attachment-preview-list/attachment-preview-list.component";
import * as i15 from "./textarea.directive";
import * as i16 from "../message-text/message-text.component";
import * as i17 from "@ngx-translate/core";
/**
 * The `MessageInput` component displays an input where users can type their messages and upload files, and sends the message to the active channel. The component can be used to compose new messages or update existing ones. To send messages, the chat user needs to have the necessary [channel capability](/chat/docs/javascript/channel_capabilities/).
 */
export class MessageInputComponent {
    constructor(channelService, notificationService, attachmentService, configService, textareaType, componentFactoryResolver, cdRef, emojiInputService, customTemplatesService, messageActionsService, voiceRecorderService, audioRecorder) {
        this.channelService = channelService;
        this.notificationService = notificationService;
        this.attachmentService = attachmentService;
        this.configService = configService;
        this.textareaType = textareaType;
        this.componentFactoryResolver = componentFactoryResolver;
        this.cdRef = cdRef;
        this.emojiInputService = emojiInputService;
        this.customTemplatesService = customTemplatesService;
        this.messageActionsService = messageActionsService;
        this.voiceRecorderService = voiceRecorderService;
        this.audioRecorder = audioRecorder;
        /**
         * Determines if the message is being dispalyed in a channel or in a [thread](/chat/docs/javascript/threads/).
         */
        this.mode = 'main';
        /**
         * Enables or disables auto focus on the textarea element
         */
        this.autoFocus = true;
        /**
         * By default the input will react to changes in `messageToEdit$` from [`MessageActionsService`](/chat/docs/sdk/angular/services/MessageActionsService/) and display the message to be edited (taking into account the current `mode`).
         *
         * If you don't need that behavior, you can turn this of with this flag. In that case you should create your own edit message UI.
         */
        this.watchForMessageToEdit = true;
        /**
         * Use this input to control wether a send button is rendered or not. If you don't render a send button, you can still trigger message send using the `sendMessage$` input.
         */
        this.displaySendButton = true;
        /**
         * You can enable/disable voice recordings with this input
         */
        this.displayVoiceRecordingButton = false;
        /**
         * Emits when a message was successfuly sent or updated
         */
        this.messageUpdate = new EventEmitter();
        this.class = 'str-chat__message-input-angular-host';
        this.isVoiceRecording = true;
        this.textareaValue = '';
        this.mentionedUsers = [];
        this.typingStart$ = new Subject();
        this.isCooldownInProgress = false;
        this.fileInputId = uuidv4();
        this.subscriptions = [];
        this.isViewInited = false;
        this.defaultTextareaPlaceholder = 'streamChat.Type your message';
        this.slowModeTextareaPlaceholder = 'streamChat.Slow Mode ON';
        this.textareaPlaceholder = this.defaultTextareaPlaceholder;
        this.subscriptions.push(this.attachmentService.attachmentUploadInProgressCounter$.subscribe((counter) => {
            if (counter === 0 && this.hideNotification) {
                this.hideNotification();
                this.hideNotification = undefined;
            }
        }));
        this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
            if (channel && this.channel && channel.id !== this.channel.id) {
                this.textareaValue = '';
                this.attachmentService.resetAttachmentUploads();
                this.voiceRecorderService.isRecorderVisible$.next(false);
            }
            const capabilities = channel?.data?.own_capabilities;
            if (capabilities) {
                this.isFileUploadAuthorized =
                    capabilities.indexOf('upload-file') !== -1;
                this.canSendLinks = capabilities.indexOf('send-links') !== -1;
                this.channel = channel;
                this.setCanSendMessages();
            }
        }));
        this.subscriptions.push(this.channelService.messageToQuote$.subscribe((m) => {
            const isThreadReply = m && m.parent_id;
            if ((this.mode === 'thread' && isThreadReply) ||
                (this.mode === 'thread' && this.quotedMessage && !m) ||
                (this.mode === 'main' && !isThreadReply)) {
                this.quotedMessage = m;
            }
        }));
        this.subscriptions.push(this.messageActionsService.messageToEdit$.subscribe((message) => {
            this.messageToEdit = message;
            this.checkIfInEditMode();
        }));
        this.attachmentUploads$ = this.attachmentService.attachmentUploads$;
        this.customAttachments$ = this.attachmentService.customAttachments$;
        this.attachmentUploadInProgressCounter$ =
            this.attachmentService.attachmentUploadInProgressCounter$;
        this.isFileUploadEnabled = this.configService.isFileUploadEnabled;
        this.isMultipleFileUploadEnabled =
            this.configService.isMultipleFileUploadEnabled;
        this.areMentionsEnabled = this.configService.areMentionsEnabled;
        this.mentionScope = this.configService.mentionScope;
        this.inputMode = this.configService.inputMode;
        this.subscriptions.push(this.typingStart$.subscribe(() => void this.channelService.typingStarted(this.parentMessageId)));
        this.subscriptions.push(this.voiceRecorderService.isRecorderVisible$.subscribe((isVisible) => {
            this.isVoiceRecording = isVisible;
        }));
        this.subscriptions.push(combineLatest([
            this.channelService.latestMessageDateByUserByChannels$,
            this.channelService.activeChannel$,
        ])
            .pipe(map(([latestMessages, channel]) => [latestMessages[channel?.cid || ''], channel]))
            .subscribe(([latestMessageDate, channel]) => {
            const cooldown = channel?.data?.cooldown &&
                latestMessageDate &&
                Math.round(channel?.data?.cooldown -
                    (new Date().getTime() - latestMessageDate.getTime()) / 1000);
            if (cooldown &&
                cooldown > 0 &&
                (channel?.data?.own_capabilities).includes('slow-mode')) {
                this.startCooldown(cooldown);
            }
            else if (this.isCooldownInProgress) {
                this.stopCooldown();
            }
        }));
        this.subscriptions.push(this.voiceRecorderService.recording$.subscribe((recording) => {
            if (recording) {
                void this.voiceRecordingReady(recording);
            }
        }));
    }
    ngOnInit() {
        this.subscriptions.push(this.customTemplatesService.emojiPickerTemplate$.subscribe((template) => {
            this.emojiPickerTemplate = template;
            this.cdRef.detectChanges();
        }));
        this.subscriptions.push(this.customTemplatesService.attachmentPreviewListTemplate$.subscribe((template) => {
            this.attachmentPreviewListTemplate = template;
            this.cdRef.detectChanges();
        }));
        this.subscriptions.push(this.customTemplatesService.customAttachmentUploadTemplate$.subscribe((template) => {
            this.customAttachmentUploadTemplate = template;
            this.cdRef.detectChanges();
        }));
    }
    ngAfterViewInit() {
        this.isViewInited = true;
        this.initTextarea();
    }
    ngOnChanges(changes) {
        if (changes.message) {
            this.messageToUpdateChanged();
        }
        if (changes.isFileUploadEnabled) {
            this.configService.isFileUploadEnabled = this.isFileUploadEnabled;
        }
        if (changes.isMultipleFileUploadEnabled) {
            this.configService.isMultipleFileUploadEnabled =
                this.isMultipleFileUploadEnabled;
        }
        if (changes.areMentionsEnabled) {
            this.configService.areMentionsEnabled = this.areMentionsEnabled;
        }
        if (changes.mentionScope) {
            this.configService.mentionScope = this.mentionScope;
        }
        if (changes.mode) {
            this.setCanSendMessages();
            this.checkIfInEditMode();
        }
        if (changes.watchForMessageToEdit) {
            this.checkIfInEditMode();
        }
        if (changes.inputMode) {
            this.configService.inputMode = this.inputMode;
        }
        if (changes.sendMessage$) {
            if (this.sendMessageSubcription) {
                this.sendMessageSubcription.unsubscribe();
            }
            if (this.sendMessage$) {
                this.sendMessageSubcription = this.sendMessage$.subscribe(() => void this.messageSent());
            }
        }
    }
    ngOnDestroy() {
        if (this.sendMessageSubcription) {
            this.sendMessageSubcription.unsubscribe();
        }
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    async messageSent() {
        if (this.isCooldownInProgress) {
            return;
        }
        let attachmentUploadInProgressCounter;
        this.attachmentService.attachmentUploadInProgressCounter$
            .pipe(first())
            .subscribe((counter) => (attachmentUploadInProgressCounter = counter));
        if (attachmentUploadInProgressCounter > 0) {
            if (!this.hideNotification) {
                this.hideNotification =
                    this.notificationService.addPermanentNotification('streamChat.Wait until all attachments have uploaded');
            }
            return;
        }
        const attachments = this.attachmentService.mapToAttachments();
        let text = this.textareaValue;
        text = text.replace(/^\n+/g, ''); // leading empty lines
        text = text.replace(/\n+$/g, ''); // ending empty lines
        const textContainsOnlySpaceChars = !text.replace(/ /g, ''); //spcae
        if ((!text || textContainsOnlySpaceChars) &&
            (!attachments || attachments.length === 0)) {
            return;
        }
        if (textContainsOnlySpaceChars) {
            text = '';
        }
        if (this.containsLinks && !this.canSendLinks) {
            this.notificationService.addTemporaryNotification('streamChat.Sending links is not allowed in this conversation');
            return;
        }
        if (!this.isUpdate) {
            this.textareaValue = '';
        }
        try {
            const message = await (this.isUpdate
                ? this.channelService.updateMessage({
                    ...this.message,
                    text: text,
                    attachments: attachments,
                })
                : this.channelService.sendMessage(text, attachments, this.mentionedUsers, this.parentMessageId, this.quotedMessage?.id));
            this.messageUpdate.emit({ message });
            if (this.isUpdate) {
                this.deselectMessageToEdit();
            }
            else {
                this.attachmentService.resetAttachmentUploads();
            }
        }
        catch (error) {
            if (this.isUpdate) {
                this.notificationService.addTemporaryNotification('streamChat.Edit message request failed');
            }
        }
        void this.channelService.typingStopped(this.parentMessageId);
        if (this.quotedMessage) {
            this.deselectMessageToQuote();
        }
    }
    get containsLinks() {
        return /(?:(?:https?|ftp):\/\/)?[\w/\-?=%.]+\.[\w/\-&?=%.]+/.test(this.textareaValue);
    }
    get quotedMessageAttachments() {
        const originalAttachments = this.quotedMessage?.attachments;
        return originalAttachments && originalAttachments.length
            ? [originalAttachments[0]]
            : [];
    }
    get disabledTextareaText() {
        if (!this.canSendMessages) {
            return this.mode === 'thread'
                ? "streamChat.You can't send thread replies in this channel"
                : "streamChat.You can't send messages in this channel";
        }
        return '';
    }
    itemsPasted(event) {
        if (this.configService.customPasteEventHandler) {
            this.configService.customPasteEventHandler(event, this);
        }
        else {
            if (event.clipboardData?.files && event.clipboardData?.files.length > 0) {
                event.preventDefault();
                void this.filesSelected(event.clipboardData?.files);
            }
        }
    }
    async filesSelected(fileList) {
        await this.attachmentService.filesSelected(fileList);
        this.clearFileInput();
    }
    deselectMessageToQuote() {
        this.channelService.selectMessageToQuote(undefined);
    }
    deselectMessageToEdit() {
        this.messageActionsService.messageToEdit$.next(undefined);
    }
    getEmojiPickerContext() {
        return {
            emojiInput$: this.emojiInputService.emojiInput$,
        };
    }
    getAttachmentPreviewListContext() {
        return {
            attachmentUploads$: this.attachmentService.attachmentUploads$,
            deleteUploadHandler: this.deleteUpload.bind(this),
            retryUploadHandler: this.retryUpload.bind(this),
            service: this.attachmentService,
        };
    }
    getAttachmentUploadContext() {
        return {
            isMultipleFileUploadEnabled: this.isMultipleFileUploadEnabled,
            attachmentService: this.attachmentService,
        };
    }
    getQuotedMessageTextContext() {
        return {
            message: this.quotedMessage,
            isQuoted: true,
            shouldTranslate: true,
        };
    }
    async startVoiceRecording() {
        await this.audioRecorder?.start();
        if (this.audioRecorder?.isRecording) {
            this.voiceRecorderService.isRecorderVisible$.next(true);
        }
    }
    async voiceRecordingReady(recording) {
        try {
            await this.attachmentService.uploadVoiceRecording(recording);
            if (this.configService.sendVoiceRecordingImmediately) {
                await this.messageSent();
            }
        }
        finally {
            this.voiceRecorderService.isRecorderVisible$.next(false);
        }
    }
    get isUpdate() {
        return !!this.message;
    }
    deleteUpload(upload) {
        if (this.isUpdate) {
            // Delay delete to avoid modal detecting this click as outside click
            setTimeout(() => {
                void this.attachmentService.deleteAttachment(upload);
            });
        }
        else {
            void this.attachmentService.deleteAttachment(upload);
        }
    }
    retryUpload(file) {
        void this.attachmentService.retryAttachmentUpload(file);
    }
    clearFileInput() {
        this.fileInput.nativeElement.value = '';
    }
    initTextarea() {
        // cleanup previously built textarea
        if (!this.canSendMessages) {
            this.textareaRef = undefined;
        }
        if (!this.canSendMessages || this.textareaRef || !this.textareaAnchor) {
            return;
        }
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.textareaType);
        this.textareaRef =
            this.textareaAnchor.viewContainerRef.createComponent(componentFactory);
        this.cdRef.detectChanges();
    }
    setCanSendMessages() {
        const capabilities = this.channel?.data?.own_capabilities;
        if (!capabilities) {
            this.canSendMessages = false;
        }
        else {
            this.canSendMessages =
                capabilities.indexOf(this.mode === 'main' ? 'send-message' : 'send-reply') !== -1 || this.isUpdate;
        }
        if (this.isViewInited) {
            this.cdRef.detectChanges();
            this.initTextarea();
        }
    }
    get parentMessageId() {
        let parentMessageId = undefined;
        if (this.mode === 'thread') {
            this.channelService.activeParentMessageId$
                .pipe(first())
                .subscribe((id) => (parentMessageId = id));
        }
        return parentMessageId;
    }
    startCooldown(cooldown) {
        this.textareaPlaceholder = this.slowModeTextareaPlaceholder;
        this.isCooldownInProgress = true;
        this.cooldown$ = timer(0, 1000).pipe(take(cooldown + 1), map((v) => cooldown - v), tap((v) => {
            if (v === 0) {
                this.stopCooldown();
            }
        }));
    }
    stopCooldown() {
        this.cooldown$ = undefined;
        this.isCooldownInProgress = false;
        this.textareaPlaceholder = this.defaultTextareaPlaceholder;
    }
    checkIfInEditMode() {
        if (!this.watchForMessageToEdit) {
            return;
        }
        if (!this.messageToEdit && this.message) {
            this.message = undefined;
            this.messageToUpdateChanged();
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }
        if (this.messageToEdit &&
            ((this.mode === 'main' && !this.messageToEdit.parent_id) ||
                (this.mode === 'thread' && this.messageToEdit.parent_id))) {
            this.message = this.messageToEdit;
            this.messageToUpdateChanged();
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }
    }
    messageToUpdateChanged() {
        this.attachmentService.resetAttachmentUploads();
        this.setCanSendMessages();
        if (this.isUpdate) {
            this.attachmentService.createFromAttachments(this.message.attachments || []);
            this.textareaValue = this.message.text || '';
        }
        else {
            this.textareaValue = '';
        }
    }
}
MessageInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageInputComponent, deps: [{ token: i1.ChannelService }, { token: i2.NotificationService }, { token: i3.AttachmentService }, { token: i4.MessageInputConfigService }, { token: textareaInjectionToken }, { token: i0.ComponentFactoryResolver }, { token: i0.ChangeDetectorRef }, { token: i5.EmojiInputService }, { token: i6.CustomTemplatesService }, { token: i7.MessageActionsService }, { token: i8.VoiceRecorderService }, { token: i9.AudioRecorderService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
MessageInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MessageInputComponent, selector: "stream-message-input", inputs: { isFileUploadEnabled: "isFileUploadEnabled", areMentionsEnabled: "areMentionsEnabled", mentionScope: "mentionScope", mode: "mode", isMultipleFileUploadEnabled: "isMultipleFileUploadEnabled", message: "message", sendMessage$: "sendMessage$", inputMode: "inputMode", autoFocus: "autoFocus", watchForMessageToEdit: "watchForMessageToEdit", displaySendButton: "displaySendButton", displayVoiceRecordingButton: "displayVoiceRecordingButton" }, outputs: { messageUpdate: "messageUpdate" }, host: { properties: { "class": "this.class" } }, providers: [AttachmentService, EmojiInputService, VoiceRecorderService], queries: [{ propertyName: "voiceRecorderRef", first: true, predicate: TemplateRef, descendants: true }], viewQueries: [{ propertyName: "fileInput", first: true, predicate: ["fileInput"], descendants: true }, { propertyName: "textareaAnchor", first: true, predicate: TextareaDirective, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"str-chat__message-input str-chat-angular__message-input\"\n  [style.display]=\"isVoiceRecording ? 'none' : 'flex'\"\n>\n  <div *ngIf=\"quotedMessage\" class=\"str-chat__quoted-message-preview-header\">\n    <div class=\"str-chat__quoted-message-reply-to-message\">\n      {{ \"streamChat.Reply to Message\" | translate }}\n    </div>\n    <button\n      class=\"str-chat__quoted-message-remove\"\n      data-testid=\"remove-quote\"\n      (click)=\"deselectMessageToQuote()\"\n      (keyup.enter)=\"deselectMessageToQuote()\"\n    >\n      <stream-icon-placeholder icon=\"close\"></stream-icon-placeholder>\n    </button>\n  </div>\n  <div *ngIf=\"isUpdate\" class=\"str-chat__quoted-message-preview-header\">\n    <div class=\"str-chat__quoted-message-reply-to-message\">\n      {{ \"streamChat.Edit Message\" | translate }}\n    </div>\n    <button\n      class=\"str-chat__quoted-message-remove\"\n      data-testid=\"remove-quote\"\n      (click)=\"deselectMessageToEdit()\"\n      (keyup.enter)=\"deselectMessageToEdit()\"\n    >\n      <stream-icon-placeholder icon=\"close\"></stream-icon-placeholder>\n    </button>\n  </div>\n  <ng-container *ngIf=\"canSendMessages; else notAllowed\">\n    <div\n      class=\"str-chat__message-input-inner str-chat-angular__message-input-inner\"\n    >\n      <ng-content select=\"[message-input-start]\"></ng-content>\n      <ng-container\n        *ngIf=\"isFileUploadEnabled && isFileUploadAuthorized && canSendMessages\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            customAttachmentUploadTemplate || defaultAttachmentUpload;\n            context: getAttachmentUploadContext()\n          \"\n        ></ng-container>\n        <ng-template #defaultAttachmentUpload>\n          <div\n            class=\"str-chat__file-input-container\"\n            data-testid=\"file-upload-button\"\n          >\n            <input\n              #fileInput\n              type=\"file\"\n              class=\"str-chat__file-input\"\n              data-testid=\"file-input\"\n              [multiple]=\"isMultipleFileUploadEnabled\"\n              id=\"{{ fileInputId }}\"\n              [disabled]=\"\n                (attachmentService.attachmentsCounter$ | async)! >=\n                attachmentService.maxNumberOfAttachments\n              \"\n              (change)=\"filesSelected(fileInput.files)\"\n            />\n            <label class=\"str-chat__file-input-label\" for=\"{{ fileInputId }}\">\n              <stream-icon-placeholder icon=\"attach\"></stream-icon-placeholder>\n            </label>\n          </div>\n        </ng-template>\n      </ng-container>\n      <div class=\"str-chat__message-textarea-container\">\n        <div\n          *ngIf=\"quotedMessage\"\n          data-testid=\"quoted-message-container\"\n          class=\"str-chat__quoted-message-preview\"\n        >\n          <stream-avatar-placeholder\n            data-testid=\"qouted-message-avatar\"\n            class=\"str-chat-angular__avatar-host str-chat__message-sender-avatar\"\n            type=\"user\"\n            location=\"quoted-message-sender\"\n            [imageUrl]=\"quotedMessage.user?.image\"\n            [name]=\"quotedMessage.user?.name || quotedMessage.user?.id\"\n            [user]=\"quotedMessage.user || undefined\"\n          ></stream-avatar-placeholder>\n          <div\n            class=\"quoted-message-preview-content-inner str-chat__quoted-message-bubble\"\n          >\n            <stream-attachment-list\n              *ngIf=\"\n                quotedMessage?.attachments && quotedMessage?.attachments?.length\n              \"\n              [attachments]=\"quotedMessageAttachments\"\n              [messageId]=\"quotedMessage.id\"\n            ></stream-attachment-list>\n            <div class=\"str-chat__quoted-message-text\">\n              <ng-container\n                *ngTemplateOutlet=\"\n                  (customTemplatesService.messageTextTemplate$ | async) ||\n                    defaultText;\n                  context: getQuotedMessageTextContext()\n                \"\n              ></ng-container>\n              <ng-template\n                #defaultText\n                let-message=\"message\"\n                let-isQuoted=\"isQuoted\"\n                let-shouldTranslate=\"shouldTranslate\"\n              >\n                <stream-message-text\n                  [message]=\"message\"\n                  [isQuoted]=\"isQuoted\"\n                  [shouldTranslate]=\"shouldTranslate\"\n                  data-testid=\"quoted-message-text\"\n                ></stream-message-text>\n              </ng-template>\n            </div>\n          </div>\n        </div>\n        <ng-template\n          #defaultAttachmentsPreview\n          let-attachmentUploads$=\"attachmentUploads$\"\n          let-retryUploadHandler=\"retryUploadHandler\"\n          let-deleteUploadHandler=\"deleteUploadHandler\"\n        >\n          <stream-attachment-preview-list\n            class=\"str-chat__attachment-preview-list-angular-host\"\n            [attachmentUploads$]=\"attachmentUploads$\"\n            (retryAttachmentUpload)=\"retryUploadHandler($event)\"\n            (deleteAttachment)=\"deleteUploadHandler($event)\"\n          ></stream-attachment-preview-list>\n        </ng-template>\n        <ng-container\n          *ngTemplateOutlet=\"\n            attachmentPreviewListTemplate || defaultAttachmentsPreview;\n            context: getAttachmentPreviewListContext()\n          \"\n        ></ng-container>\n        <div class=\"str-chat__message-textarea-with-emoji-picker\">\n          <ng-container\n            streamTextarea\n            [componentRef]=\"textareaRef\"\n            [areMentionsEnabled]=\"areMentionsEnabled\"\n            [mentionScope]=\"mentionScope\"\n            [inputMode]=\"inputMode\"\n            [autoFocus]=\"autoFocus\"\n            [placeholder]=\"textareaPlaceholder\"\n            [(value)]=\"textareaValue\"\n            (valueChange)=\"typingStart$.next()\"\n            (send)=\"messageSent()\"\n            (userMentions)=\"mentionedUsers = $event\"\n            (pasteFromClipboard)=\"itemsPasted($event)\"\n          ></ng-container>\n          <ng-container *ngIf=\"emojiPickerTemplate\" data-testid=\"emoji-picker\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                emojiPickerTemplate;\n                context: getEmojiPickerContext()\n              \"\n            ></ng-container>\n          </ng-container>\n        </div>\n      </div>\n      <button\n        *ngIf=\"canSendMessages && !isCooldownInProgress && displaySendButton\"\n        data-testid=\"send-button\"\n        class=\"str-chat__send-button\"\n        [disabled]=\"\n          (attachmentUploadInProgressCounter$ | async)! > 0 ||\n          (attachmentService.attachmentsCounter$ | async)! >\n            attachmentService.maxNumberOfAttachments ||\n          (!textareaValue &&\n            (attachmentUploads$ | async)!.length === 0 &&\n            (customAttachments$ | async)!.length === 0)\n        \"\n        (click)=\"messageSent()\"\n        (keyup.enter)=\"messageSent()\"\n      >\n        <stream-icon-placeholder icon=\"send\"></stream-icon-placeholder>\n      </button>\n      <div\n        *ngIf=\"isCooldownInProgress\"\n        class=\"str-chat__message-input-cooldown\"\n        data-testid=\"cooldown-timer\"\n      >\n        {{ cooldown$ | async }}\n      </div>\n      <button\n        *ngIf=\"displayVoiceRecordingButton\"\n        class=\"str-chat__start-recording-audio-button\"\n        data-testid=\"start-voice-recording\"\n        [disabled]=\"\n          voiceRecorderService.isRecorderVisible$.value ||\n          audioRecorder?.isRecording ||\n          (attachmentService.attachmentsCounter$ | async)! >=\n            attachmentService.maxNumberOfAttachments\n        \"\n        (click)=\"startVoiceRecording()\"\n        (keyup.enter)=\"startVoiceRecording()\"\n      >\n        <stream-icon-placeholder icon=\"mic\"></stream-icon-placeholder>\n      </button>\n      <ng-content select=\"[message-input-end]\"></ng-content>\n    </div>\n  </ng-container>\n  <ng-template #notAllowed>\n    <div\n      class=\"str-chat__message-input-not-allowed\"\n      data-testid=\"disabled-textarea\"\n    >\n      {{ disabledTextareaText | translate }}\n    </div>\n  </ng-template>\n</div>\n<ng-template\n  *ngIf=\"voiceRecorderRef\"\n  [ngTemplateOutlet]=\"voiceRecorderRef\"\n  [ngTemplateOutletContext]=\"{ service: voiceRecorderService }\"\n></ng-template>\n", dependencies: [{ kind: "directive", type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i10.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i11.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { kind: "component", type: i12.IconPlaceholderComponent, selector: "stream-icon-placeholder", inputs: ["icon"] }, { kind: "component", type: i13.AttachmentListComponent, selector: "stream-attachment-list", inputs: ["messageId", "parentMessageId", "attachments"], outputs: ["imageModalStateChange"] }, { kind: "component", type: i14.AttachmentPreviewListComponent, selector: "stream-attachment-preview-list", inputs: ["attachmentUploads$"], outputs: ["retryAttachmentUpload", "deleteAttachment"] }, { kind: "directive", type: i15.TextareaDirective, selector: "[streamTextarea]", inputs: ["componentRef", "areMentionsEnabled", "mentionScope", "inputMode", "value", "placeholder", "autoFocus"], outputs: ["valueChange", "send", "userMentions", "pasteFromClipboard"] }, { kind: "component", type: i16.MessageTextComponent, selector: "stream-message-text", inputs: ["message", "isQuoted", "shouldTranslate"] }, { kind: "pipe", type: i10.AsyncPipe, name: "async" }, { kind: "pipe", type: i17.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-message-input', providers: [AttachmentService, EmojiInputService, VoiceRecorderService], template: "<div\n  class=\"str-chat__message-input str-chat-angular__message-input\"\n  [style.display]=\"isVoiceRecording ? 'none' : 'flex'\"\n>\n  <div *ngIf=\"quotedMessage\" class=\"str-chat__quoted-message-preview-header\">\n    <div class=\"str-chat__quoted-message-reply-to-message\">\n      {{ \"streamChat.Reply to Message\" | translate }}\n    </div>\n    <button\n      class=\"str-chat__quoted-message-remove\"\n      data-testid=\"remove-quote\"\n      (click)=\"deselectMessageToQuote()\"\n      (keyup.enter)=\"deselectMessageToQuote()\"\n    >\n      <stream-icon-placeholder icon=\"close\"></stream-icon-placeholder>\n    </button>\n  </div>\n  <div *ngIf=\"isUpdate\" class=\"str-chat__quoted-message-preview-header\">\n    <div class=\"str-chat__quoted-message-reply-to-message\">\n      {{ \"streamChat.Edit Message\" | translate }}\n    </div>\n    <button\n      class=\"str-chat__quoted-message-remove\"\n      data-testid=\"remove-quote\"\n      (click)=\"deselectMessageToEdit()\"\n      (keyup.enter)=\"deselectMessageToEdit()\"\n    >\n      <stream-icon-placeholder icon=\"close\"></stream-icon-placeholder>\n    </button>\n  </div>\n  <ng-container *ngIf=\"canSendMessages; else notAllowed\">\n    <div\n      class=\"str-chat__message-input-inner str-chat-angular__message-input-inner\"\n    >\n      <ng-content select=\"[message-input-start]\"></ng-content>\n      <ng-container\n        *ngIf=\"isFileUploadEnabled && isFileUploadAuthorized && canSendMessages\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            customAttachmentUploadTemplate || defaultAttachmentUpload;\n            context: getAttachmentUploadContext()\n          \"\n        ></ng-container>\n        <ng-template #defaultAttachmentUpload>\n          <div\n            class=\"str-chat__file-input-container\"\n            data-testid=\"file-upload-button\"\n          >\n            <input\n              #fileInput\n              type=\"file\"\n              class=\"str-chat__file-input\"\n              data-testid=\"file-input\"\n              [multiple]=\"isMultipleFileUploadEnabled\"\n              id=\"{{ fileInputId }}\"\n              [disabled]=\"\n                (attachmentService.attachmentsCounter$ | async)! >=\n                attachmentService.maxNumberOfAttachments\n              \"\n              (change)=\"filesSelected(fileInput.files)\"\n            />\n            <label class=\"str-chat__file-input-label\" for=\"{{ fileInputId }}\">\n              <stream-icon-placeholder icon=\"attach\"></stream-icon-placeholder>\n            </label>\n          </div>\n        </ng-template>\n      </ng-container>\n      <div class=\"str-chat__message-textarea-container\">\n        <div\n          *ngIf=\"quotedMessage\"\n          data-testid=\"quoted-message-container\"\n          class=\"str-chat__quoted-message-preview\"\n        >\n          <stream-avatar-placeholder\n            data-testid=\"qouted-message-avatar\"\n            class=\"str-chat-angular__avatar-host str-chat__message-sender-avatar\"\n            type=\"user\"\n            location=\"quoted-message-sender\"\n            [imageUrl]=\"quotedMessage.user?.image\"\n            [name]=\"quotedMessage.user?.name || quotedMessage.user?.id\"\n            [user]=\"quotedMessage.user || undefined\"\n          ></stream-avatar-placeholder>\n          <div\n            class=\"quoted-message-preview-content-inner str-chat__quoted-message-bubble\"\n          >\n            <stream-attachment-list\n              *ngIf=\"\n                quotedMessage?.attachments && quotedMessage?.attachments?.length\n              \"\n              [attachments]=\"quotedMessageAttachments\"\n              [messageId]=\"quotedMessage.id\"\n            ></stream-attachment-list>\n            <div class=\"str-chat__quoted-message-text\">\n              <ng-container\n                *ngTemplateOutlet=\"\n                  (customTemplatesService.messageTextTemplate$ | async) ||\n                    defaultText;\n                  context: getQuotedMessageTextContext()\n                \"\n              ></ng-container>\n              <ng-template\n                #defaultText\n                let-message=\"message\"\n                let-isQuoted=\"isQuoted\"\n                let-shouldTranslate=\"shouldTranslate\"\n              >\n                <stream-message-text\n                  [message]=\"message\"\n                  [isQuoted]=\"isQuoted\"\n                  [shouldTranslate]=\"shouldTranslate\"\n                  data-testid=\"quoted-message-text\"\n                ></stream-message-text>\n              </ng-template>\n            </div>\n          </div>\n        </div>\n        <ng-template\n          #defaultAttachmentsPreview\n          let-attachmentUploads$=\"attachmentUploads$\"\n          let-retryUploadHandler=\"retryUploadHandler\"\n          let-deleteUploadHandler=\"deleteUploadHandler\"\n        >\n          <stream-attachment-preview-list\n            class=\"str-chat__attachment-preview-list-angular-host\"\n            [attachmentUploads$]=\"attachmentUploads$\"\n            (retryAttachmentUpload)=\"retryUploadHandler($event)\"\n            (deleteAttachment)=\"deleteUploadHandler($event)\"\n          ></stream-attachment-preview-list>\n        </ng-template>\n        <ng-container\n          *ngTemplateOutlet=\"\n            attachmentPreviewListTemplate || defaultAttachmentsPreview;\n            context: getAttachmentPreviewListContext()\n          \"\n        ></ng-container>\n        <div class=\"str-chat__message-textarea-with-emoji-picker\">\n          <ng-container\n            streamTextarea\n            [componentRef]=\"textareaRef\"\n            [areMentionsEnabled]=\"areMentionsEnabled\"\n            [mentionScope]=\"mentionScope\"\n            [inputMode]=\"inputMode\"\n            [autoFocus]=\"autoFocus\"\n            [placeholder]=\"textareaPlaceholder\"\n            [(value)]=\"textareaValue\"\n            (valueChange)=\"typingStart$.next()\"\n            (send)=\"messageSent()\"\n            (userMentions)=\"mentionedUsers = $event\"\n            (pasteFromClipboard)=\"itemsPasted($event)\"\n          ></ng-container>\n          <ng-container *ngIf=\"emojiPickerTemplate\" data-testid=\"emoji-picker\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                emojiPickerTemplate;\n                context: getEmojiPickerContext()\n              \"\n            ></ng-container>\n          </ng-container>\n        </div>\n      </div>\n      <button\n        *ngIf=\"canSendMessages && !isCooldownInProgress && displaySendButton\"\n        data-testid=\"send-button\"\n        class=\"str-chat__send-button\"\n        [disabled]=\"\n          (attachmentUploadInProgressCounter$ | async)! > 0 ||\n          (attachmentService.attachmentsCounter$ | async)! >\n            attachmentService.maxNumberOfAttachments ||\n          (!textareaValue &&\n            (attachmentUploads$ | async)!.length === 0 &&\n            (customAttachments$ | async)!.length === 0)\n        \"\n        (click)=\"messageSent()\"\n        (keyup.enter)=\"messageSent()\"\n      >\n        <stream-icon-placeholder icon=\"send\"></stream-icon-placeholder>\n      </button>\n      <div\n        *ngIf=\"isCooldownInProgress\"\n        class=\"str-chat__message-input-cooldown\"\n        data-testid=\"cooldown-timer\"\n      >\n        {{ cooldown$ | async }}\n      </div>\n      <button\n        *ngIf=\"displayVoiceRecordingButton\"\n        class=\"str-chat__start-recording-audio-button\"\n        data-testid=\"start-voice-recording\"\n        [disabled]=\"\n          voiceRecorderService.isRecorderVisible$.value ||\n          audioRecorder?.isRecording ||\n          (attachmentService.attachmentsCounter$ | async)! >=\n            attachmentService.maxNumberOfAttachments\n        \"\n        (click)=\"startVoiceRecording()\"\n        (keyup.enter)=\"startVoiceRecording()\"\n      >\n        <stream-icon-placeholder icon=\"mic\"></stream-icon-placeholder>\n      </button>\n      <ng-content select=\"[message-input-end]\"></ng-content>\n    </div>\n  </ng-container>\n  <ng-template #notAllowed>\n    <div\n      class=\"str-chat__message-input-not-allowed\"\n      data-testid=\"disabled-textarea\"\n    >\n      {{ disabledTextareaText | translate }}\n    </div>\n  </ng-template>\n</div>\n<ng-template\n  *ngIf=\"voiceRecorderRef\"\n  [ngTemplateOutlet]=\"voiceRecorderRef\"\n  [ngTemplateOutletContext]=\"{ service: voiceRecorderService }\"\n></ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.NotificationService }, { type: i3.AttachmentService }, { type: i4.MessageInputConfigService }, { type: i0.Type, decorators: [{
                    type: Inject,
                    args: [textareaInjectionToken]
                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ChangeDetectorRef }, { type: i5.EmojiInputService }, { type: i6.CustomTemplatesService }, { type: i7.MessageActionsService }, { type: i8.VoiceRecorderService }, { type: i9.AudioRecorderService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { isFileUploadEnabled: [{
                type: Input
            }], areMentionsEnabled: [{
                type: Input
            }], mentionScope: [{
                type: Input
            }], mode: [{
                type: Input
            }], isMultipleFileUploadEnabled: [{
                type: Input
            }], message: [{
                type: Input
            }], sendMessage$: [{
                type: Input
            }], inputMode: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], watchForMessageToEdit: [{
                type: Input
            }], displaySendButton: [{
                type: Input
            }], displayVoiceRecordingButton: [{
                type: Input
            }], messageUpdate: [{
                type: Output
            }], voiceRecorderRef: [{
                type: ContentChild,
                args: [TemplateRef]
            }], class: [{
                type: HostBinding
            }], fileInput: [{
                type: ViewChild,
                args: ['fileInput']
            }], textareaAnchor: [{
                type: ViewChild,
                args: [TextareaDirective, { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,