import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * The `MessageInputConfigService` is used to keep a consistent configuration among the different [`MessageInput`](/chat/docs/sdk/angular/components/MessageInputComponent/) components if your UI has more than one input component.
 */
export class MessageInputConfigService {
    constructor() {
        /**
         * If file upload is enabled, the user can open a file selector from the input. Please note that the user also needs to have the necessary [channel capability](/chat/docs/javascript/channel_capabilities/).
         */
        this.isFileUploadEnabled = true;
        /**
         * If true, users can mention other users in messages. You also [need to use the `AutocompleteTextarea`](/chat/docs/sdk/angular/concepts/opt-in-architecture/) for this feature to work.
         */
        this.areMentionsEnabled = true;
        /**
         * If `false`, users can only upload one attachment per message
         */
        this.isMultipleFileUploadEnabled = true;
        /**
         * The scope for user mentions, either members of the current channel of members of the application
         */
        this.mentionScope = 'channel';
        /**
         * In `desktop` mode the `Enter` key will trigger message sending, in `mobile` mode the `Enter` key will insert a new line to the message input.
         */
        this.inputMode = 'desktop';
        /**
         * If `true` the recording will be sent as a message immediately after the recording is completed.
         * If `false`, the recording will added to the attachment preview, and users can continue composing the message.
         */
        this.sendVoiceRecordingImmediately = true;
        /**
         * Add custom autocomplete configurations to the message input
         *
         * Only works when using StreamAutocompleteTextareaModule
         */
        this.customAutocompletes$ = new BehaviorSubject([]);
    }
}
MessageInputConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageInputConfigService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MessageInputConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageInputConfigService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageInputConfigService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1pbnB1dC1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9tZXNzYWdlLWlucHV0L21lc3NhZ2UtaW5wdXQtY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQUd2Qzs7R0FFRztBQUlILE1BQU0sT0FBTyx5QkFBeUI7SUErQ3BDO1FBOUNBOztXQUVHO1FBQ0gsd0JBQW1CLEdBQXdCLElBQUksQ0FBQztRQUNoRDs7V0FFRztRQUNILHVCQUFrQixHQUF3QixJQUFJLENBQUM7UUFDL0M7O1dBRUc7UUFDSCxnQ0FBMkIsR0FBd0IsSUFBSSxDQUFDO1FBQ3hEOztXQUVHO1FBQ0gsaUJBQVksR0FBMEMsU0FBUyxDQUFDO1FBQ2hFOztXQUVHO1FBQ0gsY0FBUyxHQUF5QixTQUFTLENBQUM7UUFDNUM7OztXQUdHO1FBQ0gsa0NBQTZCLEdBQUcsSUFBSSxDQUFDO1FBZXJDOzs7O1dBSUc7UUFDSCx5QkFBb0IsR0FBRyxJQUFJLGVBQWUsQ0FBdUIsRUFBRSxDQUFDLENBQUM7SUFFdEQsQ0FBQzs7c0hBL0NMLHlCQUF5QjswSEFBekIseUJBQXlCLGNBRnhCLE1BQU07MkZBRVAseUJBQXlCO2tCQUhyQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2VJbnB1dENvbXBvbmVudCB9IGZyb20gJy4vbWVzc2FnZS1pbnB1dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDdXN0b21BdXRvY29tcGxldGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKlxuICogVGhlIGBNZXNzYWdlSW5wdXRDb25maWdTZXJ2aWNlYCBpcyB1c2VkIHRvIGtlZXAgYSBjb25zaXN0ZW50IGNvbmZpZ3VyYXRpb24gYW1vbmcgdGhlIGRpZmZlcmVudCBbYE1lc3NhZ2VJbnB1dGBdKC9jaGF0L2RvY3Mvc2RrL2FuZ3VsYXIvY29tcG9uZW50cy9NZXNzYWdlSW5wdXRDb21wb25lbnQvKSBjb21wb25lbnRzIGlmIHlvdXIgVUkgaGFzIG1vcmUgdGhhbiBvbmUgaW5wdXQgY29tcG9uZW50LlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZUlucHV0Q29uZmlnU2VydmljZSB7XG4gIC8qKlxuICAgKiBJZiBmaWxlIHVwbG9hZCBpcyBlbmFibGVkLCB0aGUgdXNlciBjYW4gb3BlbiBhIGZpbGUgc2VsZWN0b3IgZnJvbSB0aGUgaW5wdXQuIFBsZWFzZSBub3RlIHRoYXQgdGhlIHVzZXIgYWxzbyBuZWVkcyB0byBoYXZlIHRoZSBuZWNlc3NhcnkgW2NoYW5uZWwgY2FwYWJpbGl0eV0oL2NoYXQvZG9jcy9qYXZhc2NyaXB0L2NoYW5uZWxfY2FwYWJpbGl0aWVzLykuXG4gICAqL1xuICBpc0ZpbGVVcGxvYWRFbmFibGVkOiBib29sZWFuIHwgdW5kZWZpbmVkID0gdHJ1ZTtcbiAgLyoqXG4gICAqIElmIHRydWUsIHVzZXJzIGNhbiBtZW50aW9uIG90aGVyIHVzZXJzIGluIG1lc3NhZ2VzLiBZb3UgYWxzbyBbbmVlZCB0byB1c2UgdGhlIGBBdXRvY29tcGxldGVUZXh0YXJlYWBdKC9jaGF0L2RvY3Mvc2RrL2FuZ3VsYXIvY29uY2VwdHMvb3B0LWluLWFyY2hpdGVjdHVyZS8pIGZvciB0aGlzIGZlYXR1cmUgdG8gd29yay5cbiAgICovXG4gIGFyZU1lbnRpb25zRW5hYmxlZDogYm9vbGVhbiB8IHVuZGVmaW5lZCA9IHRydWU7XG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgLCB1c2VycyBjYW4gb25seSB1cGxvYWQgb25lIGF0dGFjaG1lbnQgcGVyIG1lc3NhZ2VcbiAgICovXG4gIGlzTXVsdGlwbGVGaWxlVXBsb2FkRW5hYmxlZDogYm9vbGVhbiB8IHVuZGVmaW5lZCA9IHRydWU7XG4gIC8qKlxuICAgKiBUaGUgc2NvcGUgZm9yIHVzZXIgbWVudGlvbnMsIGVpdGhlciBtZW1iZXJzIG9mIHRoZSBjdXJyZW50IGNoYW5uZWwgb2YgbWVtYmVycyBvZiB0aGUgYXBwbGljYXRpb25cbiAgICovXG4gIG1lbnRpb25TY29wZTogJ2NoYW5uZWwnIHwgJ2FwcGxpY2F0aW9uJyB8IHVuZGVmaW5lZCA9ICdjaGFubmVsJztcbiAgLyoqXG4gICAqIEluIGBkZXNrdG9wYCBtb2RlIHRoZSBgRW50ZXJgIGtleSB3aWxsIHRyaWdnZXIgbWVzc2FnZSBzZW5kaW5nLCBpbiBgbW9iaWxlYCBtb2RlIHRoZSBgRW50ZXJgIGtleSB3aWxsIGluc2VydCBhIG5ldyBsaW5lIHRvIHRoZSBtZXNzYWdlIGlucHV0LlxuICAgKi9cbiAgaW5wdXRNb2RlOiAnZGVza3RvcCcgfCAnbW9iaWxlJyA9ICdkZXNrdG9wJztcbiAgLyoqXG4gICAqIElmIGB0cnVlYCB0aGUgcmVjb3JkaW5nIHdpbGwgYmUgc2VudCBhcyBhIG1lc3NhZ2UgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIHJlY29yZGluZyBpcyBjb21wbGV0ZWQuXG4gICAqIElmIGBmYWxzZWAsIHRoZSByZWNvcmRpbmcgd2lsbCBhZGRlZCB0byB0aGUgYXR0YWNobWVudCBwcmV2aWV3LCBhbmQgdXNlcnMgY2FuIGNvbnRpbnVlIGNvbXBvc2luZyB0aGUgbWVzc2FnZS5cbiAgICovXG4gIHNlbmRWb2ljZVJlY29yZGluZ0ltbWVkaWF0ZWx5ID0gdHJ1ZTtcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBtZXNzYWdlIGlucHV0J3MgZGVmYXVsdCBldmVudCBoYW5kbGVyIGZvciBbcGFzdGUgZXZlbnRzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRWxlbWVudC9wYXN0ZV9ldmVudClcbiAgICpcbiAgICogVGhlIGV2ZW50IGhhbmRsZXIgd2lsbCByZWNlaXZlIHRoZSBldmVudCBvYmplY3QsIGFuZCB0aGUgW21lc3NhZ2UgaW5wdXQgY29tcG9uZW50XSgvY2hhdC9kb2NzL3Nkay9hbmd1bGFyL2NvbXBvbmVudHMvTWVzc2FnZUlucHV0Q29tcG9uZW50KS5cbiAgICpcbiAgICogWW91IGNhbiB1c2UgdGhlIHB1YmxpYyBBUEkgb2YgdGhlIG1lc3NhZ2UgaW5wdXQgY29tcG9uZW50IHRvIHVwZGF0ZSB0aGUgY29tcG9zZXIuIFR5cGljYWxseSB5b3Ugd2FudCB0byB1cGRhdGUgdGhlIG1lc3NhZ2UgdGV4dCBhbmQvb3IgYXR0YWNobWVudHMsIHRoaXMgaXMgaG93IHlvdSBjYW4gZG8gdGhlc2U6XG4gICAqIC0gQ2hhbmdlIG1lc3NhZ2UgdGV4dDogYGlucHV0Q29tcG9uZW50LnRleHRhcmVhVmFsdWUgPSAnPG5ldyB2YWx1ZT4nYFxuICAgKiAtIFVwbG9hZCBmaWxlIG9yIGltYWdlIGF0dGFjaG1lbnRzOiBgaW5wdXRDb21wb25lbnQuYXR0YWNobWVudFNlcnZpY2UuZmlsZXNTZWxlY3RlZCg8ZmlsZXM+KWBcbiAgICogLSBVcGxvYWQgY3VzdG9tIGF0dGFjaG1lbnRzOiBgaW5wdXRDb21wb25lbnQuYXR0YWNobWVudFNlcnZpY2UuY3VzdG9tQXR0YWNobWVudHMkLm5leHQoPGN1c3RvbSBhdHRhY2htZW50cz4pYFxuICAgKi9cbiAgY3VzdG9tUGFzdGVFdmVudEhhbmRsZXI/OiAoXG4gICAgZXZlbnQ6IENsaXBib2FyZEV2ZW50LFxuICAgIGlucHV0Q29tcG9uZW50OiBNZXNzYWdlSW5wdXRDb21wb25lbnRcbiAgKSA9PiB2b2lkO1xuICAvKipcbiAgICogQWRkIGN1c3RvbSBhdXRvY29tcGxldGUgY29uZmlndXJhdGlvbnMgdG8gdGhlIG1lc3NhZ2UgaW5wdXRcbiAgICpcbiAgICogT25seSB3b3JrcyB3aGVuIHVzaW5nIFN0cmVhbUF1dG9jb21wbGV0ZVRleHRhcmVhTW9kdWxlXG4gICAqL1xuICBjdXN0b21BdXRvY29tcGxldGVzJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Q3VzdG9tQXV0b2NvbXBsZXRlW10+KFtdKTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG59XG4iXX0=