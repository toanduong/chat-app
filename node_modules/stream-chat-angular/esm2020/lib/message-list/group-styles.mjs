export const getGroupStyles = (message, previousMessage, nextMessage, options = {
    noGroupByUser: false,
    lastReadMessageId: undefined,
    noGroupByReadState: false,
}) => {
    if (options.noGroupByUser ||
        (message.attachments && message.attachments.length !== 0))
        return 'single';
    const isTopMessage = !previousMessage ||
        !isOnSameDay(previousMessage.created_at, message.created_at) ||
        previousMessage.type === 'system' ||
        (previousMessage.attachments &&
            previousMessage.attachments?.length !== 0) ||
        message.user?.id !== previousMessage.user?.id ||
        previousMessage.type === 'error' ||
        previousMessage.deleted_at ||
        (previousMessage.id === options.lastReadMessageId &&
            !options.noGroupByReadState) ||
        previousMessage.message_text_updated_at ||
        (message.reaction_counts &&
            Object.keys(message.reaction_counts).length > 0);
    const isBottomMessage = !nextMessage ||
        !isOnSameDay(message.created_at, nextMessage.created_at) ||
        nextMessage.type === 'system' ||
        (nextMessage.attachments && nextMessage.attachments?.length !== 0) ||
        message.user?.id !== nextMessage.user?.id ||
        nextMessage.type === 'error' ||
        nextMessage.deleted_at ||
        (message.id === options.lastReadMessageId && !options.noGroupByReadState) ||
        message.message_text_updated_at ||
        (nextMessage.reaction_counts &&
            Object.keys(nextMessage.reaction_counts).length > 0);
    if (!isTopMessage && !isBottomMessage) {
        if (message.deleted_at || message.type === 'error')
            return 'single';
        return 'middle';
    }
    if (isBottomMessage) {
        if (isTopMessage || message.deleted_at || message.type === 'error')
            return 'single';
        return 'bottom';
    }
    if (isTopMessage)
        return 'top';
    return '';
};
const isOnSameDay = (date1, date2) => {
    return (date1.getFullYear() === date2.getFullYear() &&
        date1.getMonth() === date2.getMonth() &&
        date1.getDate() === date2.getDate());
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtc3R5bGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RyZWFtLWNoYXQtYW5ndWxhci9zcmMvbGliL21lc3NhZ2UtbGlzdC9ncm91cC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzVCLE9BQXNCLEVBQ3RCLGVBQStCLEVBQy9CLFdBQTJCLEVBQzNCLFVBQTZCO0lBQzNCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGlCQUFpQixFQUFFLFNBQVM7SUFDNUIsa0JBQWtCLEVBQUUsS0FBSztDQUMxQixFQUNXLEVBQUU7SUFDZCxJQUNFLE9BQU8sQ0FBQyxhQUFhO1FBQ3JCLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7UUFFekQsT0FBTyxRQUFRLENBQUM7SUFFbEIsTUFBTSxZQUFZLEdBQ2hCLENBQUMsZUFBZTtRQUNoQixDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDNUQsZUFBZSxDQUFDLElBQUksS0FBSyxRQUFRO1FBQ2pDLENBQUMsZUFBZSxDQUFDLFdBQVc7WUFDMUIsZUFBZSxDQUFDLFdBQVcsRUFBRSxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLGVBQWUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUM3QyxlQUFlLENBQUMsSUFBSSxLQUFLLE9BQU87UUFDaEMsZUFBZSxDQUFDLFVBQVU7UUFDMUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxpQkFBaUI7WUFDL0MsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7UUFDOUIsZUFBZSxDQUFDLHVCQUF1QjtRQUN2QyxDQUFDLE9BQU8sQ0FBQyxlQUFlO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVyRCxNQUFNLGVBQWUsR0FDbkIsQ0FBQyxXQUFXO1FBQ1osQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDO1FBQ3hELFdBQVcsQ0FBQyxJQUFJLEtBQUssUUFBUTtRQUM3QixDQUFDLFdBQVcsQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUN6QyxXQUFXLENBQUMsSUFBSSxLQUFLLE9BQU87UUFDNUIsV0FBVyxDQUFDLFVBQVU7UUFDdEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztRQUN6RSxPQUFPLENBQUMsdUJBQXVCO1FBQy9CLENBQUMsV0FBVyxDQUFDLGVBQWU7WUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXpELElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxlQUFlLEVBQUU7UUFDckMsSUFBSSxPQUFPLENBQUMsVUFBVSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssT0FBTztZQUFFLE9BQU8sUUFBUSxDQUFDO1FBQ3BFLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxlQUFlLEVBQUU7UUFDbkIsSUFBSSxZQUFZLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQU87WUFDaEUsT0FBTyxRQUFRLENBQUM7UUFDbEIsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFFRCxJQUFJLFlBQVk7UUFBRSxPQUFPLEtBQUssQ0FBQztJQUUvQixPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBVyxFQUFFLEtBQVcsRUFBRSxFQUFFO0lBQy9DLE9BQU8sQ0FDTCxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUMzQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUNyQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUNwQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JvdXBTdHlsZU9wdGlvbnMsIFN0cmVhbU1lc3NhZ2UgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIEdyb3VwU3R5bGUgPSAnJyB8ICdtaWRkbGUnIHwgJ3RvcCcgfCAnYm90dG9tJyB8ICdzaW5nbGUnO1xuXG5leHBvcnQgY29uc3QgZ2V0R3JvdXBTdHlsZXMgPSAoXG4gIG1lc3NhZ2U6IFN0cmVhbU1lc3NhZ2UsXG4gIHByZXZpb3VzTWVzc2FnZT86IFN0cmVhbU1lc3NhZ2UsXG4gIG5leHRNZXNzYWdlPzogU3RyZWFtTWVzc2FnZSxcbiAgb3B0aW9uczogR3JvdXBTdHlsZU9wdGlvbnMgPSB7XG4gICAgbm9Hcm91cEJ5VXNlcjogZmFsc2UsXG4gICAgbGFzdFJlYWRNZXNzYWdlSWQ6IHVuZGVmaW5lZCxcbiAgICBub0dyb3VwQnlSZWFkU3RhdGU6IGZhbHNlLFxuICB9XG4pOiBHcm91cFN0eWxlID0+IHtcbiAgaWYgKFxuICAgIG9wdGlvbnMubm9Hcm91cEJ5VXNlciB8fFxuICAgIChtZXNzYWdlLmF0dGFjaG1lbnRzICYmIG1lc3NhZ2UuYXR0YWNobWVudHMubGVuZ3RoICE9PSAwKVxuICApXG4gICAgcmV0dXJuICdzaW5nbGUnO1xuXG4gIGNvbnN0IGlzVG9wTWVzc2FnZSA9XG4gICAgIXByZXZpb3VzTWVzc2FnZSB8fFxuICAgICFpc09uU2FtZURheShwcmV2aW91c01lc3NhZ2UuY3JlYXRlZF9hdCwgbWVzc2FnZS5jcmVhdGVkX2F0KSB8fFxuICAgIHByZXZpb3VzTWVzc2FnZS50eXBlID09PSAnc3lzdGVtJyB8fFxuICAgIChwcmV2aW91c01lc3NhZ2UuYXR0YWNobWVudHMgJiZcbiAgICAgIHByZXZpb3VzTWVzc2FnZS5hdHRhY2htZW50cz8ubGVuZ3RoICE9PSAwKSB8fFxuICAgIG1lc3NhZ2UudXNlcj8uaWQgIT09IHByZXZpb3VzTWVzc2FnZS51c2VyPy5pZCB8fFxuICAgIHByZXZpb3VzTWVzc2FnZS50eXBlID09PSAnZXJyb3InIHx8XG4gICAgcHJldmlvdXNNZXNzYWdlLmRlbGV0ZWRfYXQgfHxcbiAgICAocHJldmlvdXNNZXNzYWdlLmlkID09PSBvcHRpb25zLmxhc3RSZWFkTWVzc2FnZUlkICYmXG4gICAgICAhb3B0aW9ucy5ub0dyb3VwQnlSZWFkU3RhdGUpIHx8XG4gICAgcHJldmlvdXNNZXNzYWdlLm1lc3NhZ2VfdGV4dF91cGRhdGVkX2F0IHx8XG4gICAgKG1lc3NhZ2UucmVhY3Rpb25fY291bnRzICYmXG4gICAgICBPYmplY3Qua2V5cyhtZXNzYWdlLnJlYWN0aW9uX2NvdW50cykubGVuZ3RoID4gMCk7XG5cbiAgY29uc3QgaXNCb3R0b21NZXNzYWdlID1cbiAgICAhbmV4dE1lc3NhZ2UgfHxcbiAgICAhaXNPblNhbWVEYXkobWVzc2FnZS5jcmVhdGVkX2F0LCBuZXh0TWVzc2FnZS5jcmVhdGVkX2F0KSB8fFxuICAgIG5leHRNZXNzYWdlLnR5cGUgPT09ICdzeXN0ZW0nIHx8XG4gICAgKG5leHRNZXNzYWdlLmF0dGFjaG1lbnRzICYmIG5leHRNZXNzYWdlLmF0dGFjaG1lbnRzPy5sZW5ndGggIT09IDApIHx8XG4gICAgbWVzc2FnZS51c2VyPy5pZCAhPT0gbmV4dE1lc3NhZ2UudXNlcj8uaWQgfHxcbiAgICBuZXh0TWVzc2FnZS50eXBlID09PSAnZXJyb3InIHx8XG4gICAgbmV4dE1lc3NhZ2UuZGVsZXRlZF9hdCB8fFxuICAgIChtZXNzYWdlLmlkID09PSBvcHRpb25zLmxhc3RSZWFkTWVzc2FnZUlkICYmICFvcHRpb25zLm5vR3JvdXBCeVJlYWRTdGF0ZSkgfHxcbiAgICBtZXNzYWdlLm1lc3NhZ2VfdGV4dF91cGRhdGVkX2F0IHx8XG4gICAgKG5leHRNZXNzYWdlLnJlYWN0aW9uX2NvdW50cyAmJlxuICAgICAgT2JqZWN0LmtleXMobmV4dE1lc3NhZ2UucmVhY3Rpb25fY291bnRzKS5sZW5ndGggPiAwKTtcblxuICBpZiAoIWlzVG9wTWVzc2FnZSAmJiAhaXNCb3R0b21NZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UuZGVsZXRlZF9hdCB8fCBtZXNzYWdlLnR5cGUgPT09ICdlcnJvcicpIHJldHVybiAnc2luZ2xlJztcbiAgICByZXR1cm4gJ21pZGRsZSc7XG4gIH1cblxuICBpZiAoaXNCb3R0b21NZXNzYWdlKSB7XG4gICAgaWYgKGlzVG9wTWVzc2FnZSB8fCBtZXNzYWdlLmRlbGV0ZWRfYXQgfHwgbWVzc2FnZS50eXBlID09PSAnZXJyb3InKVxuICAgICAgcmV0dXJuICdzaW5nbGUnO1xuICAgIHJldHVybiAnYm90dG9tJztcbiAgfVxuXG4gIGlmIChpc1RvcE1lc3NhZ2UpIHJldHVybiAndG9wJztcblxuICByZXR1cm4gJyc7XG59O1xuXG5jb25zdCBpc09uU2FtZURheSA9IChkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpID0+IHtcbiAgcmV0dXJuIChcbiAgICBkYXRlMS5nZXRGdWxsWWVhcigpID09PSBkYXRlMi5nZXRGdWxsWWVhcigpICYmXG4gICAgZGF0ZTEuZ2V0TW9udGgoKSA9PT0gZGF0ZTIuZ2V0TW9udGgoKSAmJlxuICAgIGRhdGUxLmdldERhdGUoKSA9PT0gZGF0ZTIuZ2V0RGF0ZSgpXG4gICk7XG59O1xuIl19