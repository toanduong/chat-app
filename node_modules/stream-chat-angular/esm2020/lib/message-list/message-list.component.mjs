import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild, } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { filter, map, shareReplay, take, tap, throttleTime, } from 'rxjs/operators';
import { getGroupStyles } from './group-styles';
import { listUsers } from '../list-users';
import { isOnSeparateDate } from '../is-on-separate-date';
import { VirtualizedMessageListService } from '../virtualized-message-list.service';
import { isSafari } from '../is-safari';
import * as i0 from "@angular/core";
import * as i1 from "../channel.service";
import * as i2 from "../chat-client.service";
import * as i3 from "../custom-templates.service";
import * as i4 from "../date-parser.service";
import * as i5 from "@angular/common";
import * as i6 from "../icon/icon.component";
import * as i7 from "../icon/icon-placeholder/icon-placeholder.component";
import * as i8 from "../icon/loading-indicator-placeholder/loading-indicator-placeholder.component";
import * as i9 from "../message/message.component";
import * as i10 from "@ngx-translate/core";
/**
 * The `MessageList` component renders a scrollable list of messages.
 */
export class MessageListComponent {
    constructor(channelService, chatClientService, customTemplatesService, dateParser, ngZone, cdRef) {
        this.channelService = channelService;
        this.chatClientService = chatClientService;
        this.customTemplatesService = customTemplatesService;
        this.dateParser = dateParser;
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        /**
         * Determines if the message list should display channel messages or [thread messages](/chat/docs/javascript/threads/).
         */
        this.mode = 'main';
        /**
         * The direction of the messages in the list, `bottom-to-top` means newest message is at the bottom of the message list and users scroll upwards to load older messages
         */
        this.direction = 'bottom-to-top';
        /**
         * You can hide the "jump to latest" button while scrolling. A potential use-case for this input would be to [workaround a known issue on iOS Safar webview](https://github.com/GetStream/stream-chat-angular/issues/418)
         *
         */
        this.hideJumpToLatestButtonDuringScroll = false;
        /**
         * If `true` date separators will be displayed
         */
        this.displayDateSeparator = true;
        /**
         * If `true` unread indicator will be displayed
         */
        this.displayUnreadSeparator = true;
        /**
         * If date separators are displayed, you can set the horizontal position of the date text.
         */
        this.dateSeparatorTextPos = 'center';
        /**
         * `last-message` option will open the message list at the last message, `last-read-message` will open the list at the last unread message. This option only works if mode is `main`.
         */
        this.openMessageListAt = 'last-message';
        /**
         * If the user has unread messages when they open the channel the UI shows the unread indicator / notification which features the unread count by default. This count will be increased every time a user receives a new message. If you don't want to show the unread count, you can turn that off.
         *
         * This is only applicable for `main` mode, as threads doesn't have read infromation.
         */
        this.hideUnreadCountForNotificationAndIndicator = false;
        /**
         * You can turn on and off the loading indicator that signals to users that more messages are being loaded to the message list
         */
        this.displayLoadingIndicator = true;
        this.emptyMainMessageListTemplate = null;
        this.emptyThreadMessageListTemplate = null;
        this.enabledMessageActions = [];
        this.isEmpty = true;
        this.newMessageCountWhileBeingScrolled = 0;
        this.groupStyles = [];
        this.isNextMessageOnSeparateDate = [];
        this.loadingState = 'idle';
        this.isUnreadNotificationVisible = true;
        this.isJumpingToLatestUnreadMessage = false;
        this.isJumpToLatestButtonVisible = true;
        this.isJumpingToMessage = false;
        this.scroll$ = new Subject();
        this.isNewMessageSentByUser = false;
        this.subscriptions = [];
        this.isLatestMessageInList = true;
        this.parsedDates = new Map();
        this.isViewInited = false;
        this.jumpToMessageTimeouts = [];
        this.forceRepaintSubject = new Subject();
        this.isSafari = isSafari();
        this.scrollPosition$ = new BehaviorSubject('bottom');
        this.messageNotificationJumpClicked = () => {
            this.jumpToFirstUnreadMessage();
            this.isUnreadNotificationVisible = false;
        };
        this.messageNotificationDismissClicked = () => {
            this.isUnreadNotificationVisible = false;
        };
        this.usersTypingInChannel$ = this.channelService.usersTypingInChannel$;
        this.usersTypingInThread$ = this.channelService.usersTypingInThread$;
    }
    get class() {
        return `str-chat-angular__main-panel-inner str-chat-angular__message-list-host str-chat__main-panel-inner ${this.isEmpty ? 'str-chat-angular__message-list-host--empty' : ''}`;
    }
    ngOnInit() {
        this.subscriptions.push(this.forceRepaintSubject.pipe(throttleTime(1000)).subscribe(() => {
            this.forceRepaint();
        }));
        this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
            let wasChannelSwitch = false;
            if (this.channelId !== channel?.id) {
                wasChannelSwitch = true;
                if (this.checkIfUnreadNotificationIsVisibleTimeout) {
                    clearTimeout(this.checkIfUnreadNotificationIsVisibleTimeout);
                }
                this.jumpToMessageTimeouts.forEach((timeout) => clearTimeout(timeout));
                this.jumpToMessageTimeouts = [];
                this.highlightedMessageId = undefined;
                this.isUnreadNotificationVisible = false;
                this.parsedDates = new Map();
                this.resetScrollState();
                this.setMessages$();
                this.channelId = channel?.id;
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
            if (this.mode === 'main') {
                const lastReadMessageId = this.channelService.activeChannelLastReadMessageId;
                const unreadCount = this.channelService.activeChannelUnreadCount;
                if (lastReadMessageId !== this.lastReadMessageId ||
                    unreadCount !== this.unreadCount) {
                    this.lastReadMessageId = lastReadMessageId;
                    this.unreadCount = unreadCount || 0;
                    if (wasChannelSwitch && this.lastReadMessageId) {
                        // Delay jumping to last read message in case we need to give precedence to channelService.jumpToMessage
                        if (this.openMessageListAt === 'last-read-message') {
                            setTimeout(() => {
                                // Don't jump if a jump to a message was already started (using channelService.jumpToMessage)
                                if (!this.isJumpingToMessage &&
                                    !this.channelService.isMessageLoadingInProgress) {
                                    this.jumpToFirstUnreadMessage();
                                }
                            }, 0);
                        }
                        else {
                            // Wait till messages and the unread banner is rendered
                            // If unread banner isn't visible on the screen, we display the unread notificaion
                            setTimeout(() => {
                                const bannerElement = document.getElementById('stream-chat-new-message-indicator');
                                if (!bannerElement ||
                                    bannerElement?.offsetTop <
                                        this.scrollContainer?.nativeElement?.scrollHeight -
                                            this.scrollContainer?.nativeElement?.clientHeight) {
                                    this.isUnreadNotificationVisible = true;
                                    if (this.isViewInited) {
                                        this.cdRef.detectChanges();
                                    }
                                }
                            }, 100);
                        }
                    }
                    if (this.isViewInited) {
                        this.cdRef.detectChanges();
                    }
                }
            }
            else if (this.lastReadMessageId) {
                this.lastReadMessageId = undefined;
                this.unreadCount = 0;
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
            const capabilites = channel?.data?.own_capabilities;
            const capabilitesString = [...(capabilites || [])].sort().join('');
            const enabledActionsString = [...(this.enabledMessageActions || [])]
                .sort()
                .join('');
            if (capabilitesString !== enabledActionsString) {
                this.enabledMessageActions = capabilites || [];
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
            this.newMessageSubscription?.unsubscribe();
            if (channel) {
                this.newMessageSubscription = channel.on('message.new', (event) => {
                    if (!event.message) {
                        return;
                    }
                    else {
                        this.newMessageReceived(event.message);
                    }
                });
            }
        }));
        this.subscriptions.push(this.channelService.activeParentMessage$.subscribe((message) => {
            if (!message && this.parentMessage && this.mode === 'thread') {
                this.resetScrollState();
            }
            if (message &&
                this.parentMessage &&
                message.id !== this.parentMessage.id &&
                this.mode === 'thread') {
                this.resetScrollState();
                this.setMessages$();
            }
            if (this.parentMessage === message) {
                return;
            }
            this.parentMessage = message;
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.customTemplatesService.messageTemplate$.subscribe((template) => {
            if (this.messageTemplate === template) {
                return;
            }
            this.messageTemplate = template;
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.customTemplatesService.dateSeparatorTemplate$.subscribe((template) => {
            if (this.customDateSeparatorTemplate === template) {
                return;
            }
            this.customDateSeparatorTemplate = template;
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.customTemplatesService.newMessagesIndicatorTemplate$.subscribe((template) => {
            if (this.customnewMessagesIndicatorTemplate === template) {
                return;
            }
            this.customnewMessagesIndicatorTemplate = template;
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.customTemplatesService.newMessagesNotificationTemplate$.subscribe((template) => {
            if (this.customnewMessagesNotificationTemplate === template) {
                return;
            }
            this.customnewMessagesNotificationTemplate = template;
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.customTemplatesService.typingIndicatorTemplate$.subscribe((template) => {
            if (this.typingIndicatorTemplate === template) {
                return;
            }
            this.typingIndicatorTemplate = template;
            if (this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.customTemplatesService.emptyMainMessageListPlaceholder$.subscribe((template) => {
            const isChanged = this.emptyMainMessageListTemplate !== template;
            this.emptyMainMessageListTemplate = template || null;
            if (isChanged && this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.subscriptions.push(this.customTemplatesService.emptyThreadMessageListPlaceholder$.subscribe((template) => {
            const isChanged = this.emptyThreadMessageListTemplate !== template;
            this.emptyThreadMessageListTemplate = template || null;
            if (isChanged && this.isViewInited) {
                this.cdRef.detectChanges();
            }
        }));
        this.setMessages$();
    }
    ngOnChanges(changes) {
        if (changes.mode || changes.direction) {
            this.resetScrollState();
            this.setMessages$();
        }
        if (changes.direction) {
            if (this.scrollContainer?.nativeElement) {
                this.jumpToLatestMessage();
            }
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
        this.ngZone.runOutsideAngular(() => {
            this.scrollContainer?.nativeElement?.addEventListener('scroll', () => this.scrolled());
        });
    }
    ngAfterViewChecked() {
        if (this.isJumpingToMessage) {
            this.isNewMessageSentByUser = false;
            this.messageIdToAnchorTo = undefined;
            this.anchorMessageTopOffset = undefined;
            return;
        }
        if (this.messageIdToAnchorTo && this.loadingState === 'idle') {
            this.preserveScrollbarPosition();
        }
        else if ((!this.isUserScrolled &&
            this.scrollContainer.nativeElement?.scrollHeight >
                this.scrollContainer?.nativeElement.clientHeight &&
            this.getScrollPosition() !==
                (this.direction === 'bottom-to-top' ? 'bottom' : 'top')) ||
            (this.isUserScrolled && this.isNewMessageSentByUser)) {
            this.isNewMessageSentByUser = false;
            this.jumpToLatestMessage();
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
        this.newMessageSubscription?.unsubscribe();
        if (this.scrollEndTimeout) {
            clearTimeout(this.scrollEndTimeout);
        }
        if (this.checkIfUnreadNotificationIsVisibleTimeout) {
            clearTimeout(this.checkIfUnreadNotificationIsVisibleTimeout);
        }
        if (this.jumpToLatestButtonVisibilityTimeout) {
            clearTimeout(this.jumpToLatestButtonVisibilityTimeout);
        }
        this.jumpToMessageTimeouts.forEach((timeout) => clearTimeout(timeout));
        this.disposeVirtualizedList();
    }
    trackByMessageId(_, item) {
        return item.id;
    }
    trackByUserId(_, user) {
        return user.id;
    }
    jumpToLatestMessage() {
        if (this.isLatestMessageInList) {
            this.direction === 'bottom-to-top'
                ? this.scrollToBottom()
                : this.scrollToTop();
        }
        else {
            void this.channelService.jumpToMessage('latest', this.mode === 'thread' ? this.parentMessage?.id : undefined);
        }
    }
    scrollToBottom() {
        this.scrollContainer.nativeElement.scrollTop =
            this.scrollContainer.nativeElement.scrollHeight + 0.1;
        if (this.isSafari) {
            this.forceRepaintSubject.next();
        }
    }
    scrollToTop() {
        this.scrollContainer.nativeElement.scrollTop = 0;
    }
    scrolled() {
        if (this.scrollContainer.nativeElement.scrollHeight ===
            this.scrollContainer.nativeElement.clientHeight) {
            if (this.isJumpToLatestButtonVisible) {
                this.isJumpToLatestButtonVisible = false;
                this.newMessageCountWhileBeingScrolled = 0;
                this.cdRef.detectChanges();
            }
            return;
        }
        if (this.scrollContainer.nativeElement.scrollHeight >
            this.scrollContainer.nativeElement.clientHeight) {
            if (!this.isJumpToLatestButtonVisible) {
                this.isJumpToLatestButtonVisible = true;
            }
        }
        this.scroll$.next();
        this.checkIfUserScrolled();
        if (this.hideJumpToLatestButtonDuringScroll) {
            if (this.isJumpToLatestButtonVisible) {
                this.isJumpToLatestButtonVisible = false;
                this.cdRef.detectChanges();
            }
            if (this.jumpToLatestButtonVisibilityTimeout) {
                clearTimeout(this.jumpToLatestButtonVisibilityTimeout);
            }
            this.jumpToLatestButtonVisibilityTimeout = setTimeout(() => {
                if (this.isUserScrolled) {
                    this.isJumpToLatestButtonVisible = true;
                    this.jumpToLatestButtonVisibilityTimeout = undefined;
                    this.cdRef.detectChanges();
                }
            }, 100);
        }
    }
    jumpToFirstUnreadMessage() {
        if (!this.lastReadMessageId) {
            return;
        }
        this.isJumpingToLatestUnreadMessage = true;
        void this.channelService.jumpToMessage(this.lastReadMessageId);
    }
    getTypingIndicatorContext() {
        return {
            usersTyping$: this.usersTyping$,
        };
    }
    getTypingIndicatorText(users) {
        const text = listUsers(users);
        return text;
    }
    isSentByCurrentUser(message) {
        if (!message) {
            return false;
        }
        return message.user?.id === this.chatClientService.chatClient.user?.id;
    }
    parseDate(date) {
        if (this.parsedDates.has(date)) {
            return this.parsedDates.get(date);
        }
        const parsedDate = this.dateParser.parseDate(date);
        this.parsedDates.set(date, parsedDate);
        return parsedDate;
    }
    get replyCountParam() {
        return { replyCount: this.parentMessage?.reply_count };
    }
    get emptyListTemplate() {
        return this.mode === 'main'
            ? this.emptyMainMessageListTemplate
            : this.emptyThreadMessageListTemplate;
    }
    checkIfUserScrolled() {
        let scrollPosition = this.getScrollPosition();
        const isUserScrolled = (this.direction === 'bottom-to-top'
            ? scrollPosition !== 'bottom'
            : scrollPosition !== 'top') || !this.isLatestMessageInList;
        if (this.isUserScrolled !== isUserScrolled) {
            this.ngZone.run(() => {
                this.isUserScrolled = isUserScrolled;
                if (!this.isUserScrolled) {
                    this.newMessageCountWhileBeingScrolled = 0;
                }
                this.cdRef.detectChanges();
            });
        }
        const prevScrollPosition = this.scrollPosition$.getValue();
        if (this.direction === 'top-to-bottom') {
            if (scrollPosition === 'top') {
                scrollPosition = 'bottom';
            }
            else if (scrollPosition === 'bottom') {
                scrollPosition = 'top';
            }
        }
        if (prevScrollPosition !== scrollPosition && !this.isJumpingToMessage) {
            if (scrollPosition === 'top' || scrollPosition === 'bottom') {
                this.virtualizedList?.virtualizedItems$
                    .pipe(take(1))
                    .subscribe((items) => {
                    this.messageIdToAnchorTo =
                        scrollPosition === 'top'
                            ? items[0]?.id
                            : items[items.length - 1]?.id;
                    this.anchorMessageTopOffset = document
                        .getElementById(this.messageIdToAnchorTo)
                        ?.getBoundingClientRect()?.top;
                });
            }
            this.ngZone.run(() => {
                this.scrollPosition$.next(scrollPosition);
            });
        }
    }
    preserveScrollbarPosition() {
        if (!this.messageIdToAnchorTo) {
            return;
        }
        const messageToAlignTo = document.getElementById(this.messageIdToAnchorTo);
        this.messageIdToAnchorTo = undefined;
        this.scrollContainer.nativeElement.scrollTop +=
            (messageToAlignTo?.getBoundingClientRect()?.top || 0) -
                (this.anchorMessageTopOffset || 0);
        this.anchorMessageTopOffset = undefined;
        if (this.isSafari) {
            this.forceRepaintSubject.next();
        }
    }
    forceRepaint() {
        // Solves the issue of empty screen on Safari when scrolling
        this.scrollContainer.nativeElement.style.display = 'none';
        this.scrollContainer.nativeElement.offsetHeight; // no need to store this anywhere, the reference is enough
        this.scrollContainer.nativeElement.style.display = '';
    }
    getScrollPosition() {
        let position = 'middle';
        if (Math.ceil(this.scrollContainer.nativeElement.scrollTop) +
            this.scrollContainer.nativeElement.clientHeight +
            1 >=
            this.scrollContainer.nativeElement.scrollHeight) {
            position = 'bottom';
        }
        else if (Math.floor(this.scrollContainer.nativeElement.scrollTop) <=
            (this.parentMessageElement?.nativeElement?.clientHeight || 0)) {
            position = 'top';
        }
        return position;
    }
    setMessages$() {
        this.disposeVirtualizedList();
        this.virtualizedList = new VirtualizedMessageListService(this.mode, this.scrollPosition$, this.channelService);
        this.queryStateSubscription = this.virtualizedList.queryState$.subscribe((queryState) => {
            let mappedState = 'idle';
            if (queryState.state.includes('loading')) {
                mappedState = queryState.state || 'loading-bottom';
            }
            if (mappedState !== this.loadingState) {
                this.loadingState = mappedState;
                if (this.isViewInited) {
                    this.cdRef.detectChanges();
                }
            }
        });
        this.messages$ = this.virtualizedList.virtualizedItems$.pipe(tap(() => {
            if (this.isEmpty) {
                // cdRef.detectChanges() isn't enough here, test will fail
                setTimeout(() => (this.isEmpty = false), 0);
            }
        }), tap((messages) => {
            if (this.isJumpingToLatestUnreadMessage &&
                !this.firstUnreadMessageId &&
                this.lastReadMessageId) {
                const lastReadIndex = messages.findIndex((m) => m.id === this.lastReadMessageId);
                if (lastReadIndex !== -1) {
                    this.firstUnreadMessageId = messages[lastReadIndex + 1]?.id;
                }
            }
        }), tap((messages) => (this.lastSentMessageId = [...messages]
            .reverse()
            .find((m) => m.user?.id === this.chatClientService.chatClient?.user?.id &&
            m.status !== 'sending')?.id)), tap((messages) => {
            const latestMessageInList = messages[messages.length - 1];
            const channel = this.channelService.activeChannel;
            const messagesFromState = (this.mode === 'main'
                ? channel?.state.latestMessages
                : channel?.state.threads[this.parentMessage?.id || '']) || [];
            this.isLatestMessageInList =
                !latestMessageInList ||
                    latestMessageInList.cid !== channel?.cid ||
                    (this.mode === 'thread' &&
                        latestMessageInList?.parent_id !== this.parentMessage?.id) ||
                    latestMessageInList?.id ===
                        messagesFromState[messagesFromState.length - 1]?.id;
            if (!this.isLatestMessageInList) {
                this.isUserScrolled = true;
            }
        }), map((messages) => {
            return this.direction === 'bottom-to-top'
                ? messages
                : [...messages].reverse();
        }), tap((messages) => {
            this.groupStyles = messages.map((m, i) => getGroupStyles(m, messages[i - 1], messages[i + 1], {
                lastReadMessageId: this.lastReadMessageId,
            }));
            this.isNextMessageOnSeparateDate = messages.map((m, i) => this.checkIfOnSeparateDates(m, messages[i + 1]));
        }), shareReplay(1));
        if (this.virtualizedList?.jumpToItem$) {
            this.jumpToItemSubscription = this.virtualizedList.jumpToItem$
                .pipe(filter((jumpToMessage) => !!jumpToMessage.item?.id))
                .subscribe((jumpToMessage) => {
                let messageId = jumpToMessage.item?.id;
                if (messageId) {
                    if (this.isJumpingToLatestUnreadMessage) {
                        messageId = this.firstUnreadMessageId || messageId;
                    }
                    if (jumpToMessage.position !== 'bottom') {
                        this.highlightedMessageId = messageId;
                    }
                    else if (this.direction === 'top-to-bottom') {
                        jumpToMessage.position = 'top';
                    }
                    this.isJumpingToMessage = true;
                    this.scrollMessageIntoView({
                        messageId: this.firstUnreadMessageId || messageId,
                        position: jumpToMessage.position || 'middle',
                    });
                }
            });
        }
    }
    resetScrollState() {
        this.isEmpty = true;
        this.isUserScrolled = false;
        this.messageIdToAnchorTo = undefined;
        this.anchorMessageTopOffset = undefined;
        this.newMessageCountWhileBeingScrolled = 0;
        this.isNewMessageSentByUser = false;
        this.isLatestMessageInList = true;
        this.isJumpingToMessage = false;
        this.scrollPosition$.next('bottom');
        this.loadingState = 'idle';
    }
    disposeVirtualizedList() {
        this.virtualizedList?.dispose();
        this.jumpToItemSubscription?.unsubscribe();
        this.queryStateSubscription?.unsubscribe();
    }
    get usersTyping$() {
        return this.mode === 'thread'
            ? this.usersTypingInThread$
            : this.usersTypingInChannel$;
    }
    scrollMessageIntoView(options, withRetry = true) {
        const element = document.getElementById(options.messageId);
        this.jumpToMessageTimeouts.forEach((t) => clearTimeout(t));
        this.jumpToMessageTimeouts = [];
        if (!element && withRetry) {
            // If the message was newly inserted into activeChannelMessages$, the message will be rendered after the current change detection cycle -> wait for this cycle to complete
            this.jumpToMessageTimeouts.push(setTimeout(() => this.scrollMessageIntoView(options, false)));
        }
        else if (element) {
            const blockMapping = {
                top: 'start',
                bottom: 'end',
                middle: 'center',
            };
            // We can't know when smooth scrolling ends, so we set the behavior to instant https://github.com/w3c/csswg-drafts/issues/3744
            element.scrollIntoView({
                behavior: 'instant',
                block: blockMapping[options.position],
            });
            if (options.position !== 'middle') {
                options.position === 'bottom'
                    ? this.scrollToBottom()
                    : this.scrollToTop();
            }
            this.jumpToMessageTimeouts.push(setTimeout(() => {
                this.isJumpingToMessage = false;
                if (!this.isUserScrolled) {
                    this.checkIfUserScrolled();
                }
            }, 200));
            this.jumpToMessageTimeouts.push(setTimeout(() => {
                this.highlightedMessageId = undefined;
                this.firstUnreadMessageId = undefined;
                this.isJumpingToLatestUnreadMessage = false;
                this.jumpToMessageTimeouts = [];
                this.cdRef.detectChanges();
            }, 1000));
        }
        else {
            this.isJumpingToMessage = false;
            this.highlightedMessageId = undefined;
            this.firstUnreadMessageId = undefined;
            this.isJumpingToLatestUnreadMessage = false;
        }
    }
    newMessageReceived(message) {
        if ((this.mode === 'main' && message.parent_id) ||
            (this.mode === 'thread' && message.parent_id !== this.parentMessage?.id)) {
            return;
        }
        const isNewMessageSentByCurrentUser = message.user?.id === this.chatClientService.chatClient?.user?.id;
        let shouldDetectChanges = false;
        if (!this.isNewMessageSentByUser && isNewMessageSentByCurrentUser) {
            this.isNewMessageSentByUser = true;
            shouldDetectChanges = true;
        }
        if (this.isUserScrolled) {
            this.newMessageCountWhileBeingScrolled++;
            shouldDetectChanges = true;
        }
        if (!this.isNewMessageSentByUser && this.unreadCount !== undefined) {
            this.unreadCount++;
            shouldDetectChanges = true;
        }
        if (shouldDetectChanges && this.isViewInited) {
            this.cdRef.detectChanges();
        }
    }
    checkIfOnSeparateDates(message, nextMessage) {
        if (!message || !nextMessage) {
            return false;
        }
        return isOnSeparateDate(message.created_at, nextMessage.created_at);
    }
}
MessageListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageListComponent, deps: [{ token: i1.ChannelService }, { token: i2.ChatClientService }, { token: i3.CustomTemplatesService }, { token: i4.DateParserService }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MessageListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: MessageListComponent, selector: "stream-message-list", inputs: { mode: "mode", direction: "direction", hideJumpToLatestButtonDuringScroll: "hideJumpToLatestButtonDuringScroll", displayDateSeparator: "displayDateSeparator", displayUnreadSeparator: "displayUnreadSeparator", dateSeparatorTextPos: "dateSeparatorTextPos", openMessageListAt: "openMessageListAt", hideUnreadCountForNotificationAndIndicator: "hideUnreadCountForNotificationAndIndicator", displayLoadingIndicator: "displayLoadingIndicator" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "scrollContainer", first: true, predicate: ["scrollContainer"], descendants: true }, { propertyName: "parentMessageElement", first: true, predicate: ["parentMessageElement"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-container\n  *ngIf=\"\n    lastReadMessageId &&\n    isUnreadNotificationVisible &&\n    openMessageListAt === 'last-message' &&\n    displayUnreadSeparator\n  \"\n>\n  <ng-container\n    *ngTemplateOutlet=\"\n      customnewMessagesNotificationTemplate ||\n        defaultUnreadMessagesNotification;\n      context: {\n        unreadCount: unreadCount,\n        onDismiss: messageNotificationDismissClicked,\n        onJump: messageNotificationJumpClicked\n      }\n    \"\n  ></ng-container>\n</ng-container>\n<ng-template\n  #defaultUnreadMessagesNotification\n  let-unreadCount=\"unreadCount\"\n  let-onDismiss=\"onDismiss\"\n  let-onJump=\"onJump\"\n>\n  <div\n    class=\"str-chat__unread-messages-notification\"\n    data-testid=\"unread-messages-notification\"\n  >\n    <button\n      data-testid=\"unread-messages-notification-jump-to-message\"\n      (click)=\"onJump()\"\n    >\n      <ng-container\n        *ngIf=\"\n          unreadCount > 0 && !hideUnreadCountForNotificationAndIndicator;\n          else noUnreadCount\n        \"\n      >\n        {{\n          (unreadCount === 1\n            ? \"streamChat.\\{\\{count\\}\\} unread message\"\n            : \"streamChat.\\{\\{count\\}\\} unread messages\"\n          ) | translate : { count: unreadCount }\n        }}\n      </ng-container>\n      <ng-template #noUnreadCount>\n        {{ \"streamChat.Unread messages\" | translate }}\n      </ng-template>\n    </button>\n    <button\n      data-testid=\"unread-messages-notification-dismiss\"\n      (click)=\"onDismiss()\"\n    >\n      <stream-icon-placeholder icon=\"close\"></stream-icon-placeholder>\n    </button>\n  </div>\n</ng-template>\n<div #scrollContainer data-testid=\"scroll-container\" class=\"str-chat__list\">\n  <ng-container *ngIf=\"mode === 'main' && isEmpty && emptyListTemplate\">\n    <ng-container *ngTemplateOutlet=\"emptyListTemplate\"></ng-container>\n  </ng-container>\n  <div class=\"str-chat__reverse-infinite-scroll str-chat__message-list-scroll\">\n    <ul class=\"str-chat__ul\">\n      <li\n        *ngIf=\"mode === 'thread' && parentMessage\"\n        #parentMessageElement\n        data-testid=\"parent-message\"\n        class=\"str-chat__parent-message-li\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            messageTemplateContainer;\n            context: { message: parentMessage, index: 'parent' }\n          \"\n        ></ng-container>\n        <div data-testid=\"reply-count\" class=\"str-chat__thread-start\">\n          {{parentMessage.reply_count === 1 ? ('streamChat.1 reply' | translate) : ('streamChat.{{ replyCount }}\n          replies' | translate:replyCountParam)}}\n        </div>\n      </li>\n      <ng-container *ngIf=\"mode === 'thread' && isEmpty && emptyListTemplate\">\n        <ng-container *ngTemplateOutlet=\"emptyListTemplate\"></ng-container>\n      </ng-container>\n      <stream-loading-indicator-placeholder\n        *ngIf=\"\n          ((loadingState === 'loading-top' && direction === 'bottom-to-top') ||\n            (loadingState === 'loading-bottom' &&\n              direction === 'top-to-bottom')) &&\n            displayLoadingIndicator;\n          else loadingIndicatorPlaceholder\n        \"\n        data-testid=\"top-loading-indicator\"\n      ></stream-loading-indicator-placeholder>\n      <ng-container *ngIf=\"messages$ | async as messages\">\n        <ng-container\n          *ngFor=\"\n            let message of messages;\n            let i = index;\n            let isFirst = first;\n            let isLast = last;\n            trackBy: trackByMessageId\n          \"\n        >\n          <ng-container *ngIf=\"isFirst\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                dateSeparator;\n                context: {\n                  date: message.created_at,\n                  parsedDate: parseDate(message.created_at)\n                }\n              \"\n            ></ng-container>\n          </ng-container>\n          <li\n            tabindex=\"0\"\n            data-testclass=\"message\"\n            class=\"str-chat__li str-chat__li--{{ groupStyles[i] }}\"\n            id=\"{{ message.id }}\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"\n                messageTemplateContainer;\n                context: { message: message, index: i }\n              \"\n            ></ng-container>\n          </li>\n          <ng-container\n            *ngIf=\"\n              (lastReadMessageId === message?.id &&\n                direction === 'bottom-to-top') ||\n              (direction === 'top-to-bottom' &&\n                lastReadMessageId === messages[i + 1]?.id)\n            \"\n          >\n            <li\n              *ngIf=\"displayUnreadSeparator\"\n              id=\"stream-chat-new-message-indicator\"\n              data-testid=\"new-messages-indicator\"\n              class=\"str-chat__li str-chat__unread-messages-separator-wrapper\"\n            >\n              <ng-container\n                *ngTemplateOutlet=\"\n                  customnewMessagesIndicatorTemplate ||\n                    defaultNewMessagesIndicator;\n                  context: { unreadCount: unreadCount }\n                \"\n              ></ng-container>\n            </li>\n          </ng-container>\n          <ng-container *ngIf=\"isNextMessageOnSeparateDate[i]\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                dateSeparator;\n                context: {\n                  date: messages[i + 1].created_at,\n                  parsedDate: parseDate(messages[i + 1].created_at)\n                }\n              \"\n            ></ng-container>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n      <stream-loading-indicator-placeholder\n        *ngIf=\"\n          ((loadingState === 'loading-bottom' &&\n            direction === 'bottom-to-top') ||\n            (loadingState === 'loading-top' &&\n              direction === 'top-to-bottom')) &&\n            displayLoadingIndicator;\n          else loadingIndicatorPlaceholder\n        \"\n        data-testid=\"bottom-loading-indicator\"\n      ></stream-loading-indicator-placeholder>\n      <ng-template #loadingIndicatorPlaceholder>\n        <div class=\"str-chat__loading-indicator-placeholder\"></div>\n      </ng-template>\n    </ul>\n    <ng-template #defaultTypingIndicator let-usersTyping$=\"usersTyping$\">\n      <!-- eslint-disable-next-line @angular-eslint/template/no-any -->\n      <ng-container *ngIf=\"$any(usersTyping$ | async) as users\">\n        <div\n          *ngIf=\"users.length > 0\"\n          data-testid=\"typing-indicator\"\n          class=\"str-chat__typing-indicator str-chat__typing-indicator--typing\"\n        >\n          <div class=\"str-chat__typing-indicator__dots\">\n            <span class=\"str-chat__typing-indicator__dot\"></span>\n            <span class=\"str-chat__typing-indicator__dot\"></span>\n            <span class=\"str-chat__typing-indicator__dot\"></span>\n          </div>\n          <div\n            data-testid=\"typing-users\"\n            class=\"str-chat__typing-indicator__users\"\n          >\n            {{\n              users.length === 1\n                ? (\"streamChat.user is typing\"\n                  | translate : { user: getTypingIndicatorText(users) })\n                : (\"streamChat.users are typing\"\n                  | translate : { users: getTypingIndicatorText(users) })\n            }}\n          </div>\n        </div>\n      </ng-container>\n    </ng-template>\n    <ng-container\n      *ngTemplateOutlet=\"\n        typingIndicatorTemplate || defaultTypingIndicator;\n        context: getTypingIndicatorContext()\n      \"\n    ></ng-container>\n  </div>\n</div>\n<div class=\"str-chat__jump-to-latest-message\">\n  <button\n    *ngIf=\"isUserScrolled && isJumpToLatestButtonVisible\"\n    data-testid=\"scroll-to-latest\"\n    class=\"str-chat__message-notification-scroll-to-latest str-chat__message-notification-scroll-to-latest-right str-chat__circle-fab\"\n    (keyup.enter)=\"jumpToLatestMessage()\"\n    (click)=\"jumpToLatestMessage()\"\n  >\n    <stream-icon\n      class=\"str-chat__jump-to-latest-icon str-chat__circle-fab-icon\"\n      [icon]=\"direction === 'bottom-to-top' ? 'arrow-down' : 'arrow-up'\"\n    ></stream-icon>\n    <div\n      *ngIf=\"newMessageCountWhileBeingScrolled > 0\"\n      class=\"str-chat__message-notification str-chat__message-notification-scroll-to-latest-unread-count str-chat__jump-to-latest-unread-count\"\n    >\n      {{ newMessageCountWhileBeingScrolled }}\n    </div>\n  </button>\n</div>\n\n<ng-template #messageTemplateContainer let-message=\"message\" let-index=\"index\">\n  <ng-template\n    #defaultMessageTemplate\n    let-messageInput=\"message\"\n    let-isLastSentMessage=\"isLastSentMessage\"\n    let-enabledMessageActions=\"enabledMessageActions\"\n    let-mode=\"mode\"\n    let-isHighlighted=\"isHighlighted\"\n    let-scroll$=\"scroll$\"\n  >\n    <stream-message\n      [message]=\"messageInput\"\n      [isLastSentMessage]=\"isLastSentMessage\"\n      [enabledMessageActions]=\"enabledMessageActions\"\n      [mode]=\"mode\"\n      [isHighlighted]=\"isHighlighted\"\n      [scroll$]=\"scroll$\"\n    ></stream-message>\n  </ng-template>\n  <ng-container\n    *ngTemplateOutlet=\"\n      messageTemplate || defaultMessageTemplate;\n      context: {\n        message: message,\n        isLastSentMessage: !!(\n          lastSentMessageId && message?.id === lastSentMessageId\n        ),\n        enabledMessageActions: enabledMessageActions,\n        mode: mode,\n        isHighlighted: message?.id === highlightedMessageId,\n        scroll$: scroll$\n      }\n    \"\n  ></ng-container>\n</ng-template>\n\n<ng-template #dateSeparator let-date=\"date\" let-parsedDate=\"parsedDate\">\n  <ng-container *ngIf=\"displayDateSeparator\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        customDateSeparatorTemplate || defaultDateSeparator;\n        context: {\n          date: date,\n          parsedDate: parsedDate\n        }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template\n    #defaultDateSeparator\n    let-date=\"date\"\n    let-parsedDate=\"parsedDate\"\n  >\n    <div data-testid=\"date-separator\" class=\"str-chat__date-separator\">\n      <hr\n        *ngIf=\"\n          dateSeparatorTextPos === 'right' || dateSeparatorTextPos === 'center'\n        \"\n        class=\"str-chat__date-separator-line\"\n      />\n      <div class=\"str-chat__date-separator-date\">\n        {{ parsedDate }}\n      </div>\n      <hr\n        *ngIf=\"\n          dateSeparatorTextPos === 'left' || dateSeparatorTextPos === 'center'\n        \"\n        class=\"str-chat__date-separator-line\"\n      />\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #defaultNewMessagesIndicator let-unreadCount=\"unreadCount\">\n  <div class=\"str-chat__unread-messages-separator\">\n    <ng-container\n      *ngIf=\"\n        unreadCount > 0 && !hideUnreadCountForNotificationAndIndicator;\n        else noUnreadCount\n      \"\n    >\n      {{\n        (unreadCount === 1\n          ? \"streamChat.\\{\\{count\\}\\} unread message\"\n          : \"streamChat.\\{\\{count\\}\\} unread messages\"\n        ) | translate : { count: unreadCount }\n      }}\n    </ng-container>\n    <ng-template #noUnreadCount>\n      {{ \"streamChat.Unread messages\" | translate }}\n    </ng-template>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i6.IconComponent, selector: "stream-icon", inputs: ["icon"] }, { kind: "component", type: i7.IconPlaceholderComponent, selector: "stream-icon-placeholder", inputs: ["icon"] }, { kind: "component", type: i8.LoadingIndicatorPlaceholderComponent, selector: "stream-loading-indicator-placeholder" }, { kind: "component", type: i9.MessageComponent, selector: "stream-message", inputs: ["message", "enabledMessageActions", "isLastSentMessage", "mode", "isHighlighted", "scroll$"] }, { kind: "pipe", type: i5.AsyncPipe, name: "async" }, { kind: "pipe", type: i10.TranslatePipe, name: "translate" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-message-list', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container\n  *ngIf=\"\n    lastReadMessageId &&\n    isUnreadNotificationVisible &&\n    openMessageListAt === 'last-message' &&\n    displayUnreadSeparator\n  \"\n>\n  <ng-container\n    *ngTemplateOutlet=\"\n      customnewMessagesNotificationTemplate ||\n        defaultUnreadMessagesNotification;\n      context: {\n        unreadCount: unreadCount,\n        onDismiss: messageNotificationDismissClicked,\n        onJump: messageNotificationJumpClicked\n      }\n    \"\n  ></ng-container>\n</ng-container>\n<ng-template\n  #defaultUnreadMessagesNotification\n  let-unreadCount=\"unreadCount\"\n  let-onDismiss=\"onDismiss\"\n  let-onJump=\"onJump\"\n>\n  <div\n    class=\"str-chat__unread-messages-notification\"\n    data-testid=\"unread-messages-notification\"\n  >\n    <button\n      data-testid=\"unread-messages-notification-jump-to-message\"\n      (click)=\"onJump()\"\n    >\n      <ng-container\n        *ngIf=\"\n          unreadCount > 0 && !hideUnreadCountForNotificationAndIndicator;\n          else noUnreadCount\n        \"\n      >\n        {{\n          (unreadCount === 1\n            ? \"streamChat.\\{\\{count\\}\\} unread message\"\n            : \"streamChat.\\{\\{count\\}\\} unread messages\"\n          ) | translate : { count: unreadCount }\n        }}\n      </ng-container>\n      <ng-template #noUnreadCount>\n        {{ \"streamChat.Unread messages\" | translate }}\n      </ng-template>\n    </button>\n    <button\n      data-testid=\"unread-messages-notification-dismiss\"\n      (click)=\"onDismiss()\"\n    >\n      <stream-icon-placeholder icon=\"close\"></stream-icon-placeholder>\n    </button>\n  </div>\n</ng-template>\n<div #scrollContainer data-testid=\"scroll-container\" class=\"str-chat__list\">\n  <ng-container *ngIf=\"mode === 'main' && isEmpty && emptyListTemplate\">\n    <ng-container *ngTemplateOutlet=\"emptyListTemplate\"></ng-container>\n  </ng-container>\n  <div class=\"str-chat__reverse-infinite-scroll str-chat__message-list-scroll\">\n    <ul class=\"str-chat__ul\">\n      <li\n        *ngIf=\"mode === 'thread' && parentMessage\"\n        #parentMessageElement\n        data-testid=\"parent-message\"\n        class=\"str-chat__parent-message-li\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            messageTemplateContainer;\n            context: { message: parentMessage, index: 'parent' }\n          \"\n        ></ng-container>\n        <div data-testid=\"reply-count\" class=\"str-chat__thread-start\">\n          {{parentMessage.reply_count === 1 ? ('streamChat.1 reply' | translate) : ('streamChat.{{ replyCount }}\n          replies' | translate:replyCountParam)}}\n        </div>\n      </li>\n      <ng-container *ngIf=\"mode === 'thread' && isEmpty && emptyListTemplate\">\n        <ng-container *ngTemplateOutlet=\"emptyListTemplate\"></ng-container>\n      </ng-container>\n      <stream-loading-indicator-placeholder\n        *ngIf=\"\n          ((loadingState === 'loading-top' && direction === 'bottom-to-top') ||\n            (loadingState === 'loading-bottom' &&\n              direction === 'top-to-bottom')) &&\n            displayLoadingIndicator;\n          else loadingIndicatorPlaceholder\n        \"\n        data-testid=\"top-loading-indicator\"\n      ></stream-loading-indicator-placeholder>\n      <ng-container *ngIf=\"messages$ | async as messages\">\n        <ng-container\n          *ngFor=\"\n            let message of messages;\n            let i = index;\n            let isFirst = first;\n            let isLast = last;\n            trackBy: trackByMessageId\n          \"\n        >\n          <ng-container *ngIf=\"isFirst\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                dateSeparator;\n                context: {\n                  date: message.created_at,\n                  parsedDate: parseDate(message.created_at)\n                }\n              \"\n            ></ng-container>\n          </ng-container>\n          <li\n            tabindex=\"0\"\n            data-testclass=\"message\"\n            class=\"str-chat__li str-chat__li--{{ groupStyles[i] }}\"\n            id=\"{{ message.id }}\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"\n                messageTemplateContainer;\n                context: { message: message, index: i }\n              \"\n            ></ng-container>\n          </li>\n          <ng-container\n            *ngIf=\"\n              (lastReadMessageId === message?.id &&\n                direction === 'bottom-to-top') ||\n              (direction === 'top-to-bottom' &&\n                lastReadMessageId === messages[i + 1]?.id)\n            \"\n          >\n            <li\n              *ngIf=\"displayUnreadSeparator\"\n              id=\"stream-chat-new-message-indicator\"\n              data-testid=\"new-messages-indicator\"\n              class=\"str-chat__li str-chat__unread-messages-separator-wrapper\"\n            >\n              <ng-container\n                *ngTemplateOutlet=\"\n                  customnewMessagesIndicatorTemplate ||\n                    defaultNewMessagesIndicator;\n                  context: { unreadCount: unreadCount }\n                \"\n              ></ng-container>\n            </li>\n          </ng-container>\n          <ng-container *ngIf=\"isNextMessageOnSeparateDate[i]\">\n            <ng-container\n              *ngTemplateOutlet=\"\n                dateSeparator;\n                context: {\n                  date: messages[i + 1].created_at,\n                  parsedDate: parseDate(messages[i + 1].created_at)\n                }\n              \"\n            ></ng-container>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n      <stream-loading-indicator-placeholder\n        *ngIf=\"\n          ((loadingState === 'loading-bottom' &&\n            direction === 'bottom-to-top') ||\n            (loadingState === 'loading-top' &&\n              direction === 'top-to-bottom')) &&\n            displayLoadingIndicator;\n          else loadingIndicatorPlaceholder\n        \"\n        data-testid=\"bottom-loading-indicator\"\n      ></stream-loading-indicator-placeholder>\n      <ng-template #loadingIndicatorPlaceholder>\n        <div class=\"str-chat__loading-indicator-placeholder\"></div>\n      </ng-template>\n    </ul>\n    <ng-template #defaultTypingIndicator let-usersTyping$=\"usersTyping$\">\n      <!-- eslint-disable-next-line @angular-eslint/template/no-any -->\n      <ng-container *ngIf=\"$any(usersTyping$ | async) as users\">\n        <div\n          *ngIf=\"users.length > 0\"\n          data-testid=\"typing-indicator\"\n          class=\"str-chat__typing-indicator str-chat__typing-indicator--typing\"\n        >\n          <div class=\"str-chat__typing-indicator__dots\">\n            <span class=\"str-chat__typing-indicator__dot\"></span>\n            <span class=\"str-chat__typing-indicator__dot\"></span>\n            <span class=\"str-chat__typing-indicator__dot\"></span>\n          </div>\n          <div\n            data-testid=\"typing-users\"\n            class=\"str-chat__typing-indicator__users\"\n          >\n            {{\n              users.length === 1\n                ? (\"streamChat.user is typing\"\n                  | translate : { user: getTypingIndicatorText(users) })\n                : (\"streamChat.users are typing\"\n                  | translate : { users: getTypingIndicatorText(users) })\n            }}\n          </div>\n        </div>\n      </ng-container>\n    </ng-template>\n    <ng-container\n      *ngTemplateOutlet=\"\n        typingIndicatorTemplate || defaultTypingIndicator;\n        context: getTypingIndicatorContext()\n      \"\n    ></ng-container>\n  </div>\n</div>\n<div class=\"str-chat__jump-to-latest-message\">\n  <button\n    *ngIf=\"isUserScrolled && isJumpToLatestButtonVisible\"\n    data-testid=\"scroll-to-latest\"\n    class=\"str-chat__message-notification-scroll-to-latest str-chat__message-notification-scroll-to-latest-right str-chat__circle-fab\"\n    (keyup.enter)=\"jumpToLatestMessage()\"\n    (click)=\"jumpToLatestMessage()\"\n  >\n    <stream-icon\n      class=\"str-chat__jump-to-latest-icon str-chat__circle-fab-icon\"\n      [icon]=\"direction === 'bottom-to-top' ? 'arrow-down' : 'arrow-up'\"\n    ></stream-icon>\n    <div\n      *ngIf=\"newMessageCountWhileBeingScrolled > 0\"\n      class=\"str-chat__message-notification str-chat__message-notification-scroll-to-latest-unread-count str-chat__jump-to-latest-unread-count\"\n    >\n      {{ newMessageCountWhileBeingScrolled }}\n    </div>\n  </button>\n</div>\n\n<ng-template #messageTemplateContainer let-message=\"message\" let-index=\"index\">\n  <ng-template\n    #defaultMessageTemplate\n    let-messageInput=\"message\"\n    let-isLastSentMessage=\"isLastSentMessage\"\n    let-enabledMessageActions=\"enabledMessageActions\"\n    let-mode=\"mode\"\n    let-isHighlighted=\"isHighlighted\"\n    let-scroll$=\"scroll$\"\n  >\n    <stream-message\n      [message]=\"messageInput\"\n      [isLastSentMessage]=\"isLastSentMessage\"\n      [enabledMessageActions]=\"enabledMessageActions\"\n      [mode]=\"mode\"\n      [isHighlighted]=\"isHighlighted\"\n      [scroll$]=\"scroll$\"\n    ></stream-message>\n  </ng-template>\n  <ng-container\n    *ngTemplateOutlet=\"\n      messageTemplate || defaultMessageTemplate;\n      context: {\n        message: message,\n        isLastSentMessage: !!(\n          lastSentMessageId && message?.id === lastSentMessageId\n        ),\n        enabledMessageActions: enabledMessageActions,\n        mode: mode,\n        isHighlighted: message?.id === highlightedMessageId,\n        scroll$: scroll$\n      }\n    \"\n  ></ng-container>\n</ng-template>\n\n<ng-template #dateSeparator let-date=\"date\" let-parsedDate=\"parsedDate\">\n  <ng-container *ngIf=\"displayDateSeparator\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        customDateSeparatorTemplate || defaultDateSeparator;\n        context: {\n          date: date,\n          parsedDate: parsedDate\n        }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template\n    #defaultDateSeparator\n    let-date=\"date\"\n    let-parsedDate=\"parsedDate\"\n  >\n    <div data-testid=\"date-separator\" class=\"str-chat__date-separator\">\n      <hr\n        *ngIf=\"\n          dateSeparatorTextPos === 'right' || dateSeparatorTextPos === 'center'\n        \"\n        class=\"str-chat__date-separator-line\"\n      />\n      <div class=\"str-chat__date-separator-date\">\n        {{ parsedDate }}\n      </div>\n      <hr\n        *ngIf=\"\n          dateSeparatorTextPos === 'left' || dateSeparatorTextPos === 'center'\n        \"\n        class=\"str-chat__date-separator-line\"\n      />\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #defaultNewMessagesIndicator let-unreadCount=\"unreadCount\">\n  <div class=\"str-chat__unread-messages-separator\">\n    <ng-container\n      *ngIf=\"\n        unreadCount > 0 && !hideUnreadCountForNotificationAndIndicator;\n        else noUnreadCount\n      \"\n    >\n      {{\n        (unreadCount === 1\n          ? \"streamChat.\\{\\{count\\}\\} unread message\"\n          : \"streamChat.\\{\\{count\\}\\} unread messages\"\n        ) | translate : { count: unreadCount }\n      }}\n    </ng-container>\n    <ng-template #noUnreadCount>\n      {{ \"streamChat.Unread messages\" | translate }}\n    </ng-template>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.ChatClientService }, { type: i3.CustomTemplatesService }, { type: i4.DateParserService }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { mode: [{
                type: Input
            }], direction: [{
                type: Input
            }], hideJumpToLatestButtonDuringScroll: [{
                type: Input
            }], displayDateSeparator: [{
                type: Input
            }], displayUnreadSeparator: [{
                type: Input
            }], dateSeparatorTextPos: [{
                type: Input
            }], openMessageListAt: [{
                type: Input
            }], hideUnreadCountForNotificationAndIndicator: [{
                type: Input
            }], displayLoadingIndicator: [{
                type: Input
            }], scrollContainer: [{
                type: ViewChild,
                args: ['scrollContainer']
            }], parentMessageElement: [{
                type: ViewChild,
                args: ['parentMessageElement']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,