import { Injectable } from '@angular/core';
import { parseDate } from './parse-date';
import * as i0 from "@angular/core";
/**
 * The `DateParserService` parses dates into user-friendly string representations.
 */
export class DateParserService {
    constructor() { }
    /**
     * Return a user-friendly string representation of the time
     * @param date
     * @returns The parsed time
     */
    parseTime(date) {
        if (this.customTimeParser) {
            return this.customTimeParser(date);
        }
        return parseDate(date, 'time');
    }
    /**
     * Return a user-friendly string representation of the date (year, month and date)
     * @param date
     * @returns The parsed date
     */
    parseDate(date) {
        if (this.customDateParser) {
            return this.customDateParser(date);
        }
        return parseDate(date, 'date');
    }
    /**
     * Return a user-friendly string representation of the date and time
     * @param date
     * @returns The parsed date
     */
    parseDateTime(date) {
        if (this.customDateTimeParser) {
            return this.customDateTimeParser(date);
        }
        return parseDate(date, 'date-time');
    }
}
DateParserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: DateParserService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DateParserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: DateParserService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: DateParserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1wYXJzZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9kYXRlLXBhcnNlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFekM7O0dBRUc7QUFJSCxNQUFNLE9BQU8saUJBQWlCO0lBYzVCLGdCQUFlLENBQUM7SUFFaEI7Ozs7T0FJRztJQUNILFNBQVMsQ0FBQyxJQUFVO1FBQ2xCLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsT0FBTyxTQUFTLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsU0FBUyxDQUFDLElBQVU7UUFDbEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxhQUFhLENBQUMsSUFBVTtRQUN0QixJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QztRQUNELE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs4R0FsRFUsaUJBQWlCO2tIQUFqQixpQkFBaUIsY0FGaEIsTUFBTTsyRkFFUCxpQkFBaUI7a0JBSDdCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgcGFyc2VEYXRlIH0gZnJvbSAnLi9wYXJzZS1kYXRlJztcblxuLyoqXG4gKiBUaGUgYERhdGVQYXJzZXJTZXJ2aWNlYCBwYXJzZXMgZGF0ZXMgaW50byB1c2VyLWZyaWVuZGx5IHN0cmluZyByZXByZXNlbnRhdGlvbnMuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBEYXRlUGFyc2VyU2VydmljZSB7XG4gIC8qKlxuICAgKiBDdXN0b20gcGFyc2VyIHRvIG92ZXJyaWRlIGBwYXJzZVRpbWVgXG4gICAqL1xuICBjdXN0b21UaW1lUGFyc2VyPzogKGRhdGU6IERhdGUpID0+IHN0cmluZztcbiAgLyoqXG4gICAqIEN1c3RvbSBwYXJzZXIgdG8gb3ZlcnJpZGUgYHBhcnNlRGF0ZWBcbiAgICovXG4gIGN1c3RvbURhdGVQYXJzZXI/OiAoZGF0ZTogRGF0ZSkgPT4gc3RyaW5nO1xuICAvKipcbiAgICogQ3VzdG9tIHBhcnNlciB0byBvdmVycmlkZSBgcGFyc2VEYXRlVGltZWBcbiAgICovXG4gIGN1c3RvbURhdGVUaW1lUGFyc2VyPzogKGRhdGU6IERhdGUpID0+IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHVzZXItZnJpZW5kbHkgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lXG4gICAqIEBwYXJhbSBkYXRlXG4gICAqIEByZXR1cm5zIFRoZSBwYXJzZWQgdGltZVxuICAgKi9cbiAgcGFyc2VUaW1lKGRhdGU6IERhdGUpIHtcbiAgICBpZiAodGhpcy5jdXN0b21UaW1lUGFyc2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXN0b21UaW1lUGFyc2VyKGRhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VEYXRlKGRhdGUsICd0aW1lJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGEgdXNlci1mcmllbmRseSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGRhdGUgKHllYXIsIG1vbnRoIGFuZCBkYXRlKVxuICAgKiBAcGFyYW0gZGF0ZVxuICAgKiBAcmV0dXJucyBUaGUgcGFyc2VkIGRhdGVcbiAgICovXG4gIHBhcnNlRGF0ZShkYXRlOiBEYXRlKSB7XG4gICAgaWYgKHRoaXMuY3VzdG9tRGF0ZVBhcnNlcikge1xuICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tRGF0ZVBhcnNlcihkYXRlKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRGF0ZShkYXRlLCAnZGF0ZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHVzZXItZnJpZW5kbHkgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRlIGFuZCB0aW1lXG4gICAqIEBwYXJhbSBkYXRlXG4gICAqIEByZXR1cm5zIFRoZSBwYXJzZWQgZGF0ZVxuICAgKi9cbiAgcGFyc2VEYXRlVGltZShkYXRlOiBEYXRlKSB7XG4gICAgaWYgKHRoaXMuY3VzdG9tRGF0ZVRpbWVQYXJzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1c3RvbURhdGVUaW1lUGFyc2VyKGRhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VEYXRlKGRhdGUsICdkYXRlLXRpbWUnKTtcbiAgfVxufVxuIl19