import Dayjs from 'dayjs';
import calendar from 'dayjs/plugin/calendar';
import relativeTime from 'dayjs/plugin/relativeTime';
Dayjs.extend(calendar);
Dayjs.extend(relativeTime);
export const parseDate = (date, format = 'date-time') => {
    const parsedTime = Dayjs(date);
    switch (format) {
        case 'date': {
            return parsedTime.calendar(null, {
                sameDay: '[Today]',
                nextDay: '[Tomorrow]',
                nextWeek: 'dddd',
                lastDay: '[Yesterday]',
                lastWeek: '[Last] dddd',
                sameElse: 'MM/DD/YYYY', // Everything else ( 10/17/2011 )
            });
        }
        case 'date-time': {
            return parsedTime.calendar();
        }
        case 'time': {
            return parsedTime.format('h:mm A');
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UtZGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9wYXJzZS1kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLFFBQVEsTUFBTSx1QkFBdUIsQ0FBQztBQUM3QyxPQUFPLFlBQVksTUFBTSwyQkFBMkIsQ0FBQztBQUVyRCxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZCLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFM0IsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQ3ZCLElBQVUsRUFDVixTQUF3QyxXQUFXLEVBQ25ELEVBQUU7SUFDRixNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFL0IsUUFBUSxNQUFNLEVBQUU7UUFDZCxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRTtnQkFDL0IsT0FBTyxFQUFFLFNBQVM7Z0JBQ2xCLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixRQUFRLEVBQUUsTUFBTTtnQkFDaEIsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixRQUFRLEVBQUUsWUFBWSxFQUFFLGlDQUFpQzthQUMxRCxDQUFDLENBQUM7U0FDSjtRQUNELEtBQUssV0FBVyxDQUFDLENBQUM7WUFDaEIsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDOUI7UUFDRCxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BDO0tBQ0Y7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGF5anMgZnJvbSAnZGF5anMnO1xuaW1wb3J0IGNhbGVuZGFyIGZyb20gJ2RheWpzL3BsdWdpbi9jYWxlbmRhcic7XG5pbXBvcnQgcmVsYXRpdmVUaW1lIGZyb20gJ2RheWpzL3BsdWdpbi9yZWxhdGl2ZVRpbWUnO1xuXG5EYXlqcy5leHRlbmQoY2FsZW5kYXIpO1xuRGF5anMuZXh0ZW5kKHJlbGF0aXZlVGltZSk7XG5cbmV4cG9ydCBjb25zdCBwYXJzZURhdGUgPSAoXG4gIGRhdGU6IERhdGUsXG4gIGZvcm1hdDogJ2RhdGUnIHwgJ2RhdGUtdGltZScgfCAndGltZScgPSAnZGF0ZS10aW1lJ1xuKSA9PiB7XG4gIGNvbnN0IHBhcnNlZFRpbWUgPSBEYXlqcyhkYXRlKTtcblxuICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgIGNhc2UgJ2RhdGUnOiB7XG4gICAgICByZXR1cm4gcGFyc2VkVGltZS5jYWxlbmRhcihudWxsLCB7XG4gICAgICAgIHNhbWVEYXk6ICdbVG9kYXldJywgLy8gVGhlIHNhbWUgZGF5ICggVG9kYXkgYXQgMjozMCBBTSApXG4gICAgICAgIG5leHREYXk6ICdbVG9tb3Jyb3ddJywgLy8gVGhlIG5leHQgZGF5ICggVG9tb3Jyb3cgYXQgMjozMCBBTSApXG4gICAgICAgIG5leHRXZWVrOiAnZGRkZCcsIC8vIFRoZSBuZXh0IHdlZWsgKCBTdW5kYXkgYXQgMjozMCBBTSApXG4gICAgICAgIGxhc3REYXk6ICdbWWVzdGVyZGF5XScsIC8vIFRoZSBkYXkgYmVmb3JlICggWWVzdGVyZGF5IGF0IDI6MzAgQU0gKVxuICAgICAgICBsYXN0V2VlazogJ1tMYXN0XSBkZGRkJywgLy8gTGFzdCB3ZWVrICggTGFzdCBNb25kYXkgYXQgMjozMCBBTSApXG4gICAgICAgIHNhbWVFbHNlOiAnTU0vREQvWVlZWScsIC8vIEV2ZXJ5dGhpbmcgZWxzZSAoIDEwLzE3LzIwMTEgKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNhc2UgJ2RhdGUtdGltZSc6IHtcbiAgICAgIHJldHVybiBwYXJzZWRUaW1lLmNhbGVuZGFyKCk7XG4gICAgfVxuICAgIGNhc2UgJ3RpbWUnOiB7XG4gICAgICByZXR1cm4gcGFyc2VkVGltZS5mb3JtYXQoJ2g6bW0gQScpO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==