import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./chat-client.service";
import * as i2 from "./notification.service";
/**
 * The `MessageReactionsService` provides customization options to message [reactions](/chat/docs/javascript/send_reaction/).
 *
 */
export class MessageReactionsService {
    constructor(chatClientService, notificationService) {
        this.chatClientService = chatClientService;
        this.notificationService = notificationService;
        /**
         * The enabled [reactions](/chat/docs/javascript/send_reaction/) and the associated emoji
         *
         * You can provide any string as a reaction. The emoji can be provided as a string, if you want to use custom images for reactions you have to provide a [custom reactions UI](/chat/docs/sdk/angular/services/CustomTemplatesService/#messagereactionstemplate/)
         */
        this.reactions$ = new BehaviorSubject({
            haha: 'üòÇ',
            like: 'üëç',
            love: '‚ù§Ô∏è',
            sad: 'üòû',
            wow: 'üòÆ',
        });
    }
    /**
     * Sets the enabled reactions
     */
    set reactions(reactions) {
        this.reactions$.next(reactions);
    }
    /**
     * Get the currently enabled reactions
     */
    get reactions() {
        return this.reactions$.getValue();
    }
    /**
     * Query reactions of a specific message, more info in the [API documentation](/chat/docs/javascript/send_reaction/#query-reactions)
     * @param messageId
     * @param type
     * @param next
     * @returns the reactions and the cursor for the next/prev pages
     */
    async queryReactions(messageId, type, next) {
        if (!this.chatClientService.chatClient) {
            throw new Error('Intialize the ChatClientService before querying reactions');
        }
        else {
            try {
                const response = await this.chatClientService.chatClient.queryReactions(messageId, { type }, { created_at: -1 }, { next });
                return response;
            }
            catch (error) {
                this.notificationService.addTemporaryNotification('streamChat.Error loading reactions');
                throw error;
            }
        }
    }
}
MessageReactionsService.…µfac = i0.…µ…µngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsService, deps: [{ token: i1.ChatClientService }, { token: i2.NotificationService }], target: i0.…µ…µFactoryTarget.Injectable });
MessageReactionsService.…µprov = i0.…µ…µngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsService, providedIn: 'root' });
i0.…µ…µngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1yZWFjdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9tZXNzYWdlLXJlYWN0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7OztBQUl2Qzs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sdUJBQXVCO0lBb0JsQyxZQUNVLGlCQUFvQyxFQUNwQyxtQkFBd0M7UUFEeEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBckJsRDs7OztXQUlHO1FBQ0gsZUFBVSxHQUFHLElBQUksZUFBZSxDQUEyQztZQUN6RSxJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixHQUFHLEVBQUUsSUFBSTtZQUNULEdBQUcsRUFBRSxJQUFJO1NBQ1YsQ0FBQyxDQUFDO0lBV0EsQ0FBQztJQUVKOztPQUVHO0lBQ0gsSUFBSSxTQUFTLENBQUMsU0FBbUQ7UUFDL0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxLQUFLLENBQUMsY0FBYyxDQUFDLFNBQWlCLEVBQUUsSUFBWSxFQUFFLElBQWE7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FDYiwyREFBMkQsQ0FDNUQsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJO2dCQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQ3JFLFNBQVMsRUFDVCxFQUFFLElBQUksRUFBRSxFQUNSLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQ2xCLEVBQUUsSUFBSSxFQUFFLENBQ1QsQ0FBQztnQkFFRixPQUFPLFFBQVEsQ0FBQzthQUNqQjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyx3QkFBd0IsQ0FDL0Msb0NBQW9DLENBQ3JDLENBQUM7Z0JBQ0YsTUFBTSxLQUFLLENBQUM7YUFDYjtTQUNGO0lBQ0gsQ0FBQzs7b0hBcEVVLHVCQUF1Qjt3SEFBdkIsdUJBQXVCLGNBRnRCLE1BQU07MkZBRVAsdUJBQXVCO2tCQUhuQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2VSZWFjdGlvbkNsaWNrRGV0YWlscywgTWVzc2FnZVJlYWN0aW9uVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDaGF0Q2xpZW50U2VydmljZSB9IGZyb20gJy4vY2hhdC1jbGllbnQuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9ub3RpZmljYXRpb24uc2VydmljZSc7XG5cbi8qKlxuICogVGhlIGBNZXNzYWdlUmVhY3Rpb25zU2VydmljZWAgcHJvdmlkZXMgY3VzdG9taXphdGlvbiBvcHRpb25zIHRvIG1lc3NhZ2UgW3JlYWN0aW9uc10oL2NoYXQvZG9jcy9qYXZhc2NyaXB0L3NlbmRfcmVhY3Rpb24vKS5cbiAqXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdlUmVhY3Rpb25zU2VydmljZSB7XG4gIC8qKlxuICAgKiBUaGUgZW5hYmxlZCBbcmVhY3Rpb25zXSgvY2hhdC9kb2NzL2phdmFzY3JpcHQvc2VuZF9yZWFjdGlvbi8pIGFuZCB0aGUgYXNzb2NpYXRlZCBlbW9qaVxuICAgKlxuICAgKiBZb3UgY2FuIHByb3ZpZGUgYW55IHN0cmluZyBhcyBhIHJlYWN0aW9uLiBUaGUgZW1vamkgY2FuIGJlIHByb3ZpZGVkIGFzIGEgc3RyaW5nLCBpZiB5b3Ugd2FudCB0byB1c2UgY3VzdG9tIGltYWdlcyBmb3IgcmVhY3Rpb25zIHlvdSBoYXZlIHRvIHByb3ZpZGUgYSBbY3VzdG9tIHJlYWN0aW9ucyBVSV0oL2NoYXQvZG9jcy9zZGsvYW5ndWxhci9zZXJ2aWNlcy9DdXN0b21UZW1wbGF0ZXNTZXJ2aWNlLyNtZXNzYWdlcmVhY3Rpb25zdGVtcGxhdGUvKVxuICAgKi9cbiAgcmVhY3Rpb25zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8eyBba2V5IGluIE1lc3NhZ2VSZWFjdGlvblR5cGVdOiBzdHJpbmcgfT4oe1xuICAgIGhhaGE6ICfwn5iCJyxcbiAgICBsaWtlOiAn8J+RjScsXG4gICAgbG92ZTogJ+KdpO+4jycsXG4gICAgc2FkOiAn8J+YnicsXG4gICAgd293OiAn8J+YricsXG4gIH0pO1xuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgW2BNZXNzYWdlUmVhY3Rpb25zQ29tcG9uZW50YF0oL2NoYXQvZG9jcy9zZGsvYW5ndWxhci9jb21wb25lbnRzL01lc3NhZ2VSZWFjdGlvbnNDb21wb25lbnQvKSB3aWxsIGRpc3BsYXkgdGhlIHJlYWN0aW5nIHVzZXJzIHdoZW4gYSByZWFjdGlvbiBpcyBjbGlja2VkLiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgd2l0aCB5b3VyIG93biBVSSBieSBwcm92aWRpbmcgYSBjdXN0b20gZXZlbnQgaGFuZGxlci5cbiAgICpcbiAgICogVGhlIGV2ZW50IGhhbmRsZXIgY2FuIHJldHJpZXZlIGFsbCByZWFjdGlvbnMgb2YgYSBtZXNzYWdlIHVzaW5nIHRoZSBbYG1lc3NhZ2VSZWFjdGlvbnNTZXJ2aWNlLnF1ZXJ5UmVhY3Rpb25zKClgXSgvY2hhdC9kb2NzL3Nkay9hbmd1bGFyL3NlcnZpY2VzL01lc3NhZ2VSZWFjdGlvbnNTZXJ2aWNlLyNxdWVyeXJlYWN0aW9ucylcbiAgICovXG4gIGN1c3RvbVJlYWN0aW9uQ2xpY2tIYW5kbGVyPzogKGRldGFpbHM6IE1lc3NhZ2VSZWFjdGlvbkNsaWNrRGV0YWlscykgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNoYXRDbGllbnRTZXJ2aWNlOiBDaGF0Q2xpZW50U2VydmljZSxcbiAgICBwcml2YXRlIG5vdGlmaWNhdGlvblNlcnZpY2U6IE5vdGlmaWNhdGlvblNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBlbmFibGVkIHJlYWN0aW9uc1xuICAgKi9cbiAgc2V0IHJlYWN0aW9ucyhyZWFjdGlvbnM6IHsgW2tleSBpbiBNZXNzYWdlUmVhY3Rpb25UeXBlXTogc3RyaW5nIH0pIHtcbiAgICB0aGlzLnJlYWN0aW9ucyQubmV4dChyZWFjdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudGx5IGVuYWJsZWQgcmVhY3Rpb25zXG4gICAqL1xuICBnZXQgcmVhY3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWN0aW9ucyQuZ2V0VmFsdWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWVyeSByZWFjdGlvbnMgb2YgYSBzcGVjaWZpYyBtZXNzYWdlLCBtb3JlIGluZm8gaW4gdGhlIFtBUEkgZG9jdW1lbnRhdGlvbl0oL2NoYXQvZG9jcy9qYXZhc2NyaXB0L3NlbmRfcmVhY3Rpb24vI3F1ZXJ5LXJlYWN0aW9ucylcbiAgICogQHBhcmFtIG1lc3NhZ2VJZFxuICAgKiBAcGFyYW0gdHlwZVxuICAgKiBAcGFyYW0gbmV4dFxuICAgKiBAcmV0dXJucyB0aGUgcmVhY3Rpb25zIGFuZCB0aGUgY3Vyc29yIGZvciB0aGUgbmV4dC9wcmV2IHBhZ2VzXG4gICAqL1xuICBhc3luYyBxdWVyeVJlYWN0aW9ucyhtZXNzYWdlSWQ6IHN0cmluZywgdHlwZTogc3RyaW5nLCBuZXh0Pzogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLmNoYXRDbGllbnRTZXJ2aWNlLmNoYXRDbGllbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludGlhbGl6ZSB0aGUgQ2hhdENsaWVudFNlcnZpY2UgYmVmb3JlIHF1ZXJ5aW5nIHJlYWN0aW9ucydcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jaGF0Q2xpZW50U2VydmljZS5jaGF0Q2xpZW50LnF1ZXJ5UmVhY3Rpb25zKFxuICAgICAgICAgIG1lc3NhZ2VJZCxcbiAgICAgICAgICB7IHR5cGUgfSxcbiAgICAgICAgICB7IGNyZWF0ZWRfYXQ6IC0xIH0sXG4gICAgICAgICAgeyBuZXh0IH1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvblNlcnZpY2UuYWRkVGVtcG9yYXJ5Tm90aWZpY2F0aW9uKFxuICAgICAgICAgICdzdHJlYW1DaGF0LkVycm9yIGxvYWRpbmcgcmVhY3Rpb25zJ1xuICAgICAgICApO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==