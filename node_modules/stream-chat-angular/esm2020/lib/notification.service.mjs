import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * The `NotificationService` can be used to add or remove notifications. By default the [`NotificationList`](/chat/docs/sdk/angular/components/NotificationListComponent/) component displays the currently active notifications.
 */
export class NotificationService {
    constructor() {
        this.notificationsSubject = new BehaviorSubject([]);
        this.notifications$ = this.notificationsSubject.asObservable();
    }
    /**
     * Displays a notification for the given amount of time.
     * @param content The text of the notification or the HTML template for the notification
     * @param type The type of the notification
     * @param timeout The number of milliseconds while the notification should be visible
     * @param translateParams Translation parameters for the `content` (for text notifications)
     * @param templateContext The input of the notification template (for HTML notifications)
     * @returns A method to clear the notification (before the timeout).
     */
    addTemporaryNotification(content, type = 'error', timeout = 5000, translateParams, templateContext) {
        const notification = this.createNotification(content, type, translateParams, templateContext);
        const id = setTimeout(() => this.removeNotification(notification.id), timeout);
        notification.dismissFn = () => {
            clearTimeout(id);
            this.removeNotification(notification.id);
        };
        this.notificationsSubject.next([
            ...this.notificationsSubject.getValue(),
            notification,
        ]);
        return notification.dismissFn;
    }
    /**
     * Displays a notification, that will be visible until it's removed.
     * @param content The text of the notification or the HTML template for the notification
     * @param type The type of the notification
     * @param translateParams Translation parameters for the `content` (for text notifications)
     * @param templateContext The input of the notification template (for HTML notifications)
     * @returns A method to clear the notification.
     */
    addPermanentNotification(content, type = 'error', translateParams, templateContext) {
        const notification = this.createNotification(content, type, translateParams, templateContext);
        this.notificationsSubject.next([
            ...this.notificationsSubject.getValue(),
            notification,
        ]);
        return notification.dismissFn;
    }
    createNotification(content, type, translateParams, templateContext) {
        const id = new Date().getTime().toString() + Math.random().toString();
        return {
            id,
            [typeof content === 'string' ? 'text' : 'template']: content,
            type,
            translateParams,
            templateContext: templateContext ?? {},
            dismissFn: () => this.removeNotification(id),
        };
    }
    removeNotification(id) {
        const notifications = this.notificationsSubject.getValue();
        const index = notifications.findIndex((n) => n.id === id);
        if (index === -1) {
            return;
        }
        notifications.splice(index, 1);
        this.notificationsSubject.next([...notifications]);
    }
}
NotificationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NotificationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NotificationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NotificationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NotificationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,